# TIME library
# by Stuart Allen

# USAGE: 
# PASS +process_epoch A SINGLE INTEGER REPRESENTING A 'UNIXTIME', IE. THE
# NUMBER OF SECONDS SINCE JANUARY 1 1970
# THIS WILL THEN POPULATE THE FOLLOWING INTEGERS:
# TIME_year, TIME_month, TIME_date, TIME_day, TIME_hour and TIME_minute
# ALL THE MACROS PROVIDED IN THIS LIBRARY CAN BE CALLED ON THE 'unixtime'
# INTEGER. ie
# set now = "+adjusted_time<unixtime" # ADJUSTS FOR THE CONFIGURED TIMEZONE
# write now{full_date} "^"

constant TIME_CONST_minute		60
constant TIME_CONST_hour		3600
constant TIME_CONST_day			86400
constant TIME_CONST_week		604800
constant TIME_CONST_month 		2629743
constant TIME_CONST_year		31536000
constant TIME_CONST_year_leap	31622400

# THE CYCLE OF LEAP AND NON-LEAP YEARS STARTING FROM 1970
constant TIME_CONST_year_cycle 31536000 31536000 31622400 31536000

# THESE ARE THE LENGTHS OF THE MONTHS IN SECONDS FOR NORMAL AND LEAP YEARS
constant TIME_CONST_lengths 2678400 2419200 2678400 2592000 2678400 2592000 
constant TIME_CONST_lengths 2678400 2678400 2592000 2678400 2592000 2678400
constant TIME_CONST_lenleap 2678400 2505600 2678400 2592000 2678400 2592000
constant TIME_CONST_lenleap 2678400 2678400 2592000 2678400 2592000 2678400

# THESE ARE THE LENGTHS OF THE MONTHS IN DAYS FOR NORMAL AND LEAP YEARS
constant TIME_CONST_daynum		31 28 31 30 31 30 31 31 30 31 30 31
constant TIME_CONST_daynumleap	31 29 31 30 31 30 31 31 30 31 30 31

# 0 = 1700-1799
constant TIME_century_starts 	4 2 0 6 4 2 0 6 4 2

constant TIME_month_starts		0 3 3 6 1 4 6 2 5 0 3 5
constant TIME_month_starts_leap	6 2 3 6 1 4 6 2 5 0 3 5

integer TIME_epoch	false
integer TIME_temp
integer TIME_index
integer TIME_day
integer TIME_minute
integer TIME_hour
integer TIME_date
integer TIME_week
integer TIME_month
integer TIME_year
integer TIME_leapyear
integer TIME_remainder
integer TIME_minute_sec
integer TIME_hour_sec
integer TIME_date_sec
integer TIME_week_sec
integer TIME_month_sec
integer TIME_year_sec
integer TIME_century
integer TIME_century_remainder
integer TIME_now

integer TIME_timezone 20

string_array TIME_chunk	5

string TIME_CONST_months "January" "February" "March" "April" "May" "June" 
string TIME_CONST_months "July" "August" "September" "October" "November" "December"

string TIME_CONST_days "Sunday" "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday"

string TIME_buffer

{+macro_integer_date
execute "+process_epoch<arg[0]"
setstring return_value TIME_date "/" TIME_month "/" TIME_year
}

{+macro_full_date
execute +macro_day<arg[0]
setstring TIME_buffer return_value
addstring TIME_buffer " "
execute +macro_date<arg[0]
addstring TIME_buffer return_value
addstring TIME_buffer " "
execute +macro_month<arg[0]
addstring TIME_buffer return_value
addstring TIME_buffer " "
execute +macro_year<arg[0]
addstring TIME_buffer return_value
setstring return_value TIME_buffer
}

{+macro_time
execute +macro_hour<arg[0]
setstring TIME_buffer return_value
addstring TIME_buffer ":"
execute +macro_minute<arg[0]
addstring TIME_buffer return_value
setstring return_value TIME_buffer
}

{+macro_minute
execute "+process_epoch<arg[0]"
if TIME_minute < 10
   setstring return_value "0"
   addstring return_value TIME_minute
else
   setstring return_value TIME_minute
endif
}

{+macro_hour
execute "+process_epoch<arg[0]"
if TIME_hour < 10
   setstring return_value "0"
   addstring return_value TIME_hour
endif
setstring return_value TIME_hour
}

{+process_epoch
if TIME_epoch = arg[0]
   # ALREADY PROCESSED, USED CACHED RESULT
   return
endif
set TIME_epoch = arg[0]
execute "+get_century<arg[0]"
# NOTE: +get_century CALLS +get_year
execute "+is_leap_year?<TIME_year"
# NOW GET THE MONTH
set TIME_month = TIME_remainder
if TIME_leapyear = true
   set TIME_index = 0
   while TIME_month => TIME_CONST_lenleap[TIME_index]
      set TIME_month - TIME_CONST_lenleap[TIME_index]
      set TIME_index + 1
   endwhile
else
   set TIME_index = 0
   while TIME_month => TIME_CONST_lengths[TIME_index]
      set TIME_month - TIME_CONST_lengths[TIME_index]
      set TIME_index + 1
   endwhile
endif
# STORE THE REMAINDER OF THE MONTH THAT IS LEFT
set TIME_date = TIME_month
# TIME_month NOW HOLDS THE INDEX TO THE NAME OF THE MONTH
set TIME_month = TIME_index
# STORE WHAT IS LEFT OF THE MONTH AFTER THE DAYS ARE REMOVED
set TIME_remainder = TIME_date % TIME_CONST_day
# NOW GET THE DATE AND STORE IT
set TIME_date / TIME_CONST_day
# DAYS ARE ONE-BASED NOT ZERO-BASED
set TIME_date + 1
# NOW GET THE DAY OF THE WEEK
set TIME_day = 0
set TIME_day + TIME_century_starts[TIME_century]
set TIME_day + TIME_century_remainder
set TIME_temp = TIME_century_remainder / 4
set TIME_day + TIME_temp
if TIME_leapyear = true
   set TIME_day + TIME_month_starts_leap[TIME_month]
else
   set TIME_day + TIME_month_starts[TIME_month]
endif
set TIME_day + TIME_date
set TIME_day % 7
# NOW GET THE TIME
set TIME_hour = TIME_remainder % TIME_CONST_day / TIME_CONST_hour
set TIME_minute = TIME_remainder % TIME_CONST_hour / TIME_CONST_minute
}

{+macro_day
execute "+process_epoch<arg[0]"
setstring return_value TIME_CONST_days[TIME_day]
}

{+macro_date
execute "+process_epoch<arg[0]"
setstring return_value TIME_date
execute "+suffix<TIME_date"
}

{+suffix
set TIME_temp = arg[0] % 10
if TIME_temp = 1
   addstring return_value "st"
   return
endif
if TIME_temp = 2
   addstring return_value "nd"
   return
endif
if TIME_temp = 3
   addstring return_value "rd"
   return
endif
addstring return_value "th"
}

{+macro_month
execute "+process_epoch<arg[0]"
setstring return_value TIME_CONST_months[TIME_month]
}

{+macro_year
execute "+process_epoch<arg[0]"
setstring return_value TIME_year
}

{+get_year
set TIME_temp = arg[0]
set TIME_index = 0
set TIME_year = 0
while TIME_temp => TIME_CONST_year_cycle[TIME_index]
   set TIME_temp - TIME_CONST_year_cycle[TIME_index]
   set TIME_index + 1
   set TIME_year + 1
   if TIME_index = 4
      set TIME_index = 0
   endif
endwhile
set TIME_year + 1970
set TIME_remainder = TIME_temp
return TIME_year
}

{+is_leap_year?
set TIME_temp = arg[0]
set TIME_temp % 400
if TIME_temp = 0
   set TIME_leapyear = true
   return true
endif
set TIME_temp = TIME_year % 100
if TIME_temp = 0
   set TIME_leapyear = false
   return false
endif
set TIME_temp = TIME_year % 4
if TIME_temp = 0
   set TIME_leapyear = true
   return true
else
   set TIME_leapyear = false
   return false
endif
}

{+get_century
execute "+get_year<arg[0]"
set TIME_century_remainder = TIME_year % 100
set TIME_century = TIME_year / 100
# CONVERT THE CENTURY TO AN INDEX INTO THE CENTURIES ARRAY
set TIME_century - 17
return TIME_century
}

{+adjusted_time
# ADD THE LOCAL TIMZONE TO THE TIME SUPPLIED
set TIME_temp = TIME_CONST_hour / 2 * TIME_timezone
set TIME_temp + arg[0]
return TIME_temp
}

# THIS METHOD RETURNS THE NUMBER OF SECONDS FROM
# JANUARY 1 1970 TO JANUARY 1 ON THE YEAR SPECIFIED
{+get_seconds_for_year
set TIME_year = arg[0] - 1970
set TIME_year_sec = 0
set TIME_index = 0
while TIME_year > 0
   set TIME_year_sec + TIME_CONST_year_cycle[TIME_index]
   set TIME_index + 1
   set TIME_year - 1
   if TIME_index = 4
      set TIME_index = 0
   endif
endwhile
return TIME_year_sec
}

integer TIME_leap

# THIS FUNCTION GETS THE NUMBER OF SECONDS FROM THE START
# OF THE YEAR TO THE START OF THE MONTH PASSED
# NOTE: THIS FUNCTION NEEDS TO KNOW IF THIS IS A LEAP YEAR
# OR NOT, YEAR MUST BE PASSED AS ARG[1], OTHER WISE PRESUMED
# TO BE THIS YEAR
{+get_seconds_for_month
set TIME_index = 0
set TIME_month = arg[0]
set TIME_month_sec = 0
set TIME_year = arg[1]
if +is_leap_year?<TIME_year = true
   while TIME_index < TIME_month
      set TIME_month_sec + TIME_CONST_lenleap[TIME_index]
      set TIME_index + 1
   endwhile
else
   while TIME_index < TIME_month
      set TIME_month_sec + TIME_CONST_lengths[TIME_index]
      set TIME_index + 1
   endwhile
endif
# ADD THE YEAR TO THE MONTH
set TIME_year_sec = +get_seconds_for_year<TIME_year
set TIME_month_sec + TIME_year_sec
return TIME_month_sec
}

# MUST BE PASSED DATE, MONTH AND YEAR INTEGERS
# DATE AND MONTH MUST BE ZERO-BASED
{+get_seconds_for_date
set TIME_year = arg[2]
set TIME_month = arg[1]
set TIME_month_sec = +get_seconds_for_month<TIME_month<TIME_year
set TIME_date_sec = TIME_CONST_day * arg[0]
set TIME_date_sec + TIME_month_sec
return TIME_date_sec
}

{+get_seconds_for_hour
set TIME_hour_sec = TIME_CONST_hour * arg[0]
return TIME_hour_sec
}

{+get_seconds_for_minute
set TIME_minute_sec = TIME_CONST_minute * arg[0]
return TIME_minute_sec
}

{+parse_date
split TIME_index string_arg[0] "/" "TIME_chunk"
set TIME_day = TIME_chunk[0] - 1          # ZERO-BASED
set TIME_month = TIME_chunk[1] - 1        # ZERO-BASED
set TIME_year = TIME_chunk[2]
return +get_seconds_for_date<TIME_day<TIME_month<TIME_year
}
