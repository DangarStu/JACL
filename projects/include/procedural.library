#-------------------------------------------------------------------------
# 	Proc_Gen.Library
#		by ElliotM
#-------------------------------------------------------------------------
#	Public Functions:
#-------------------------------------------------------------------------
#	+ensure_loc_add : +ensure_loc_sub : +ensure_loc_add_rand
#	+ensure_adj_add : +ensure_adj_sub : +ensure_adj_add_rand
#	+ensure_range_add : +ensure_range_sub : +ensure_range_add_rand
#-------------------------------------------------------------------------
#
#	+ensure_loc and +ensure_adj take any number of locations and attributes.
#	+ensure_range takes at least two locations and any number of attributes.
#
#	All can take one optional condition followed by attributes to check for.
#	Conditions are keyword strings listed in the string array CONDITIONS.
#	For now only one condition can be used at a time but this may change.
#
#-------------------------------------------------------------------------


#-------------------------------------------------------------------------
# 	Variables
#-------------------------------------------------------------------------

integer proc_index
integer proc2_index
integer proc3_index

integer proc_found
integer proc_target
integer proc2_target
integer proc_result
integer proc2_result
integer proc_count
integer proc2_count

integer param_index
string proc_string
string proc2_string
integer keyword

integer loc_index
integer att_index
integer att_next
integer att_num
integer att_valid

integer loc_num
integer adj_num
integer range_num

integer cond_index
integer cond_result
integer uptillnow
string cond_type
string cond_att


#-------------------------------------------------------------------------
# 	Arrays
#-------------------------------------------------------------------------

string 		INPUT loc adj range

string  OPERATORS add sub add_rand

string CONDITIONS loc_has_all loc_has_any loc_has_none 
string CONDITIONS adj_has_all adj_has_any adj_has_none 
;string CONDITIONS set_has_all set_has_any set_has_none

string	 KEYWORDS loc adj range
string	 KEYWORDS add sub add_rand 
string	 KEYWORDS loc_has_all loc_has_any loc_has_none 
string	 KEYWORDS adj_has_all adj_has_any adj_has_none 
;string	 KEYWORDS set_has_all set_has_any set_has_none

#-------------------------------------------------------------------------
# 	Input Integer Pointers
#-------------------------------------------------------------------------

integer loc_start					
integer loc_end						
integer att_start					
integer att_end						
integer cond_start				
integer cond_end	

integer hit_condition	false

string stopper "condition" "integer"

#-------------------------------------------------------------------------
# 	Public Functions
#		If you are unsure whether or not there are nonlocation objects
#	mixed in with your locations, include 'location' has a required attribute
#	in your conditions.
#
#	Conditions are re-evaluated before each operation 
#
#-------------------------------------------------------------------------

{+ensure_loc_add : +ensure_loc_sub : +ensure_loc_add_rand
	; 	Basic Syntax: <locations<attributes<optionalconditionkeyword<attributes
	; 	Accepts one or more locations. Use this if you need to build a 'range' by hand
	; 	There are several optional conditions but the function is limited to one type
	;	though it will test for as many attributes as you give it.

# Find the arg indexes of the locations to be acted upon with location names resolving to integers 
# A string or a value of -1 is an attribute or keyword and marks the end of the set of locations

set loc_start = 0 
set loc_end = -1 # If no locations are found, this will never get set to 0

set param_index = 0				; Start at the very first argument
whileall param_index < @arg : arg[param_index] != -1
	set loc_end = param_index	; Presume this is the last location for now
	set param_index + 1			; Move on to the next argument
endwhile	

if loc_end = -1
    # No locations were found in the arguments
	write "Insufficient data for: " function_name ^
	write "No locations given. " ^
	write "loc_start: " loc_start: ", loc_index: " loc_index: ", loc_end: " loc_end ", loc_num: " loc_num ", max_rand: " max_rand ", param_index: " param_index ^^
	return
else
	set loc_index = loc_start
	set loc_num = loc_end
	set loc_num - loc_start
	set loc_num + 1
	set max_rand = +set_max_rand<loc_start<loc_end
	;write "arg_count: " @arg " loc_start: " loc_start ", loc_index: " loc_index ", loc_end: " loc_end ", loc_num: " loc_num ", max_rand: " max_rand ", param_index: " param_index ^^
endif

# Parse attributes from the parameters - Strings and Integers allowed
set att_start = -1
set att_end = -1
if param_index != @arg
	set att_start = param_index
endif


# Keep looking through the arguments from after the last location (param_index)

set proc_result = false


whileall param_index < @arg
    write "att testing " proc_string ".^"
    more
	
	# Test the argument, if it is a condition stop processing

	if +test_index_for_condition<string_arg[param_index] = true 
        set hit_condition = true
		break # Immediately exits out of the loop
	endif

    #if arg[param_index] != -1
    #    set stopped_when = hit_integer
	#	break # Immediately exits out of the loop
	#endif

	set att_end = param_index
    set param_index + 1
endwhile

if att_end = -1
	write "Insufficient data for: " function_name ^
	write "No attributes given. " ^
	write "att_start: " att_start ", att_index: " att_index ", att_end: " att_end ", att_num: " att_num ", param_index: " param_index ^^
	return
else
	set att_num = att_end
	set att_num - att_start
	set att_num + 1
	set att_index = att_start	
	write "att_start: " att_start ", att_index: " att_index ", att_end: " att_end ", att_num: " att_num ", param_index: " param_index ^^
endif

write "How did we go with attributes?^"
more

# Parse optional conditions
setstring cond_type	"null"
write "cond_type: " cond_type ^
set cond_start = 0
set cond_end = 0

ifall param_index != @arg : hit_condition = true
	setstring cond_type string_arg[param_index]
	set cond_start = +prev_index<param_index		;Remove header keyword from the data
	whileall param_index < @arg : keyword = false 
		setstring proc_string string_arg[param_index]
		set proc_result = +test_index_for_condition<proc_string
		
		ifall proc_result = false : cond_start = 0 : arg[param_index] = -1
			set cond_start = param_index
		endif
		
		ifall proc_result = false : arg[param_index] = -1
			set cond_end = param_index
		endif
		
		if proc_result = true
			set keyword = true
		else
			param_index + 1
		endif	
	endwhile
endif
if param_index != @arg
	write "Extra keywords given to " function_name ^
else
	write "cond_type: " cond_type ^
	;write "cond_start: " cond_start ", cond_end: " cond_end ", param_index: " param_index ", proc_result: " proc_result ^^
endif

set cond_index = cond_start
set cond_result = +init_cond_result<cond_type
;write "cond_index: " cond_index ", cond_result: " cond_result ^

# Start Operations
set att_num = 1

write "Start Operations" ^
whileall loc_index <= loc_end : loc_end >= 0 : att_index <= att_end : att_end >= 0
	write "Start loop" ^

	# Validating Attribute Input to determine if it is a string value
	set proc_result = arg[att_index]
	set att_valid = +test_is_string<proc_result

	;write "1" ^
	# Default if no conditions were given is true #
	if cond_start = 0 : cond_end = 0
		write "No conditions " ^
		set cond_result = true
	endif

	;write "2" ^
	# Randomize loc_index and initialize att_num for +ensure_loc_add_rand #
	ifstring function_name = "+ensure_loc_add_rand"
		if cond_index = cond_start
			set loc_index = -1						; random returns numbers between 1 and 100. Zero needs to be possible since it holds a location.
			set loc_index + random
			write "Randomizing for Add_rand: " loc_index ^

			set att_next = +next_index<att_index
			
			ifall arg[att_index] = -1 : att_next != @arg : arg[att_next] > 0 : att_next <= att_end
				; Index is a String : Next is not past array end : Next is an integer : Next still inside attribute range
				set att_num = arg[att_next]
				;if att_num > loc_num				; An idea I had for protection against infinite looping which I'm not currently using.
				;	set att_num = loc_num			; Better was having it try x times and then move on rather than allowing it to loop
				;endif								; until it had placed the attribute x times.
			else
				set att_num = 1
			endif
		endif
	endif

	;write "3" ^
	# Condition Loop Progression (for all) #
	setstring cond_att string_arg[cond_index]
	set cond_result = +test_current_for_condition<loc_index<cond_type<cond_att<cond_result
	set cond_index + 1
	
	;write "4" ^
	# +ensure_loc_add #
	ifstring function_name = "+ensure_loc_add"
		ifall cond_result = true : cond_index > cond_end : att_valid = true
			ensure arg[loc_index] has string_arg[att_index]
			set att_index + 1
			set cond_index = cond_start
			write "Added an attribute " ^
		endif
	endif

	;write "5" ^
	# +ensure_loc_sub #
	ifstring function_name = "+ensure_loc_sub"
		ifall cond_result = true : cond_index > cond_end : att_valid = true
			write "subbed an attribute" ^
			ensure arg[loc_index] hasnt string_arg[att_index]
			set att_index + 1
			set cond_index = cond_start
		endif
	endif

	;write "6" ^
	# +ensure_loc_add_rand #	
	ifstring function_name = "+ensure_loc_add_rand" 					;: loc_index hasnt string_arg[att_index]
		; The commented out portion creates weakness to infinite looping. Without it, the function will try x times to place an attribute
		; and will then move on rather then looping until it has placed an attribute x times.
		ifall cond_result = true : cond_index > cond_end
			if att_num = 1
				ensure arg[loc_index] has string_arg[att_index]
				set att_index + 1
			else
				ensure arg[loc_index] has string_arg[att_index]
				set att_num - 1
			endif
			set cond_index = cond_start
		endif
	endif

	;write "7" ^
	# Attribute Loop Progression (for +ensure_loc_add and +ensure_loc_sub) #
	ifstring function_name = "+ensure_loc_add" : function_name = "+ensure_loc_sub"
		ifall cond_result = false : cond_index > cond_end
			set att_index + 1
			set cond_index = cond_start
		endif
	endif

	;write "8" ^
	# Location Loop Progression (for +ensure_loc_add and +ensure_loc_sub) #
	ifstring function_name = "+ensure_loc_add" : function_name = "+ensure_loc_sub"
		ifall cond_index = cond_start : att_index > att_end
			set att_index = att_start
			set cond_result = +init_cond_result<cond_type
			set loc_index + 1
		endif
	endif

	;write "9" ^
	# Loop Progression (for +ensure_loc_add_rand) #
	ifstring function_name = "+ensure_loc_add_rand"
		ifall cond_result = false : cond_index > cond_end
			set cond_index = cond_start
			; Will re-randomize with the next iteration
		endif
	endif
	;write "10" ^
	# Revalidate att_index and increment if invalid (for +ensure_loc_add and +ensure_loc_sub) #
	ifstring function_name = "+ensure_loc_add" : function_name = "+ensure_loc_sub"
		set proc_result = arg[att_index]
		set att_valid = +test_is_string<proc_result
		if att_valid = false
			set att_index + 1
		endif
	endif
	write "Looped" ^
endwhile
}


{+ensure_adj_add : +ensure_adj_sub : +ensure_adj_add_rand
	;	Changes attributes of locations adjacent to the ones you are passing it.
	
# Find the arg indexes of the locations to be acted upon	
set adj_start = 0
set adj_end = 0

}

{+ensure_range_add : +ensure_range_sub : +ensure_range_add_rand
	;	Changes attributes for a range of locations
	
# Find the arg indexes of the locations to be acted upon	
set range_start = 0
set range_end = 0

}




#-------------------------------------------------------------------------
# 	Internal Functions
#-------------------------------------------------------------------------

{+prev_index						; Returns an integer
set	proc2_result = arg[0]
set proc2_result - 1
return proc2_result
}

{+next_index						; Returns an integer
set proc2_result = arg[0]
set proc2_result + 1
return proc2_result
}

{+test_is_string					; Returns true or false
if arg[0] = -1
	return true
else
	return false
endif
}

{+set_max_rand						; Returns an integer
	; Syntax: <integer<integer
	; Validation function for ranges of locations
if arg[0] < arg[1]
	set proc_count = arg[1]
	set proc_count - arg[0]
	set proc_count + 1
endif
if arg[0] > arg[1]					
	set proc_count = arg[0]
	set proc_count - arg[1]
	set proc_count + 1
endif
if arg[0] = arg[1]					
	set proc_count = 1
endif
return proc_count
}

{+test_index_for_condition			; Used during parsing. Returns true if a CONDITION was found
	; Used for Parsing the Parameters
set proc2_index = 0
while proc2_index != @CONDITIONS
	ifstring string_arg[0] = CONDITIONS[proc2_index]
		return true
	endif
	set proc2_index + 1
endwhile

return false
}

{+init_cond_result					; Used before and during the operation to set cond_result to the default value for that operation.
ifstring string_arg[0] = "null"  : string_arg[0] = "loc_has_all"  : string_arg[0] = "adj_has_all" : string_arg[0] = "loc_has_none"  : string_arg[0] = "loc_has_none"
	return true
endif

ifstring string_arg[0] = "loc_has_any"  : string_arg[0] = "adj_has_any" 
	return false
endif
}

{+test_current_for_condition		; Used during operation. Maintains an overall true false for the conditions.
	; Syntax: +test_loc_for_condition<loc_index<cond_type<cond_att<cond_result
	; See the function +init_cond_result listed above for the default value of cond_result
set proc2_target = arg[0]
set uptillnow = arg[3]

# Default
ifstring string_arg[1] = "null"
	return true
endif
if arg[2] != -1					; if cond_att is not a string, then there are no conditional attributes
	return true
endif

# Loc Has All
ifstring string_arg[1] = "loc_has_all"
	ifall arg[0] has string_arg[2] : uptillnow = true
		return true				; Returns true if still true overall
	else
		return false			; If proven false at anypoint, the result overall becomes false
	endif
endif


# Loc Has Any
ifstring string_arg[1] = "loc_has_any"
	if arg[0] has string_arg[2]
		return true
	endif
	ifall arg[0] hasnt string_arg[2] : uptillnow = true
		return true
	endif
endif

# Loc Has None
ifstring string_arg[1] = "loc_has_none"
	ifall arg[0] hasnt string_arg[2] : uptillnow = true
		return true				; Returns true if still true overall
	else
		return false			; If proven false at anypoint, the result overall becomes false
	endif
endif

# Adj Has All
ifstring string_arg[1] = "adj_has_all"		; Default is true
	if uptillnow = false		; If proven false at anypoint, the result overall becomes false
		return false
	endif
	
	set proc2_index = 0
	repeat
		ifall proc2_target(proc2_index) != nowhere : proc2_target(proc2_index) hasnt string_arg[2]
			return false
		endif
		set proc2_index + 1
	until proc2_index = 12
endif

# Adj Has Any
ifall string_arg[1] = "adj_has_any" 	; Default is false
	if uptillnow = true			; If proven true at anypoint, the result overall becomes true
		return true
	endif
	
	set proc2_index = 0
	repeat
		ifall proc2_target(proc2_index) != nowhere : proc2_target(proc2_index) has string_arg[2]
			return true
		endif
		set proc2_index + 1
	until proc2_index = 12
endif

# Adj Had None
ifstring string_arg[1] = "adj_has_none"		; Default is true
	if uptillnow = false		; If proven false at anypoint, the result overall becomes false
		return false
	endif
	
	set proc2_index = 0

	repeat
		ifall proc2_target(proc2_index) != nowhere : proc2_target(proc2_index) has string_arg[2]
			 return false
		endif
		set proc2_index + 1
	until proc2_index = 12
endif
}
