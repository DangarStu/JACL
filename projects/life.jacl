#!../bin/jacl

integer status_window 21

constant MAX_X 24
constant MAX_Y 12
constant TOTAL 288
integer INDEX

integer_array grid TOTAL
integer_array buffer TOTAL

integer left_edge

location universe
  short		name "Conway's Game of Life"

object god 
   player

{+timer
execute "+life_tick"
updatestatus
}

{+intro
set status_window = MAX_Y + 2
set max_rand = 2
write "^^Conway's Game of Life, ported by Stuart Allen^"
write "from AVR version by Luc Small.^^"
#execute "+init_array<grid"
#execute "+init_array<buffer"
}

grammar god >god

{+god
write "Creating random life.^"
execute "+life_init"

# MAKE THE GRID A COPY OF THE BUFFER
set count = 0
repeat
   set grid[count] = buffer[count] 
   set count + 1
until count = TOTAL

set time = false
updatestatus
}

integer looper
integer array_length
string array

{+clear_grid
set looper = 0
repeat
   set grid[looper] = 0
   set buffer[looper] = 0
   set looper + 1
until looper = TOTAL
}

integer neighbours
integer temp_x
integer temp_y

{+alive_neighbours
set neighbours = 0

set temp_x = arg[0]
set temp_x - 1
if temp_x < 0
   set temp_x = MAX_X - 1
endif
set temp_y = arg[1]
set temp_y - 1
if temp_y < 0
   set temp_y = MAX_Y - 1
endif
set pointer = MAX_X * temp_y + temp_x
set neighbours + grid[pointer]

set temp_x = arg[0]
set temp_x - 1
if temp_x < 0
   set temp_x = MAX_X - 1
endif
set pointer = MAX_X * arg[1] + temp_x
set neighbours + grid[pointer]

set temp_x = arg[0]
set temp_x - 1
if temp_x < 0
   set temp_x = MAX_X - 1
endif
set temp_y = arg[1]
set temp_y + 1
if temp_y = MAX_Y
   set temp_y = 0
endif
set pointer = MAX_X * temp_y + temp_x
set neighbours + grid[pointer]

set temp_y = arg[1]
set temp_y + 1
if temp_y = MAX_Y
   set temp_y = 0
endif
set pointer = MAX_X * temp_y + arg[0]
set neighbours + grid[pointer]

set temp_x = arg[0]
set temp_x + 1
if temp_x = MAX_X
   set temp_x = 0
endif
set temp_y = arg[1]
set temp_y + 1
if temp_y = MAX_Y
   set temp_y = 0
endif
set pointer = MAX_X * temp_y + temp_x
set neighbours + grid[pointer]

set temp_x = arg[0]
set temp_x + 1
if temp_x = MAX_X
   set temp_x = 0
endif
set pointer = MAX_X * arg[1] + temp_x
set neighbours + grid[pointer]

set temp_x = arg[0]
set temp_x + 1
if temp_x = MAX_X
   set temp_x = 0
endif
set temp_y = arg[1]
set temp_y - 1
if temp_y < 0
   set temp_y = MAX_Y - 1
endif
set pointer = MAX_X * temp_y + temp_x
set neighbours + grid[pointer]

set temp_y = arg[1]
set temp_y - 1
if temp_y < 0
   set temp_y = MAX_Y - 1
endif
set pointer = MAX_X * temp_y + arg[0]
set neighbours + grid[pointer]

return neighbours
}

integer tick_x
integer tick_y

{+life_tick
set tick_y = 0
repeat
   execute "+tick_row"
   set tick_y + 1
until tick_y = MAX_Y

#NOW COPY THE BUFFER TO THE MAIN ARRAY
set count = 0
repeat
   set grid[count] = buffer[count] 
   set count + 1
until count = TOTAL
}

integer count
integer alive
integer goo

{+tick_row
set tick_x = 0

repeat
   execute "+alive_neighbours<tick_x<tick_y"
   set pointer = MAX_X * tick_y + tick_x
   set alive = grid[pointer]

   ifall alive = true : neighbours < 2
       set buffer[pointer] = 0
   endif
   ifall alive = true : neighbours > 3
       set buffer[pointer] = 0
   endif
   ifall alive = false : neighbours = 3
       set buffer[pointer] = 1
   endif 
   
   set tick_x + 1
until tick_x = MAX_X
}

grammar stats >tick_stats

{+tick_stats
set tick_y = 0
repeat
   execute "+stats_row"
   set tick_y + 1
until tick_y = MAX_Y
}

{+stats_row
set tick_x = 0

repeat
   set pointer = MAX_X * tick_y + tick_x
   set alive = grid[pointer]
   set count = "+alive_neighbours<tick_x<tick_y"
   write "(" tick_x ", " tick_y "): alive = " alive "  count = " count "^"
   
   set tick_x + 1
until tick_x = MAX_X
}

{+life_init
set temp_y = 0
repeat
   execute "+init_row"
   set temp_y + 1
until temp_y = MAX_Y
}

{+init_row
set temp_x = 0
repeat
   set pointer = MAX_X * temp_y + temp_x
   if random = 1
      set buffer[pointer] = 1
   else
      set buffer[pointer] = 0
   endif
   set temp_x + 1
until temp_x = MAX_X
}

{+update_status_window
set left_edge = status_width - MAX_X / 2
#execute "+reverse_window"
#cursor 0 0
style reverse
execute "+display_universe"
style normal
}

integer cursor_y

{+display_universe
set temp_y = 0
repeat
   set cursor_y = temp_y + 1
   cursor left_edge cursor_y
   execute "+display_row"
   write "^"
   set temp_y + 1
until temp_y = MAX_Y
}

integer current_alive

{+display_row
set temp_x = 0
repeat
   set pointer = MAX_X * temp_y + temp_x
   set current_alive = grid[pointer]
   if current_alive = 1
      write "*"
   else
      write " "
   endif
   set temp_x + 1
until temp_x = MAX_X
}

grammar stop >stop

{+stop
write "Timer stopped.^"
timer 0
}

grammar start $integer >start_custom

{+start_custom
write "Timer started with " $integer " ms period.^"
timer $integer
}

grammar start >start

{+start
write "Timer started.^"
timer 500
}

grammar clear >clear

{+clear
write "All life in the universe killed.^"
execute "+clear_grid"
updatestatus
}

grammar step	>tick
grammar wait	>tick
grammar tick	>tick
grammar z 		>tick

{+tick
write "Like sand through the hour glass, so are the pixels "
write "on the screen...^"
execute "+life_tick"
}

grammar neighbours $integer $integer >neighbours
grammar n $integer $integer >neighbours

{+neighbours
set temp_x = $integer[0]
set temp_y = $integer[1]
write "Cell " temp_x ", " temp_y " has "
set count = "+alive_neighbours<temp_x<temp_y"
write count " neighbours.^"
}

grammar t $integer $integer			>toggle
grammar toggle $integer $integer	>toggle

{+toggle
set pointer = MAX_X * $integer[1] + $integer[0]
set alive = grid[pointer]
if alive = true
   write "Killing little dude at " $integer[0] ", " $integer[1] "^"
   set buffer[pointer] = 0
else
   write "Creating little dude at " $integer[0] ", " $integer[1] "^"
   set buffer[pointer] = 1
endif

# MAKE THE GRID A COPY OF THE BUFFER
set count = 0
repeat
   set grid[count] = buffer[count] 
   set count + 1
until count = TOTAL
updatestatus
}

grammar save $string >named_save

{+named_save
savegame INDEX $string
if INDEX = true
   write "Game saved.^"
endif
set time = false
}

grammar restore $string >named_restore

{+named_restore
restoregame INDEX $string
if INDEX = true
   write "Restored saved game.^^"
   ensure here hasnt VISITED
   execute "+display_location"
endif
set time = false
}

string filename

{+load_saved
repeat
   write "Would you like to restore a saved game?^"
   getyesorno TEMP
   if TEMP = true
       restoregame INDEX
       if INDEX = true
          write "Restored saved game.^^"
   		  ensure here hasnt VISITED
          execute "+display_location"
          return true
       endif
   endif
until TEMP = false
return false
}

grammar save >save_game

{+save_game
savegame INDEX
if INDEX = true
   write "Game saved.^"
endif
set time = false
}

grammar restore >restore_game

{+restore_game
restoregame INDEX
if INDEX = true
   write "Restored saved game.^^"
   ensure here hasnt VISITED
   execute "+display_location"
endif
set time = false
}

grammar help >help

{+help
write "Available commands:^"
write "  toggle X Y    --- change the state of a node^"
write "  clear         --- set all nodes to off^"
write "  god           --- have random life magically appear^"
write "  start (time)  --- start the auto timer with specified time^"
write "  stop          --- stop the timer^"
write "  step          --- step through one life cycle^"
write "  save          --- save the current world to disk^"
write "  restore       --- load a world state from disk^"
write "  quit          --- exit program^"
}

string my_get
integer pointer

#include "utils.library"
