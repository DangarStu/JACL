#!../bin/jacl
#ifid:JACL-004
#                                                               THE BLOODY GUNS
# -----------------------------------------------------------------------------
# Copyright (C) Stuart Allen 2008. All rights reserved.
# -----------------------------------------------------------------------------

constant	game_release	1
constant	game_build		8
constant	game_title		"The Bloody Guns"
constant	game_author		"Stuart Allen"
constant	ifid				"JACL-004"

# -----------------------------------------------------------------------------
# CONSTANTS FOR RESOURCES IN BLORB FILE
# -----------------------------------------------------------------------------

constant image_bloodyguns					1
constant image_MelvilleMapInGame			2

constant sound_TheBloodyGuns				3
constant sound_AircraftBattle				4
constant sound_ArtilleryNoExplosion		5
constant sound_ArtilleryWithExplosion	6
constant sound_CanoePaddle					7
constant sound_Explosion					8
constant sound_GunShot						9
constant sound_MetalicClang				10
constant sound_Alarm							11
constant sound_RifleCocking				12
constant sound_FiringRifle					13
constant sound_Flies							14
constant sound_MorseCodeShort				15
constant sound_Thunder						16
constant sound_Rain							17
constant sound_DoorBreaking				18
constant sound_GeneratorFalseStart		19
constant sound_GeneratorStarting			20
constant sound_GeneratorRunning			21
constant sound_RadioStatic					22
constant sound_RopeStrain					23
constant sound_Windlass						24

# -----------------------------------------------------------------------------
# USER ATTRIBUTES
# -----------------------------------------------------------------------------

attribute WOUND
attribute FIRST
attribute TALKED_TO
attribute PRIMED
attribute REPORTED
attribute ASKED

# -----------------------------------------------------------------------------

integer_array fade_out		8
integer_array fade_in		8

integer next_sound			0
integer turn_count			0
integer status_window 		0

constant loop					-1

constant foreground_channel	0
constant background_channel	1
constant eachturn_channel		2
constant timed_channel			3 
constant global_channel			4 

{+intro
set player = kryten
clear
if interpreter = GLK
   image image_bloodyguns
endif
if graphics_supported = false
   style header
   write " ^"
   write game_title
   style normal
   set status_window = 1
endif
updatestatus
write "^Copyright (c) 2008 " game_author "^"
write "Release " game_release " / build " game_build 
write " / JACL verb.library version " library_version "^^"
print:
   This game is a work of fiction. No character in this story is based
   upon the life of any real person, living or dead.^^

   This game would not exist in its present form if not for the generous 
   assistance of Jack Mullholland. Mr Mullholland served as an anti-aircraft 
   gunner in Darwin during World War II and I am extremely grateful to him 
   for taking the time to share his personal experiences and answer my
   endless questions.^^

   Type 'menu' for further information about playing this game.^^
.
if interpreter = GLK
   ifexecute "+load_saved"
      return
   endif
endif
set status_window = 1
set script_stage = during_raid
updatestatus
clear
volume 65 background_channel
if interpreter = GLK
   sound sound_TheBloodyGuns background_channel
else
   sound "/sounds/TheBloodyGuns.ogg" "audio/ogg"
endif
style bold
write "DARWIN, AUSTRALIA^"
write "SUNDAY 22 MARCH 1942^^"
style normal
move ground to here

print:
   The sun has almost risen above the tops of the gum trees at the
   far side of the field and it will soon be too hot to play cricket.
   From your position in the outfield you watch as
   Jenkins begins his loping stride towards the crease to deliver the
   final ball of the over.
   The other fielders, dressed only in khaki shorts, boots and wide brimmed
   hats stand stationary in the oppressive humidity.
   For a moment you think you can hear the faint throbbing drone of
   approaching aircraft, but then nothing. You tilt your head slightly,
   straining to hear then jump at the frantic clanging of the improvised
   air raid bell.^^
   ~Man the bloody guns!~ Sergeant Thompson yells as he drops his
   bat and lets Jenkins' ball run wide.^^
   The players sprint from the field to the anti-aircraft gun mounted 
   behind you at the western edge of the site as the sound of aircraft
   returns louder than before.^^
   The worn leather cricket ball rolls to a stop near your feet.^
.
timer 500
}

grammar menu >menu

{+menu
set MENU_MODE = MENU_EXECUTE
set MENU_MODAL = false
execute "+menu_prompt<+build_menu"
set time = false
}

{+build_menu
write "MAIN MENU:^^"
execute "+menu_clear_options"
execute "+menu_add_option<About<+about"
execute "+menu_add_option<Instructions<+instructions"
execute "+menu_add_option<Restore saved game<+restore_game"
execute "+menu_add_option<Save game in progress<+save_game"
if sound_supported = true
   if sound_enabled = false
      execute "+menu_add_option<Enable sound<+sound_on"
   else
       execute "+menu_add_option<Disable sound<+sound_off"
   endif
endif
if status_window = 0
   execute "+menu_add_option<Turn on status window<+status_on"
else
   execute "+menu_add_option<Turn off status window<+status_off"
endif
execute "+menu_add_option<Save game in progress<+save_action"
execute "+menu_add_option<Exit menu<+exit_menu"
}

{+restore_action
restoregame
set MENU_IN_LOOP = false
}

{+save_action
savegame
set MENU_IN_LOOP = false
}

{+exit_menu
set MENU_IN_LOOP = false
}

{+about
style note
write game_title ^
style normal
write "Copyright (c) 2008 " game_author "^"
write "Release " game_release " / build " game_build 
write " / JACL verb.library version " library_version "^^"
print:
   I would like to thanks the following people for their beta testing: Kevin
   Wearne, George Oliver, Christopher Conley and Christopher Armstrong. You
   all did an excellent job in noticing bugs I never would have.^^
    
   I would also like to thank Paul O'Brian for the encouraging words he wrote 
   in a review over ten years ago that gave me the motivation to try again.^
.
set time = false
}

#SCRIPTING CONSTANTS
integer script_stage	intro

constant intro			0
constant during_raid	1
constant tally_ho		2
constant player_paged	4
constant after_raid		12
constant on_melville	13
constant steve_reported	14
constant storm_started	20
constant rain_started   25
constant after_dark		35
constant getting_tired	45
constant alex_arrives	60
constant day_two		61

location outfield : darwin cricket oval outfield
   has			OUTDOORS KNOWN
   short		name "Darwin Oval (outfield)"
   in			pitch
   east			pitch
   west			assembly_area
   southeast	south_of_oval
   south		south_of_oval

{look
if here has VISITED
   write "You are back in the outfield of Darwin Oval.^"
   return
endif
print:
   You are standing in the outfield on the western side of Darwin Oval.
   The pitch can be seen in the centre of the oval while to the southeast
   lies a cliff edge over which the harbour can be seen. Further to the
   west the barrels of the four anti-aircraft guns can be seen above 
   their surrounding revetments.^
.
}

{eachturn
if total_moves = 1
   write ^
   execute "+jenkins_ushers"
   return
endif
}

{movement
ifall script_stage = during_raid : destination != assembly_area
   set total_moves + 1
   execute "+jenkins_ushers"
   set time = false
   return
endif
return false
}

{+jenkins_ushers
print:
   Jenkins runs past you and grabs your arm, pulling you towards
   the anti-aircraft gun. ~Come on you daft bugger, we've got a war to
   fight!~^^
.
move player to assembly_area 
move gunners to assembly_area
look
execute "eachturn_assembly_area"
execute "+eachturn"
}

object gunners : soldiers gunners players
	has		PLURAL
	short	the "gunners"
	mass		scenery
   
{examine
print:
   The gunners are mostly young men in their early twenties.^
.
}

{follow
if script_stage = during_raid
   if here = gun_emplacement
      write "You are right where you need to be.^"
      set time = false
      return  
   else
      proxy "go to gun emplacement"
      return
   endif
endif
return false
}

object cricket_ball : cricket ball
   short		a "cricket ball"
   long			"There is a cricket ball resting at your feet.^"
   mass			3

{examine
write "The redish brown leather of the cricket ball is well worn with age.^"
}

{attack_with_ironbar
write "You bat the cricket ball a short distance away with " noun2{the} .^
move cricket_ball to here
}

{throw_at_cylinder
print:
   The cricket ball hits the cylinder with a dull clang.^
.
move cricket_ball to here
}

{insert_in_settingtool
return "set_to_integer_cricket_ball"
}

{set_to_integer
if settingtool isnt *held : script_stage > during_raid
   return false
endif
print:
   You fumble crudely, stabbing at the cricket ball with the setting tool. Your 
   senses dulled by an ever-increasing cloud of panic and confusion, you are 
   unable to comprehend why nothing is happening.^^
.
execute "+red_card"
}

{throw_at_jenkins : *throw_at_jenkins_ironbar : *throw_at_jenkins_helmet : *throw_at_jenkins_settingtool
write "Tired of his larrikin behaviour, you throw " noun1{the} " "
print: 
   as hard as you can at Jenkins' head. Infuriated he races over to you and 
   knocks you to the ground with a single blow.
.
execute "+fight"
}

{throw_at_smith : *throw_at_smith_ironbar : *throw_at_smith_helmet : *throw_at_smith_settingtool
print:
   Driven by a sudden need to lash out at someone, you target Smith as 
   an innocent friend. You throw 
.
write noun1{the} " "
print:
   hard into his face then watch as he clutches at his bleeding lip until 
   you are suddenly knocked to the ground from behind.
.
execute "+fight"
}

{throw_at_thompson : *throw_at_thompson_ironbar : *throw_at_thompson_helmet : *throw_at_thompson_settingtool
write "In a wave of unrestrained fury you hurl " noun1{the} " "
print:
   at Sergeant Thompson. The adrenaline-fuelled scuffle the ensues results 
   in you being knocked to the ground.
.
execute "+fight"
}

object jenkins : soldier gunner jenkins
   has			ANIMATE
   short		name "Gunner Jenkins"
   long			function
   mass			heavy
   parent		outfield

{long
if here = gun_emplacement
   if script_stage < after_raid
      write "Gunner Jenkins is standing on the gun by the breach.^"
   else
      write "Gunner Jenkins is here helping to clean the gun.^"
   endif
else
   write "Gunner Jenkins is here, heading towards the gun emplacement.^"
endif
}

{examine
print:
   Tall and thin, Jenkins is the camp's larrikin. His use of humour as a 
   protective barrier has prevented you, or perhaps anyone else, from becoming
   particularly close to him.^
.
}

{talk_to
print:
   You and Jenkins have never had much to say to each other.^
.
set time = false
}

{attack : attack_with_bar : kick
print:
   Tired of his larrikin behaviour, you lash out at Jenkins. You manage to
   land two good blows before being knocked to the ground by a low jab to
   the stomach.
.
execute "+fight"
}

{attack_with_your_rifle
proxy "shoot " noun1{names} " with rifle"
}

{shoot_with_your_rifle_override
if interpreter = GLK
   volume 100 foreground_channel
   sound sound_FiringRifle foreground_channel
else
   sound "/sounds/FiringRifle.ogg" "audio/ogg"
endif
set your_rifle(status) - 1
print:
   You raise your rifle, take aim and fire. The slug enters Jenkins's shoulder
   and sends him staggering backwards.
   Instinctively Sergeant Thompson rushes towards 
   you and tackles you to the ground.
.
execute "+fight"
}

object thompson : soldier sergeant thompson
   has			ANIMATE
   short		name "Sergeant Thompson"
   long			function
   mass			heavy
   parent		outfield

{long
if here = gun_emplacement
   if script_stage < after_raid
      write "Sergeant Thompson is standing on the gun.^"
   else
      write "Sergeant Thompson is here overseeing the cleaning of the gun.^"
   endif
else
   write "Sergeant Thompson is looking up, scanning the sky.^"
endif
}

{examine
print:
   Sergeant Thompson has a heavy brow and square jaw, his dark brown eyes
   constantly surveying the performance of his men.^
.
}

{talk_to
if @+taken_off != 0
   print:
      Sergeant Thompson scowls at you, still bitter about your performance
      under pressure.^
   .
   return
endif
set MENU_MODE = MENU_PROXY
execute "+menu_clear_options"
if @+mission_briefing != 0
   execute "+menu_add_option<Tell Sergeant Thompson about mission<tell thompson about mission"
endif
execute "+menu_add_option<Ask Sergeant Thompson about anti-aircraft gun<ask thompson about anti-aircraft gun"
execute "+menu_add_option<Ask Sergeant Thompson about cylinder<ask thompson about cylinder"
set time = false
}

{ask_about_the_gun
print:
   ~This gun was installed over two years ago now. It only saw its first
   action last month though, and it proved itself again today,~ Sergeant
   Thompson replies with obvious pride.^
.
}

{tell_about_melville_obj : tell_about_mission
if @+mission != 0
   print:
      ~Lieutenant Roberts told me they have been unable to contact the
      observation post on Melville Island. He needs me to head out there
      straight away and investigate what happening so I won't be back for
      a day or two.~^^
      Sergeant Thompson nods.^
   .
endif
print:
   You really don't know much about the observation post at Melville.^
.
set time = false
}

{ask_about_cylinder
if @attack_with_ironbar_cylinder = 0
   print:
      ~What else can I tell you? You know it is our only real alarm system.~^
   .
else
   print:
      ~You should already know that you don't go sounding it as though there
      is a raid when you haven't really seen anything.~^
   .
endif
}

{attack : attack_with_bar : kick
print:
   In a wave of unrestrained fury you lash out at Sergeant Thompson. 
   The adrenaline-fuelled scuffle results in you being knocked to the ground.
.
execute "+fight"
}

{attack_with_your_rifle
proxy "shoot " noun1{names} " with rifle"
}

{shoot_with_your_rifle_override
volume 100 foreground_channel
if interpreter = GLK
   sound sound_FiringRifle foreground_channel
else
   sound "/sounds/FiringRifle.ogg" "audio/ogg"
endif
set your_rifle(status) - 1
print:
   You raise your rifle, take aim and fire. Smith's hand slapping down against
   the top of the barrel as you do this sends the slug deep into a sandbag 
   beside Sergeant Thompson. Instinctively Sergeant Thompson rushes towards 
   you and tackles you to the ground.
.
execute "+fight"
}

location pitch : darwin cricket oval pitch
   has			OUTDOORS KNOWN
   short		name "Darwin Oval (on the pitch)"
   west			outfield
   south		south_of_oval

{look
if here has VISITED
   write "You are back on the cricket pitch.^"
   return
endif
print:
   You are standing on the cricket pitch in the centre of the oval. 
   The cricket pitch is badly damaged at end of a long wet season.^
.
}

{movement
if destination = nowhere
   print: 
      From here you can either head west towards the main camp or south
      towards the harbour.^
   .
   return true
endif
return false
}

location assembly_area: assembly area
   has			OUTDOORS KNOWN
   short		the "assembly area"
   east			outfield
   southeast	gun_emplacement
   north		outside_command_post
   south		hut
   northwest	NO_GO
   northeast	NO_GO
   southwest	NO_GO

{look
if here has VISITED
   write "You return to the assembly area.^"
   return
endif
print:
   This flat, bare-earth area connects the four anti-aircraft guns. To the 
   southeast a gap in the tall earth banks that surround gun number three 
   allows entry to your station. To the south, between guns three and four, 
   is a low hut that serves as primitive sleeping and eating quarters 
   for you and the rest of your crew. To the north, a path through the tall dry 
   grass between guns one and two leads to the Command Post while the oval lies
   to the east. Beside you a 
   crude timber frame suspends an old oxygen cylinder just above a shallow 
   pit in the ground.^
.
}

{eachturn
if total_moves = 1
   print:
      ^Soldiers run past you towards the four gun emplacements as bombs
      begin to fall on ships in the harbour.^
   .
   move gunners to assembly_area
   set fade_out[background_channel] = 5
endif
if total_moves = 2
   write ^
   execute "+helmet_on"
endif
}

{movement
if script_stage = during_raid
   execute "+helmet_on"
   set total_moves + 1
   set time = false
   return true
else
   if destination = NO_GO
      print:
         There is no need to enter the other crew's gun emplacements.^
      .
      return true
   endif
endif
return false
}

{+helmet_on
if hat has WORN 
   print:
      Someone grabs your hat from behind and replaces it roughly with
      an ill-fitting helmet 
   .
else
   print:
      From behind you, someone places an ill-fitting helmet on your head 
   .
endif
print:
   as you are barrelled through the entrance to gun number three.^^
.
move player to gun_emplacement 
move aircraft to gun_emplacement
move hat to limbo
move helmet to player
look
print:
   Crew members scramble to their stations around the tall anti-aircraft
   gun mounted here; the drone of the approaching single-engine Japanese 
   ~Val~ dive bombers sharpens to a distinctive strum.^^
   Your heart pounds as the routine of countless drills races through
   your mind: get a shell from Smith, set the fuse on it to the appropriate 
   time for the height of the aircraft then pass it to Jenkins for loading.^^
   You wait nervously for Smith as he disappears into the armoury to fetch 
   a shell.^
.
move gunners to gun_emplacement
move jenkins to gun_emplacement
move thompson to gun_emplacement
}

object pit : shallow pit
   short		a "shallow pit"
   has			NOT_IMPORTANT
   static

object ironbar : iron bar rod
   short		an "iron bar"
   long			function
   mass			5

{long
if ironbar hasnt TOUCHED
   print:
      An iron bar used to strike the cylinder in order to raise the alarm is 
      resting on the ground by the frame.^
   .
else
   write "An iron bar rests on the ground here.^"
endif
}

{throw_at_cylinder
print:
   The iron bar hits the cylinder with a sharp clang.^
.
if interpreter = GLK
   sound sound_MetalicClang foreground_channel
else
   sound "/sounds/MetalicClang.ogg" "audio/ogg"
endif
}

{examine
print:
   The iron bar is about one foot long and covered in rust.^
.
}

{clean
print:
   You've got more important things to be doing.^
.
set time = false
}

object chain : chain
   has			NOT_IMPORTANT
   short		a "chain"
   static

object frame : crude wooden frame
   short		a "crude wooden frame"
   static
     
{examine
print:
   The timber frame is made from old scraps of hardwood.^
.
}

object cylinder : old oxygen cylinder
   short		an "old oxygen cylinder"
   static

{examine
print:
   The base of the oxygen cylinder has been cut off to make a crude
   alarm bell. It is suspended from the wooden frame by a short length of
   chain welded to its valve.^
.
}

{look_in
print:
   The cylinder is completely empty.^
.
}

{play
if ironbar is *held
   proxy "ring cylinder with iron bar"
   return
endif
print:
   The cylinder makes a dull ring as you slap it with your hand.^
.
}

grammar play $integer >play_sound

{+play_sound
volume $integer foreground_channel
sound sound_Alarm foreground_channel
}

{attack_with_ironbar : play_with_ironbar
volume 100 foreground_channel
if interpreter = GLK
   sound sound_Alarm foreground_channel
else
   sound "/sounds/Alarm.ogg" "audio/ogg"
endif
print:
   As the loud ringing echoes around the camp confused voices can be heard in 
   the gun emplacements. Up-turned faces scan the sky, for any sign of a
   second wave of attacking bombers.^^
   Within seconds Sergeant Witheridge runs down from the north and stands
   before you. ~What have you seen, Davis?~^^
   ~Well, nothing,~ you reply feebly. ~I just, I...~^^
   Sergeant Witheridge grabs the iron bar from you. ~What's wrong with you
   Davis?~^
.
move witheridge to assembly_area
move ironbar to witheridge
# FAKE TIME PASSING SO EACHTURN DOESN'T RUN
set time = false
set total_moves + 1
}

{shoot_with_your_rifle_override
volume 100 foreground_channel
if interpreter = GLK
   sound sound_FiringRifle	foreground_channel
else
   sound "/sounds/FiringRifle.ogg" "audio/ogg"
endif
set your_rifle(status) - 1
write "You take aim and fire a shot at the cylinder.^"
set next_sound = sound_MetalicClang
}

object banks : tall earth banks bank
   short		the "tall earth banks"
   has			PLURAL
   static

{climb_up
print:
   There is a perfectly serviceable entrance to the southeast.^
.
endif
}

{examine
print:
   The banks are designed to deflect the shockwaves of
   an exploding bomb over the gun crew inside the emplacement.
.
}

location gun_emplacement : vickers 3.7 anti-aircraft bloody guns gun emplacement
   has			OUTDOORS KNOWN
   short		the "gun emplacement"
   northwest	assembly_area
   out			assembly_area
   in			armoury
   south		armoury

{look
if here has VISITED
   write "You return to the gum emplacement.^"
   return
endif
if @ = 1
   return
endif
print:
   The floor of the gun emplacement is a circular concrete pad almost ten 
   metres in diameter. Sandbag revetments, back filled with earth on 
   the outside, form the perimeter of the pit. The 3.7 inch Vickers 
   anti-aircraft gun stands bolted to the concrete, its barrel 
   protruding through fragments of camouflage netting suspended high 
   above your head. The only exit from the emplacement is a gap in the
   revetments to the northwest, while a small room set into the south wall 
   serves as an armoury.^
.
}

{after_look
if script_stage = after_raid
   print:
      ^The other members of your crew are busily cleaning the anti-aircraft
      gun after its first action in some time. Oily rags are wrapped around
      long-handled brushes then pushed up the length of the barrel from the
      loading tray.^
   .
endif
}

{movement
if compass = up
   proxy "climb on gun"
   return
endif
if destination = nowhere
   print:
      From here you can either go south into the armoury or northwest to
      the assembly area.^
   .
   return
endif
if script_stage > during_raid
   return false
endif
if compass = south : compass = in
   if shell(parent) = smith
      if settingtool(parent) = armoury
         print:
            As you head for the armoury Smith emerges and forces 
            a shell for the anti-aircraft gun and the fuse setting tool
            into your hands. ~You just stay at your post Davis, I
            can do my job.~^
         .
         move settingtool to player
         ensure smith has FIRST
      else
         print:
            As you head for the armoury Smith emerges and forces a new
            shell into your hands. ~You just stay at your post Davis, I
            can do my job.~^
         .
      endif
      move smith to gun_emplacement
      move shell to player
	  return
   endif
   ifall second_shell(parent) = smith : smith has DONE
      print:
		 You try to push your way past Smith who drops the shell he is 
         carrying and grabs you, pinning your arms to your side. ~What are 
         you doing, Davis?~ he yells in your ear, confusion and concern in
         his voice. Fumbling desperately he relieves you of the fuse setting 
         tool and recovers the shell from the ground as another bomb explodes 
         nearby.^^
      .
      execute "+red_card"
      return
   endif
   ifall second_shell(parent) = smith : smith hasnt DONE
      print:
         ~Where are you going, Davis?~ Smith shouts over the deafening
		 explosions as he steps in your path. ~I've already got another
         shell for you!~^
      .
      ensure smith has DONE
      return
   endif
   print:
      ~Just wait here, Davis, I'll fetch the shells for you.^
   . 
   ensure smith has DONE
   return
endif
if compass = northwest : compass = out
   print:
      You walk away from your station. For what reason only you know,
      but you just can't stay. You hear Sergeant Thompson's voice 
      screaming at you from over your shoulder, but faintly as a 
      whisper. The world now somehow silenced in your mind, even the
      exploding bombs muted and distant.^^
      You arive at the assembly area and sit. Your mind slowly focuses on the
      sensation of a hand on your shoulder and you look up to see Sergeant
      Thompson's face, red with frustration and rage. ~Come on lad,~ he says 
      with a contrasting tone of compassion.^^
   . 
   execute "+taken_off"
   return true
endif
return false
}

integer TURNS_WAITING 0

{eachturn
ifall script_stage > during_raid
   return
endif
if random > 80
   execute "+bomb_explodes"
endif
ifall smith(parent) = armoury : smith has FIRST
   write "^Smith returns from the armoury with another shell and "
   move smith to gun_emplacement
   if shell(parent) = limbo
      write "hands it to you.^"
      move shell to player
   else
      write "stands beside you.^"
      set TURNS_WAITING = 1
   endif
endif
ifall smith(parent) = armoury : smith hasnt FIRST
   print:
      ^Smith stumbles then regains his footing as he emerges from the 
      armoury at speed carrying a shell for the anti-aircraft gun and 
      your fuse setting tool. In two more strides he crosses the
      emplacement and hands them both to you.^
   .
   move settingtool to player
   set settingtool(counter) = 1
   move shell to player
   move smith to gun_emplacement
   ensure smith has FIRST
   return
endif
if smith(parent) = gun_emplacement
   if second_shell(parent) != smith
      write "^Smith ducks back into the armoury.^"      
      move smith to armoury
      move second_shell to smith
   else
      if shell(parent) = limbo
         write "^Smith hands you a new shell.^"      
         move second_shell to limbo
         move shell to player
      endif
   endif
endif
if settingtool(counter) > 0
   set settingtool(counter) + 1
   if settingtool(counter) = 10
      print:
         ^~Come on Davis!~ Jenkins yells down to you. ~Set the fuse on that
         shell and get it up to me fast!~^
      .
      set settingtool(counter) = -1
   endif
endif
}

{hint
set time = false
if script_stage != during_raid
   write "Your work here is done.^"
   return
endif
if $integer = 1
   print:
      It is your job to set the fuse on the shells before they are fired.
      Smith will fetch the shells from the armoury, you set the fuse then
      pass the shell up to jenkins.^
   .
   return
endif
if $integer = 2
   print:
      You set the fuses to a time in tenths of a second, ranging between 
      20 and 100. The lower the number, the shorter the fuse. The shorter
      the fuse, the lower the shell will be when it explodes. To set the fuse
      use a command such as: ^
   .
   execute "+command<set fuse to 30"
   return
endif
if $integer = 3
   write "To shoot down the approaching bomber, wait until Smith has "
   write "handed you a shell then:^"
   execute "+command<set fuse to 42"
   execute "+command<give shell to jenkins"
   return
endif
write "There is no level " $integer " hint for this location.^"
}

{+bomb_explodes
set INDEX = @
set INDEX % 3
if INDEX = 0
   print:
      ^A nearby blast sends dust and debris over the revetments into the
      gun emplacement.^
   . 
endif
if INDEX = 1
   print:
      ^Shockwaves and dissonance as a bomb explodes nearby.^
   . 
endif
if INDEX = 2
   print:
      ^Another bomb falls too close for comfort just beyond the camp 
      perimeter.^
   . 
endif
}

object armoury_obj : armoury
   short		the "armoury"
   static

{examine : look_in
print:
   The armoury is simply an alcove in the revetments filled with
   crates of anti-aircraft shells.^
.
}

{enter
proxy "go south"
}

object harbour : ship ships darwin harbour sea water ocean
   short		the "ships in Darwin Harbour"
   has			PLURAL OUT_OF_REACH
   static

{examine
print:
   The SS Zealandia, the ship you arrived from Sydney on; the MV Neptuna and 
   SS British Motorist all lie sunk in the Harbour from the earlier raids. 
   A small fleet of operational transport ships lie at anchor near the remains
   of the wharf.^
.
}

object aircraft : aircraft airplanes plane planes kittyhawk kittyhawks fighter fighters val dive bombers bomber sky
   short		the "aircraft"
   has			PLURAL OUT_OF_REACH
   static

{+default_look_up : *examine_aircraft
if here hasnt OUTDOORS
   write "You just see the ceiling.^"
   return
endif
if script_stage = during_raid
   print:
      You see the Japanese bombers approaching Darwin Harbour from the
      northeast at between fifteen and twenty thousand feet. Depending on
	  air pressure, humidity and wind speed, experience tells you that you
      will need a fuse setting somewhere between forty and fifty tenths of
      a second.^
   .
   return
endif
ifall script_stage > tally_ho : script_stage < after_raid
   print:
      The American P40 Kittyhawk fighters circle the dive bombers out
      over the waters of Darwin Harbour. Short bursts of machine gun fire 
      cut through the mixture of discordant engines.^
   .
   return
endif
ifall script_stage > storm_started : script_stage < rain_started
   print:
      Dark clouds are rolling in rapidly as the sun reddens towards
      the horizon.^
   .
   return
endif
ifall script_stage > rain_started : script_stage < day_two
   print:
      Fat drops of rain strike your face as you peer up into the violent
      storm above.^
   .
   return
endif
write "Just blue sky.^"
}

{shoot_with_your_rifle_override
volume 100 foreground_channel
if interpreter = GLK
   sound sound_FiringRifle foreground_channel
else
   sound "/sounds/FiringRifle.ogg" "audio/ogg"
endif
set your_rifle(status) - 1
write "Predictably, you miss.^"
if here = gun_emplacement
   if @ = 1
      print;
         ^~You get'em, Davis,~ Jenkins says with a laugh. ~I don't know why we
         need the Yanks with Davis here fighting the Japs single handed.~^
      .
   endif
endif
if here = command_post
   if @ = 1
      print;
         ^~Don't waste your amunition, Davis,~ Lieutenant Roberts says.^
      .
   endif
endif
}

{+fight
print:
   You push yourself up with your arms only to be kicked to the ground again by
   a heavy boot. From out of view, arms reach beneath your own and drag you 
   unceremoniously towards the command post.^^
   You sit bruised and dejected on the ground as the duty guard watches over 
   you. Lieutenant Roberts arrives and begins to discuss with Sergeant 
   Witheridge exactly how you will be spending the rest of the war.^^
.
execute "+game_over"
}

grammar full score >full_score
grammar score full >full_score

{+full_score
execute "+score"
if score = 0
   return
endif
write "^You have earned:^" 
if the_gun has SCORED
   write "   10% for shooting down the dive bomber.^"
endif
if generator has SCORED
   write "   10% for getting the generator running again.^"
endif
if chapel has SCORED
   write "   10% for getting the chapel door open.^"
endif
if body has SCORED
   write "   10% for finding the body and informing command.^"
endif
if steve has SCORED
   write "   5% for identifying Steve's body and informing command.^"
endif
if alex has SCORED
   write "   5% for informing command about Alex.^"
endif
if pouch has SCORED
   write "   5% for discovering the pearls.^"
endif
}

{+red_card
print:
   Sergeant Thompson jumps down from his station, grabs you and spins you 
   around to face the gap in the revetments. ~You picked a fine time to fall
   to pieces, Davis,~ he growls as he marches you out to the assembly
   area. ~Montgomery you act as relieving firer, Smith you fetch and 
   set.~^^
.
execute "+taken_off"
}

{+taken_off
print:
   Shocked and confused, you walk with Sergeant Thompson towards the command 
   post.^^
.
move thompson to outside_command_post
move kryten to outside_command_post
look
print:
   ^~Wait here,~ Thompson says as he heads into the command post.^^
.
if script_stage = during_raid
   print:
      You watch as Sergeant Thompson shouts into Lieutenant Robert's ear 
      over the sound of the firing anti-aircraft guns. 
   .
else
   print:
      You watch silently as Sergeant Thompson and Lieutenant Roberts talk.  
   .
endif
print:
   A brief nod from Lieutenant Roberts and Sergeant Thompson returns to where 
   you are standing. ~Don't move from here. Lieutenant Roberts will deal with 
   you when this raid is over.~ With that, Sergeant Thompson heads back to his 
   gun crew.^^
.
move thompson to gun_emplacement
if script_stage = during_raid
   print:
      From the loud hailer in the command post comes the call of ~Tally-ho~ --
      American P40 Kittyhawk fighters have engaged the remaining bombers and 
      all gun crews are to cease fire.^^
   .
   set script_stage = tally_ho
   volume 25 timed_channel
   sound sound_AircraftBattle timed_channel
endif
print:
   Sergeant Witheridge, the Gun Position Officer's Assistant, emerges from 
   the command post and signals with obvious contempt for you to follow him 
   back inside.^^
.
move kryten to command_post
look
print:
   ^~We aren't all cut out for the stresses of combat Davis, I can accept 
   that,~ Lieutenant Roberts says as he walks towards you. ~Drills with wooden 
   shells against an imaginary enemy just don't prepare a man for the reality 
   of the fight.~^^
   You are relieved that he seems more angry with the system than you.^^
   ~I can't risk putting you back at your post. You know we are short staffed 
   since the army pulled inland, though, so I've got another task for you. We
   set up an observation post on Melville Island soon after the first raids
   in February to make sure we had more warning next time and today that 
   system has let me down, too.~^^
   Lieutenant Roberts pauses to allow you to absorb your share of his 
   disappointment.^
.
}

{+mission_briefing
print:
  ~We haven't been able to raise Melville on the radio since, so I need you
  to head out there and find out what is going on. I've got three men
  stationed out there.~ The Lieutenant turns to Sergeant Witheridge.
  ~Ah,~ Witheridge drones as he scans the watch bill, ~here: Dan Foster, Alex
  Green and Steven McPherson.~^^
  ~Three men Davis. They may have been bombed themselves or they may just be 
  having radio trouble. Either way I need you to find out and report back to 
  me. I've sent someone to ask Miki to take you out to the island. 
.
ifall your_rifle is *held : kit_bag is *held
   print:
      I see you've already got your gear so just head down to the beach south
      of the oval and he'll meet you there.~^
   .
   return
endif
if your_rifle is *held : kit_bag is *held
   write "Go grab the rest of "
else
   write "Go grab "
endif
print:
   your gear then head down to the beach south of the oval. Miki will
   meet you there.~^
.
}

object the_gun : vickers 3.7 anti-aircraft gun
   short		an "anti-aircraft gun"

{examine
print:
   The long barrel of the gun protrudes high above the tops of the revetments,
   a monument to human defiance and desperation. Shells are placed into the 
   loading tray near the rear of the gun while two metal wheels at the front 
   are used to adjust the gun's altitude and azimuth. The gun is firmly 
   bolted to the concrete floor of the emplacement.^
.
if script_stage = during_raid
   print:
      ^Jenkins is standing up on the gun's mount near the loading tray, ready 
      to receive shells from you while Sergeant Thompson is standing beside
	  him, his hand resting eagerly on the firing lever. Two more gunners are
      stationed by the guidance wheels.^ 
   .
endif
}

{enter : climb_up
if script_stage = during_raid
   print:
      A stern glare from Sergeant Thompson sends you back to your assigned
      post at ground level.^
   .
   return
endif
if script_stage = tally_ho
   print:
      Your view of the air battle above would be no better from atop the
      anti-aircraft gun.^
   .
   return
endif
if script_stage = after_raid
   print:
      The other members of your crew are too busy cleaning the gun to have
      you go climbing all over it.^
   .
   return
endif
}

{fire : shoot : use
print:
   You just need to set the fuse on the shells and pass them to Jenkins, then
   Sergeant Thompson will fire the gun.^
.
}

object wheels : metal wheel wheels
   has			PLURAL
   short		the "metal wheels"
   static
 
{examine
print:
   The two metal guidance wheels are attached to the front of the
   anti-aircraft gun. Beside each wheel is a pair of dials. The first
   shows positioning information send from the command post, the second
   shows the current position of the gun. During operation the gunners
   stationed at the wheels keep the two dials aligned.^
.
}

{turn : use
print:
   The metal guidance wheels are operated by gunners four and five. Your role
   is to set the fuse on the shells before passing them to Jenkins for 
   loading.^
.
}

object firing_lever : firing lever
   short		a "firing lever"
   has			OUT_OF_REACH
   static

{examine
print:
   Just a bare metal handle. Sergeant Thompson pulls the firing lever once
   Jenkins has finished loading the shell.^
.
}

object revetments : revetment revetments sandbag sandbags
   short		the "sandbag revetments"
   static

{examine
print:
   The sandbag revetments are approximately five feet tall.^
.
}

{climb_up
print:
   The camouflage netting blocks the tops of the revetments.^
.
}

object netting : fragments of camouflage netting
   short		some "fragments of camouflage netting"
   has			PLURAL OUT_OF_REACH
   static

{examine
print:
   The fragments of camouflage netting stretch across the top of the
   revetments leaving the minimum gap required to aim and fire the gun.^
.
}

object helmet : steel helmet
   short		a "steel helmet"
   long			"There is a wide-brimmed steel helmet on the ground.^"
   has			WEARABLE WORN CONTAINER
   parent		limbo
   mass			5
   capacity		5

{examine
print:
   The helmet is made from steel with a hessian cover to prevent reflections.
   Attached to the inside the helmet is a cruciform rubber skull pad and an 
   elasticated web chinstrap.^
.
}

{insert_under_drips_override
print:
   The final few drips of diesel are hardly worth catching.^
.
}

{insert_under_fuel_tank_override
if cut(status) = false
   proxy "put helmet under drips"
else
   print:
      The cut in the fuel tank is now blocked well enough.^
   .
endif
}

object chinstrap : elasticated web chinstrap
   short		a "chinstrap"
   has			NOT_IMPORTANT
   parent		helmet
   static

object skullpad : cruciform rubber skull pad
   short        a "skull pad"
   has			NOT_IMPORTANT
   parent       helmet
   static

location armoury : armoury
   short		the "armoury"
   has			KNOWN
   out			gun_emplacement
   north		gun_emplacement

{look
if here has VISITED
   write "You head back into the armoury.^"
   return
endif
print:
	Dim, humid and filled with dust. Crates of neatly stacked shells
    line the sand-bag walls.^
.
}

object shell_crates : crates stacked shells
   short		the "crates of neatly stacked shells"
   has			PLURAL
   static

{take
print:
   You don't need to take the shells.^
.
}

{examine
print:
   The timber crates are stacked floor to ceiling, each containing a dozen
   anti-aircraft shells.^
.
}

object settingtool : fuse setting tool short wooden handle steel ring setter
   short		a "setting tool"
   long			"A setting tool rests nearby.^"
   mass			4

{examine
print:
   The fuse setting tool is simply a steel ring attached to a short wooden 
   handle. The steel ring has two small protrusions that lock into the setting
   ring of a shell when the tool is placed over its nose. Once in position, 
   the tool is then rotated to set the fuse to the desired duration.^
.
}

grammar set *present >set

{+set
if +important<noun1 = true
   return true
endif
if +darkness = true
   return true
endif
if +reach<noun1 = true
   return true
endif
override
write "You can't set " noun1{the} " to anything.^"
set time = false
}

grammar put **held over *present	>insert_on
grammar insert **held over *present	>insert_on

{insert_on_shell : insert_in_shell : insert_in_fuse : insert_on_fuse : use
if shell isnt *present
   write "You need to also have an anti-aircraft shell to use the tool on.^"
   set time = false
   return
endif
write "How many tenths of a second would you like to set the fuse to?^"
asknumber INDEX 20 100
write "^"
proxy "set fuse to " INDEX
}

{insert_on_cricket_ball
execute "set_to_integer_cricket_ball"
}

object smith : soldier gunner smith
   has			ANIMATE
   short		name "Gunner Smith"
   long			function
   mass			heavy

{long
if script_stage = after_raid
   write "Smith is here helping to clean the gun.^"
   return
endif
if second_shell(parent) = smith
   write "Smith is standing beside you holding an anti-aircraft shell.^"
else
   write "Smith is standing beside you.^"
endif
}

{examine
print:
   Only seventeen years of age, Smith is the youngest gunner based here
   and also your closest friend.^
.
}

{talk_to
if @+mission_briefing = 0
   print:
      You and Smith take a moment to reassure each other that you are
      indeed still alive.^
   .
else
   if smith hasnt TALKED_TO
      print:
         ~I've got to head out to Melville,~ you tell Smith. ~Roberts says they
         can't contact the guys out there and he wants me to find out what is
         going on.~^^
         ~Is anyone going with you?~ Smith asks. hopeful of the chance to join
         you.^^
         ~Miki is taking me out there, but Roberts says he can't spare any more
         of the crew.^
      .
      ensure smith has TALKED_TO
   else
      print:
         You take the opportunity to say a few last words to Smith before you
         leave.^ 
      .
   endif
endif
}

{ask_for_second_shell
print:
   Smith shakes his head. ~You can only fire one at a time! I'll hold this 
   one while you set the other one and get it fired.~^
.
}

{attack : attack_with_bar : kick
print:
   Driven by a sudden need to lash out at someone, you target Smith as 
   an innocent friend. You manage to land two good blows before being 
   knocked to the ground from behind.
.
execute "+fight"
}

{attack_with_your_rifle
proxy "shoot " noun1{names} " with rifle"
}

{shoot_with_your_rifle_override
volume 100 foreground_channel
if interpreter = GLK
   sound sound_FiringRifle foreground_channel
else
   sound "/sounds/FiringRifle.ogg" "audio/ogg"
endif
set your_rifle(status) - 1
print:
   You raise your rifle, take aim and fire. The slug enters Smith's shoulder
   and sends him staggering backwards.
   Instinctively Sergeant Thompson rushes towards 
   you and tackles you to the ground.
.
execute "+fight"
}

object second_shell : smith's brass anti-aircraft shell
   short		name "Smith's anti-aircraft shell"
   long			"On the ground there is a brass anti-aircraft shell^"
   mass			10
   parent		limbo

object shell_casing : hot brass anti-aircraft shell casing
   short		a "hot shell casing"
   has			NOT_IMPORTANT
   parent		limbo

object shell : brass anti-aircraft shell
   short		a "brass anti-aircraft shell"
   long			"On the ground there is a brass anti-aircraft shell^"
   mass			15
   parent		smith

{examine
print:
   The shell is about one foot long and made from brass. Around the 
   nose cone of the shell is a series of rings that form a complex
   powder fuse.^
.
}

{set_to_integer : set_to_integer_with_settingtool
execute "set_to_integer_fuse"
}

{give_to_smith : throw_at_smith
write "~Don't give it back to me"
if fuse(set_to) = 0
   write ", set the fuse then give it to Jenkins for loading.~^"
else
   write ", Jenkins does the loading!~^"
endif
}

{give_to_thompson : throw_at_thompson
write "~What are you doing, Davis! "
if fuse(set_to) = 0
   write "Set the fuse then give "
else
   write "You give "
endif
write " the shell to Jenkins for loading,~ Sergeant Thompson bellows.^"
}

{give_to_jenkins : give_to_gunners : throw_at_jenkins
if fuse(set_to) = 0
   if shell(fired_not_set) = 2
      print:
         ~Davis!~ Sergeant Thompson bellows as you go to pass the shell 
         to Jenkins. ~I was watching you that time and that shell is 
         still disarmed, no wonder they aren't going off!~
      . 
      set shell(fired_not_set) + 1
      return
   endif
   if shell(fired_not_set) = 3
      print:
         ~What did I just say to you!~^^
      .
      execute "+red_card"
      return
   endif
   set shell(fired_not_set) + 1
endif
if shell(total_shots) = 0
   print:
      You heave the shell up to Jenkins who places it into the loading tray
      then rams it home into the chamber. Without pause, Sergeant Thompson 
      pulls the firing lever and the gun responds with a deafening crack. 
      The barrel recoils, slowed by the oil-filled dampers, and the hot 
      shell casing is ejected onto the ground along with a plume of acrid 
      smoke.^^
   .
   move shell_casing to gun_emplacement
endif
if shell(total_shots) = 1
   print:
      You pass the shell up to Jenkins who loads it into the gun. Sergeant 
      Thompson pulls the firing lever and the gun responds with a deafening 
      crack. The barrel recoils, and the hot shell casing is ejected along 
      with another plume of hot smoke that fills the humid air of the gun 
      emplacement.^^
   .
endif
if shell(total_shots) > 1
   print:
      Jenkins takes the shell from you then loads it for Sergeant Thompson 
      to fire.^^
   .
endif
execute +did_it_hit?
set fuse(set_to) = 0
move shell to limbo
}

{+did_it_hit?
set shell(total_shots) + 1
if fuse(set_to) != 0
   if interpreter = GLK
      volume 100 foreground_channel
      sound sound_ArtilleryWithExplosion foreground_channel 
   else
      sound "/sounds/ArtilleryWithExplosion.ogg" "audio/ogg"
   endif
   if shell(total_shots) = 1
      print:
         The shell shrieks through the air, climbing through a steep 
         parabolic arc towards the closest of the approaching
         dive bombers. 
      .
   endif
   print:
      As the fuse expires the shell detonates into a cloud of white smoke 
   .
else
   if interpreter = GLK
      volume 100 foreground_channel
      sound sound_ArtilleryNoExplosion foreground_channel 
   else
      sound "/sounds/ArtilleryNoExplosion.ogg" "audio/ogg"
   endif
   print:
      The shell shrieks through the air, climbing through a steep parabolic
      arc until it disappears out of view. The gun crew waits for the shell
      to explode, but with the shell fuse not set it eventually becomes 
		obvious that it must have hit the sea by now.^
   .
   return
endif
if fuse(set_to) = 42
   print:
      that envelopes the aircraft. After what seems like minutes, the dive 
      bomber emerges from the cloud in an ever tightening spiral. You watch
      with mixed emotions as the fuselage plunges into the warm waters of
      the Timor Sea.^^
      The rest of the gun crew erupts into a loud cheer as you scan the 
      skies for any sign of parachutes.^^
      From the loud hailer in the command post comes the call of ~Tally-ho~ --
      American P40 Kittyhawk fighters have engaged the bombers and all 
      gun crews are to cease fire.^
   .
   set script_stage = tally_ho
   move smith to gun_emplacement
   move second_shell to limbo
   ensure the_gun has SCORED
   points 10
else
   if fuse(set_to) < 32
      write "significantly below"
   endif
   ifall fuse(set_to) > 31 : fuse(set_to) < 38
      write "well below"
   endif
   ifall fuse(set_to) > 37 : fuse(set_to) < 40
      write "below"
   endif
   ifall fuse(set_to) > 39 : fuse(set_to) < 42
      write "just below"
   endif
   ifall fuse(set_to) > 42 : fuse(set_to) < 44
      write "just above"
   endif
   ifall fuse(set_to) > 43 : fuse(set_to) < 46
      write "above"
   endif
   ifall fuse(set_to) > 45 : fuse(set_to) < 52
      write "well above"
   endif
   if fuse(set_to) > 51
      write "significantly above"
   endif
   write " the aircraft.^"
endif
set fuse(set_to) = 0
}

constant set_to			3
constant fired_not_set	4
constant total_shots		5

object fuse : fuse on shell ring rings holes felt gunpowder
   short			the "powder fuse"
   parent		shell

{examine
if @ = 1
   style note
   print:
      ~There are two types of fuse on shells, mechanical fuses and powder
      fuses. Powder fuses don't store very well in the tropics - we 
      had powder fuses.~
   .
   style normal
   write " -- Jack Mullholand^^"
endif
print:
   The fuse is composed of a series of three rings, each filled with gunpowder
   and separated by felt.
   The lugs on the fuse setting tool are designed to engage with small 
   holes in the top ring in order to rotate it to the required time. Markings 
   around the fuse ring indicate the time in tenths of a second, starting at 
   20 and finishing at 100. The fuse on this shell is currently set to
.
if fuse(set_to) = 0
   write "the disarmed position.^"
else
   write fuse(set_to) ".^"
endif
}

{set_to_integer : set_to_integer_with_settingtool
if settingtool isnt *held
   write "You will need the setting tool to set the fuse on the shell.^"
   return
endif   
if $integer < 20 : $integer > 100
   print:
      The fuse can only be set to a number between 20 and 100, being the
      amount of time in tenths of a second until the shell explodes after 
      being fired.^
   .
   return
endif
# DISABLE JENKINS YELLING INSTRUCTIONS AT THE PLAYER NOW THEY HAVE DONE
# IT ONCE ALREADY
set settingtool(counter) = -1
write "You slide the setting tool down over the nose of the shell until its "
write "lugs engage with the holes in the fuse ring. Rotating the tool "
write "you set the fuse to " $integer " tenths of a second.^"
set fuse(set_to) = $integer
if fuse hasnt FIRST
   print:
      ^~Right'oh Davis, pass the shell up to me now,~ Jenkins calls down from 
      his post at the loading tray.^
   .
endif
ensure fuse has FIRST
}

{set : *set_shell : use
if settingtool isnt *held
   write "You will need the setting tool to set the fuse on the shell.^"
   set time = false
   return
endif
write "How many tenths of a second would you like to set the fuse to?^"
asknumber INDEX 20 100
write "^"
proxy "set fuse to " INDEX
}

location outside_command_post : outside command post
   has			OUTDOORS KNOWN
   short		name "outside the command post"
   north		command_post
   in			command_post
   south		assembly_area

{enter
proxy "in"
}

{look
if here has VISITED
   write "You are back outside the command post.^"
   return
endif
print:
   Tall dry grass surrounds the low sand-bag walls of the command post. A 
   well-worn track through the grass leads south to the assembly area.^
.
}

location command_post : command post
   has			OUTDOORS KNOWN
   short		the "command post"
   south		outside_command_post
   out			outside_command_post

{look
if here has VISITED
   write "You head back into the command post.^"
   return
endif
print:
   The command post is nothing more than a roofless area formed by low 
   sand-bag walls. Of prominence here is the Kerrison Predictor, an 
   electro-mechanical computer atop a timber tripod that sends positioning 
   information to the four guns.^
.
}

{after_look
ifall @ = 1 : @+taken_off = 0
   set turn_count = total_moves
   set turn_count - turn_paged_at
   print:
      ^~Davis,~ Lieutenant Roberts says as you enter.
   .
   if turn_count < 5
      print:
         ~Thank you for getting here so quickly.~
      .
   endif
   ifall turn_count > 4 : turn_count < 16
      print:
         ~Thank you for coming.~
      .
   endif
   if turn_count > 15
      print:
         ~I thought you'd never get here.~
      .
   endif
   print:
      He takes a step closer to you and for the first time you notice the
      lines on his face. ~Soon after the first raids 
      in February we set up an observation post on 
      Melville Island to provide an early warning of aircraft approaching 
      from the north. As you have just seen for yourself, we didn't get that
      warning.^
   .
endif
}

{movement
if destination = nowhere
   write "South is the only way out from here.^"
   return true
endif
if @+mission_briefing = 0
   write "A glare as you turn to leave forces you to stay.^"
   execute "eachturn_command_post"
   return
endif
if @+map_given = 0
   execute "+map_given"
endif
return false
}

{eachturn
if @+mission_briefing = 0
   write ^
   execute "+mission_briefing"
endif
}

{+map_given
print:
   ~Before you go Davis, there's one last thing,~ Lieutenant Roberts says as
   he wipes the sweat from his brow.
   ~In order to prevent enemy boats from landing in Snake Bay where the
   observation post is, the Navy laid a series of concrete mooring blocks,
   each twenty feet across.~^^
   Lieutenant Roberts reaches into the top pocket of his shirt and hands you
   a folded piece of paper.^^
   ~This map shows the precise location of these blocks. They're too deep to
   affect Miki's canoe, but there is a motor launch based on Melville and if
   you bring that back you'll need to know where they are. 
   The tidal flow is restricted in Snake Bay and with a six foot draft
   the launch draws too much to clear them, even on a high tide.~^^
   ~Thank you, sir,~ you reply at attention.^^
   ~Oh, and Davis, be careful. I've got a bad feeling about this one, but with
   the rest of the army having pulled further inland I just can't spare any 
   men to go with you.~^^
   ~I will, sir.~^^
   You exchange salutes with Lieutenant Roberts.^^
.
move map to player
}

object map : map of snake bay paper
   short	a "map of Snake Bay"
   long		"The map of Snake Bay is on the ground.^"
   mass		2
   parent   roberts

{examine
if cut(status) = this
   write "You can't read the map with it folded and jammed into the cut.^"
   set time = false
   return
endif
if interpreter = CGI
   image "/images/MelvilleMap.png" "inline"
endif
print:
   The map shows Snake Bay at Melville Island and the mooring blocks laid by 
   the Navy as an obstruction to enemy vessels. The radio tower for the 
   observation post is located on the eastern headland of the Bay's entrance,
   reaching 76 metres above mean high water springs. Bearings 
   from the radio tower are marked on the map to aid with navigation. Most of 
   the shoreline of the north side of Melville Island is steep rocky cliffs. 
   The wharf at the beach inside the bay is the only suitable landing site.^^
.
if interpreter = GLK
   image image_MelvilleMapInGame
endif
style note
print:
   NOTE: A full-sized version of this map is included with The Bloody Guns for
   the purpose of navigation during the game. If you are unable to use this map
   type
.
style input 
write "read map"
style note
write " for a text description of a path through the bay.^"
style normal
}

{read
style note
print:
   NOTE: Reading this map provides different information to examining it.^^
.
style normal 
print:
   You approach Snake Bay heading east. Continue east until you see the radio
   tower at a bearing of 120 degrees then turn to starboard until heading on
   a course of 200 degrees. Once the radio tower is at a bearing of 20 degrees,
   turn to port travelling on a course of 100 degrees. When the tower is at a
   bearing of 330 degrees, turn hard to starboard until heading on a course of
   250 degrees. This will take you to the wharf.^
.
}

{insert_in_cut
if cut(status) = 0
   print:
      You roll fold the map into a tide wad and jam it into the cut 
      to seal the tank as much as possible.^
   .
   set cut(status) = this
   set this(parent) = cut
else
   write cut(status){The} " " cut(status){is} " already in the cut.^"
   set time = false
endif
}

{give_to_roberts : give_to_witheridge
print:
   ~You're going to need the map, not me.~^
.
}

{give_to_miki : show_to_miki
print:
   ~It's okay balanda, I go to Snake Bay plenty times. I know the way.~^
.
}

object predictor : kerrison predictor computer tripod
   short		the "Kerrison Predictor"
   static

{examine
print:
   The Kerrison Predictor is an electro-mechanical computer atop a timber 
   tripod. It is used to calculate the position of approaching high-level
   bombers when all four guns are fired as a salvo. It is operated by 
   highly-trained staff in the command post with gunners at each of the
   emplacements turning the positioning wheels to keep the guns aligned with
   the indicated angle.^
.
}

object roberts : lieutenant roberts
   short		name "Lieutenant Roberts"
   long			"Lieutenant Roberts is standing by the Kerrison Predictor.^"
   has			ANIMATE
   mass			heavy

{examine
print:
   Lieutenant Roberts is tall and slightly built with short grey hair. For a
   career military man you have always found him surprisingly sensitive and
   introspective.^
.
}

{attack : attack_with_bar : kick
print:
   You barely manage to land one blow on Lieutenant Roberts before Sergeant
   Witheridge has his side arm pointed at your head. Soldiers restrain you as 
   Lieutenant Robert's stares at you with outrage and disbelief.^^
   Freedom of action is not a luxury you enjoy until long after the war is 
   over.^^
.
execute "+game_over"
}

{attack_with_your_rifle
proxy "shoot " noun1{names} " with rifle"
}

{shoot_with_your_rifle_override
volume 100 foreground_channel
if interpreter = GLK
   sound sound_FiringRifle foreground_channel
else
   sound "/sounds/FiringRifle.ogg" "audio/ogg"
endif
set your_rifle(status) - 1
print:
   You raise your rifle and fire, shattering Lieutenant Robert's skull. 
   An odd silence fills the room for the few seconds before his fate 
   becomes your own.^^
.
execute "+game_over"
}

{talk_to
set MENU_MODE = MENU_PROXY
execute "+menu_clear_options"
execute "+menu_add_option<Ask Lieutenant Roberts about Melville Island<ask roberts about melville"
execute "+menu_add_option<Ask Lieutenant Roberts about Miki <ask roberts about miki"
if @+map_given != 0
   execute "+menu_add_option<Ask Lieutenant Roberts about the canoe<ask roberts about canoe"
	execute "+menu_add_option<Ask Lieutenant Roberts about the map<ask roberts about map"
endif
set time = false
}

{ask_about_melville_obj
print:
   ~Is there anything else you can tell me about Melville, sir?~^^
   ~The observation post is setup inside an old house at Snake Bay.
   I've got three men stationed up there: Johnson, Holt and Coyle. They are
   all good men, and although the post has only be operational for a few 
   weeks, everything seemed to be running smoothly until now.~^
.
}

{ask_about_miki
print:
   ~What do you think of Miki, Sir?~^^
   ~He's a good lad, very loyal. I don't mind if he stays with you on 
   Melville but don't forget he isn't involved in any official capacity, he's
   only volunteered to get you there and back.~^
.
}

{ask_about_canoe
print:
   ~A canoe, sir?~^^
   ~You'll be fine, Davis. Miki makes the trip out there all the time.~^
.
}

{ask_about_map
print:
   ~Just keep it safe. I don't want it falling into enemy hands.~^
.
}

object witheridge : sergeant witheridge
   short		name "Sergeant Witheridge"
   long			function
   has			ANIMATE
   mass			heavy

{examine
print:
   Sergeant Witheridge has the look of a man under constant stress.^
.
}

{long
if here = command_post
   write "Sergeant Witheridge waits patiently by Lieutenant Roberts.^"
else
   write "Sergeant Witheridge is standing here.^"
endif
}

{ask_for_bar_override
if @ = 1
   print:
      ~I think I'll hang on to it for now.~
   .
   return
endif
if @ = 1
   print:
      ~Don't push your luck, Davis.~^
   .
   return
endif
print:
   Sergeant Witheridge ignores you.^
.
}

{attack : attack_with_bar : kick
if here != command_post
   print:
      You barely manage to land one blow before Sergeant Witheridge knocks
      you to the ground.
   .
   execute "+fight"
else 
   print:
      You barely manage to land one blow before 
      Lieutenant Roberts has his side arm pointed at your head. Soldiers 
      restrain you as Lieutenant Robert's stares at you with outrage and 
      disbelief.^^
      Freedom of action is not a luxury you enjoy until long after the war is 
      over.^^
   .
endif
execute "+game_over"
}

{attack_with_your_rifle
proxy "shoot " noun1{names} " with rifle"
}

{shoot_with_your_rifle_override
volume 100 foreground_channel
if interpreter = GLK
   sound sound_FiringRifle foreground_channel
else
   sound "/sounds/FiringRifle.ogg" "audio/ogg"
endif
set your_rifle(status) - 1
if here = command_post
   print:
      You raise your rifle and fire, shattering Sergeant Witheridge's skull. 
      An odd silence fills the room for the few seconds before his fate 
      becomes your own.^^
   .
else
   print:
      You raise your rifle and fire, shattering Sergeant Witheridge's skull. 
      Voices can be heard in the distance then footsteps in every direction.
      You wheel around in a panic as many soldiers take aim and return your
      fire.^^
   .
endif
execute "+game_over"
}

location hut : hut sleeping quarters
   short		the "hut"
   has			KNOWN
   north		assembly_area
   out			assembly_area

{look
if here has VISITED
   write "You step back into the hut.^"
   return
endif
print:
   Mosquito netting lines the inside of this hut that serves as your sleeping 
   and eating quarters. Five-foot high sandbag walls force you to stoop 
   below the baking-hot corrugated iron roof. There are ten bunks against the
   far wall, one for each of the members of your crew.^
.
}

{movement
if destination = nowhere
   print:
      The only way out from here is back north.^
   .
   return
endif
return false
}

object bunk : my bunk
   short			name "your bunk"
   static

{look_under
if kit_bag hasnt TOUCHED
   write "Your kit bag is under your bunk.^"
   return
endif
write "You don't find anything special.^"
}

{lie_on : enter
print:
   You would never risk being caught napping on duty.^
.
}

object other_bunks: other bunk bunks
   short		the "other bunks"
   has			PLURAL NOT_IMPORTANT
   static

object mosquito_netting : mosquito netting
   short		the "mosquito netting"
   static

{examine
print:
   The mosquito netting protects you from the swarms of insects that inhabit
   the area at this time of year.^
.
}

{break : shoot_with_your_rifle : attack_with_your_rifle
print:
   Putting holes in the mosquito netting won't win you any favours with
   anyone.^
.
}

object kit_bag : kit bag gear
   short		name "your kit bag"
   long			function
   has			CONTAINER CLOSABLE CLOSED
   mass			10
   capacity		10

{long
if kit_bag hasnt TOUCHED
   print:
      Your kit bag is under your bunk.^
   .
else
   print:
      Your kit bag is resting nearby.^
   .
endif
}

object shirt : khaki shirt
   short		your "khaki shirt"
   long			"Your khaki shirt is lying on the ground.^"
   has			WEARABLE
   parent		kit_bag
   mass			4

{break
if +worn<shirt = true
   return
endif
ifall leftsleeve(parent) != shirt : rightsleeve(parent) != shirt
   write "There is no need to further destroy your shirt.^"
   set time = false
   return
endif
if leftsleeve(parent) = shirt
   write "You tear the left sleeve of your shirt.^"
   set leftsleeve(parent) = player
   set leftsleeve(mass) = 1
   return
else
   write "You tear the right sleeve of your shirt.^"
   set rightsleeve(parent) = player
   set rightsleeve(mass) = 1
   return
endif
}

{examine
ifall leftsleeve(parent) != shirt : rightsleeve(parent) != shirt
   print:
      With both sleeves torn off it is now more of a vest.^
   .
   return
endif
if leftsleeve(parent) != shirt
   print:
      You have torn the left sleeve off your shirt.^
   .
   return
endif
if rightsleeve(parent) != shirt
   print:
      You have torn the right sleeve off your shirt.^
   .
   return
endif
print:
   Your plain, army issue shirt hasn't had much use in the oppressive heat
   and humidity of far-north Australia.^
.
}

{wear_override
ensure shirt has WORN
if leftsleeve(parent) != shirt : rightsleeve(parent) != shirt
   print:
      You slip the remainder of your shirt on.^
   .
   return
endif
write "You slip your shirt on.^"
}

{insert_in_cut_override
if +worn<shirt = true
   return
endif
if cut(status) = 0
   print:
      You jam part of your shirt into the cut to seal the tank 
      as much as possible.^
   .
   set cut(status) = this
   set this(parent) = cut
else
   write cut(status){The} " " cut(status){is} " already in the cut.^"
   set time = false
endif
}

{take : *take_leftsleeve : *take_rightsleeve
ifall cut(status) = this : diesel(parent) = fuel_tank
   write "If you remove " this{the} " the diesel will start to run out.^"
   set time = false
   return
endif
if cut(status) = this
   write "You pull " this{the} " back out of the cut in the tank.^"
   set cut(status) = false
   set this(parent) = player
   return true
endif
return false
}

grammar tear **present off *present	>tear_off
grammar rip **present off *present	>tear_off
grammar pull **present off *present	>tear_off

{+tear_off
proxy "tear " noun1{names} " from " noun2{names}
}

object rightsleeve : right shirt sleeve
   plural		sleeves
   short		a "right shirt sleeve"
   mass			scenery
   parent		shirt

{insert_in_cut : *insert_in_cut_leftsleeve
if cut(status) = 0
   write "You jam " this{the} " into the cut to seal the tank as much as "
   write "possible.^"
   set cut(status) = this
   set this(parent) = cut
else
   write cut(status){The} " " cut(status){is} " already in the cut.^"
   set time = false
endif
}

{break : *break_leftsleeve
if this(parent) = shirt
   if +worn<shirt = true
      return
   endif
   write "You grab your shirt and tear " this{the} " off.^"
   set this(parent) = player
   set this(mass) = 1
else
   write "There is no need to tear " this{the} " any further.^"
   set time = false
endif
}

object leftsleeve : left shirt sleeve
   plural		sleeves
   short		a "left shirt sleeve"
   mass			1
   mass			scenery
   parent		shirt

grammar shoot *present with *held >shoot_with

{+shoot_with
if +important<noun1 = true
   return true
endif
if +darkness = true
   return true
endif
ifall noun1 has ANIMATE : noun1 has DEAD
   write  noun1{The} " " noun1{is} " already dead.^"
   set time = false
   return true
endif
if noun2 != your_rifle 
   write "You are can't shoot anything with " noun2{the} .^
   set time = false
   return true
endif
if your_rifle(status) = 0
   write "There are no rounds remaining in the rifle.^"
   return
endif
override
write "There is no need to shoot " noun1{the} .^
set time = false
}

grammar fire *present	>fire

{+fire
if +important<noun1 = true
   return true
endif
if +darkness = true
   return true
endif
override
write "You can't fire " noun1{the} ".^"
set time = false
}

grammar shoot *present >shoot

{+shoot
if your_rifle isnt *held
   write "You are not carrying your rifle.^"
   set time = false
   return true
endif
if noun1 = your_rifle
   proxy "fire rifle"
   return
endif
proxy "shoot " noun1{names} " with rifle"
}

object your_rifle : lee enfield rifle gun
   short		name "your rifle"
   long			function
   status		10
   mass			20

{long
if your_rifle hasnt TOUCHED
   print:
      Your rifle is leaning against the wall beside your bunk.^
   .
else
   print:
      Your rifle is resting nearby.^
   .
endif
}

{examine
print:
   You were issued this rifle during induction training back in
   Sydney over a year ago. It is a bolt-action, magazine-fed repeating rifle 
   with an English walnut stock. The magazine holds common .303 cartridges
.
if your_rifle(status) = 0
   write "and is currently empty.^"
   return
endif
if your_rifle(status) = 1
   write "and currently has only a single round remaining.^"
   return
endif
write "and currently has " your_rifle(status) " rounds remaining.^"
}

{fire
if your_rifle isnt *held
   write "You will need to be holding the rifle to fire it.^"
   set time = false
   return
endif
if your_rifle(status) = 0
   write "There are no rounds remaining in the rifle.^"
   return
endif
volume 100 foreground_channel
if interpreter = GLK
   sound sound_FiringRifle	foreground_channel
else
   sound "/sounds/FiringRifle.ogg" "audio/ogg"
endif
if here has OUTDOORS
   write "You fire the rifle into the air.^"
else
   write "You fire the rifle into the ceiling.^"
endif
set your_rifle(status) - 1
if here = command_post
   print:
      ^Lieutenant Roberts glares at you.^
   .
endif
if here = gun_emplacement
   print:
      ^Sergeant Thompsons looks at you then shakes his head.^
   .
endif
}

{+empty
if your_rifle(status) = 0
   write "There are no rounds remaining in the rifle.^"
   return
endif
print:
   It is best to keep your rifle loaded.^
.
}

{point_at_miki
if @ = 1
   print:
      Miki suddenly stops moving and looks at you with an expression of
      fear and confusion.^
   .
   return
endif
print:
   ~Why you pointing that thing at me, balanda?~ Miki asks as his concern
   turns to anger.^
.
}

{point_at_alex
if @ = 1
   print:
      Alex jumps to one side then fires a shot towards you, narrowly missing
      you.^
      ||~Woah!~ you call out to Alex, ~I didn't mean anything by...~^
      Your attempts to reassure Alex are cut short the shell from his
      second shot tearing through the left side of your throat. You lie
      gasping on the ground as Alex stands over, the smell of gunpowder 
      filling your final breaths.^
      ||~I knew you were with them,~ Alex says shakily.^^
      execute "+game_over"
   .
   return
endif
print:
   ~Why you pointing that thing at me, balanda?~ Miki asks as his concern
   turns to anger.^
.
}

location south_of_oval : south side of oval
   short		the "south side of the oval"
   has			OUTDOORS KNOWN
   north		pitch
   in			pitch
   northwest	outfield
   south		beach
   down			beach
 
{look
if here has VISITED
   write "You have returned to the south side of the oval.^"
   return
endif
print:
   Weathered coastal scrub covers the ground between the oval to the north and 
   the hill side to the south. A narrow but well-worn trail works its way down 
   to the beach below.^ 
.
}

{movement
if destination = nowhere
   print:
      From here you can either go north to the cricket pitch, northwest
      towards to the camp or down to the beach.^
   .
   return
endif
return false
}

location beach : beach 
   short		the "beach"
   has			OUTDOORS KNOWN
   north		south_of_oval
   up			south_of_oval

{look
if here has VISITED
   write "You are back on the beach.^"
   return
endif
print:
   Deep trenches dug above the high tide line scar the beach where sand has 
   been excavated for bagging. A steep path leads north from here through the 
   mangroves back up to the oval.^
.
}

{swim_only
proxy "enter water"
}

{movement
if compass = in
   proxy "enter canoe"
   return true
endif
return false
}

{eachturn
ifall @+mission_briefing != 0 : canoe(parent) = limbo
   print:
      ^As you look out to sea you spot Miki, one of the local Aboriginal men,
      paddling around the point in his dugout canoe. Each powerful stroke of
      his paddle ends with a barely perceptible twist of the blade to keep
      his course. As he runs the canoe up onto the beach he places his 
      paddle flat across the gunwhales and a broad smile comes to his face.^^
      ~Come on balanda, army man saying we going to Melville,~ Miki 
      shouts as he waves you to enter the canoe.^
   .
   move canoe to here
   move miki to here
endif
set INDEX = @
set INDEX % 4
if INDEX = 2
   write "^Miki looks up and down the beach restlessly.^"
endif
if INDEX = 0
   write "^~You coming, balanda?~ Miki shouts.^"
endif
}

{hint
set time = false
write "All you have to do is:^"
execute "+command<get in the canoe"
}

object trenches : deep trenches scar scars
   short		the "trenches"
   has			PLURAL CONTAINER
   capacity		50
   static

{examine
print:
   The trenches are the product of many back-breaking months of filling sand
   bags.^
.
}

{enter
print:
   There is no need to go climbing into the trenches.^ 
.
}

object mangroves : mangrove mangroves tree trees
   short		the "mangroves"
   has			PLURAL
   static

{examine
print:
   The thick leaves of the mangroves shade the path up to the oval.^
.
}

object sand : sand
   short		the "sand"
   has			NOT_IMPORTANT
   static

{dig_in
if here = snake_bay_east
   print:
      The rudder is burried by too much sand to uncover.^
   .
   set time = false
   return
endif
write "You find nothing of interest.^"
}

object sea_water : salty ocean sea water 
   short		the "sea water"
   has		    NOT_IMPORTANT
   static

{enter
if here = wharf : here = snake_bay : here = snake_bay_east
   print:
      The memory of the pain is still too strong. You haven't entered the 
      water since you stood on a sting ray over two months ago, and aren't 
      sure you ever will again.^
   .
   return
endif
if here = beach
   print:
      You don't have to swim, Miki will take you in the canoe.^
   .
endif
}

{drink
print:
   The water is far to salty to drink.^
.
}

object miki : miki aboriginal man
   short		name "Miki"
   has			ANIMATE POSSESSIVE
   long			function
   mass			heavy
   parent		limbo

{long
if script_stage = after_raid
   print:
      Miki is here sitting in his canoe, waiting for you to get in.^
   .
   return
endif
if script_stage = on_melville
   if here has OUTDOORS
      write "Miki is standing beside you with a broad smile.^"
   else
      write "Miki is here looking about nervously.^"
   endif
   return
endif
}

{examine
if script_stage = after_raid
   print:
      Miki, one of the local Aboriginal men, is sitting in his canoe
      waiting for you to get in.^
   .
else
   if script_stage < on_melville
      print:
         Miki is one of the local Aboriginal men. Dressed only in a pair of 
         plain shorts, his dark brown skin shines in the baking sun.
      .
   else
      if here has OUTDOORS
         write "Miki is looking about keenly. "
      else
         print:
            Miki seems ill at ease, gazing nervously at the walls and ceiling.
         .
      endif
   endif
   write "He is carrying a long spear and his woomera.^"
endif
}

{talk_to
set MENU_MODE = MENU_PROXY
execute "+menu_clear_options"
execute "+menu_add_option<Ask Miki about his canoe<ask miki about canoe"
execute "+menu_add_option<Ask Miki about Melville Island<ask miki about melville island"
if churchyard has VISITED
   execute "+menu_add_option<Ask Miki about funerary poles<ask miki about funerary poles"
endif

set time = false
}

{ask_about_tutini
if here = churchyard
   write "~What are these poles Miki?~^^"
else
   write "~What are those poles in the churchyard Miki?~^^"
endif
print:
   ~After one of our people is dying they are honoured in Pukumani. During
   the Pukumani many tutini are placed, helping the spirit find its way
   across the sea.~^
.
}

{ask_about_melville_obj
print:
   ~Will it take us long to get out to Melville Island?~ you ask Miki.^^
   ~We'll go quickly. I go to fish at Melville many times. Currents
   running strong between here and there. Miki find the currents that
   take us there fast.~^
.
}

{ask_about_canoe
print:
   ~Did you make the canoe, Miki?~ you ask with interest.^^
   ~I helped. Many people from my tribe working on this canoe, but they've
   gone bush now so Miki keep it.~^
.
}

{shoot_with_your_rifle_override
write "You could always just type "
style input
write "quit"
style normal
write " and save me the effort of explaining the error of your ways.^"
}

{+say_worried
print:
   ^~What are we doing here balana? This place making me worry.~^^
   ~Don't worry, Miki. We'll just take a look around and see if we can find
   the others. I don't see any sign of bombing here so maybe their radio just
   died.~^
.
}

{+things_to_say
print:
   You turn to Miki and smile. ~If we do end up staying a while, Miki, 
   we won't go hungry!~^
.
}

object spear : spear
   short		a "long wooden spear"
   mass			5
   parent		miki

object woomera : woomera
   short		a "woomera"
   mass			2
   parent		miki

location in_canoe : inside dugout canoe
   short		name "inside the canoe"
   has			OUTDOORS
   out			wharf
   up			wharf

{look
if here has VISITED
   write "You jump back into the canoe.^"
   return
endif
print:
   The hull of this dugout canoe is made from the hollowed-out trunk of a 
   paperbark tree and over twenty feet long. The smell of fish is strong here.\
.
ifall script_stage >= rain_started : script_stage < day_two
   write " The canoe is rocking back and forth in the wind and rain.^"
else
   write "^"
endif
}

{examine
execute "examine_canoe"
}

{smell
write "A strong smell of fish fills the air.^"
}

object miki_paddle : paddle miki's mikis
   short		name "Miki's paddle"
   mass			5

{examine
print:
   The paddle is carved from a single piece of wood with an intricate pattern
   engraved into the blade.^
.
}

object canoe : dugout canoe
   short		a "dugout canoe"
   parent		limbo

{untie
proxy "untie painter"
}

{shoot_with_your_rifle_override
if script_stage < on_melville	
   print:
      You will never get to Melville Island if you shoot a hole in the canoe.^
   .
else
   if miki is *present
      print:
         Miki slaps the barrel of your rifle down. ~You crazy, balanda. You shoot
         my canoe and we never be going home.~^
      .
      return
    else
      print:
          You take aim shoot a hole through the bottom of the canoe. Slowly the
          hull fills with water until it sinks by the stern, snapping the thin
          painter and disappearing out of sight.^ 
      .
      volume 100 foreground_channel
      if interpreter = GLK
         sound sound_FiringRifle foreground_channel
      else
         sound "/sounds/FiringRifle.ogg" "audio/ogg"
      endif
      set your_rifle(status) - 1
      move canoe to limbo
      set wharf(in) = nowhere
      set wharf(down) = nowhere
    endif
endif
}

{examine
print:
   The dugout canoe is made from the hollowed-out trunk of a paperbark tree.
   The hull is over twenty feet long, strong and stable.^
.
}
   
{enter : move
if here = in_canoe
   write "You are already in the canoe.^"
   set time = false
   return
endif
if here = beach
   execute "+going_to_melville"
   return
endif
if here = wharf
   proxy "in"
   return
endif
}

{+going_to_melville
volume 100 foreground_channel
sound sound_CanoePaddle foreground_channel loop
print:
   You place your hands on the bow of the canoe and push it back into
   deeper water. Once you are wading up to your knees you jump in and Miki 
   hands you a paddle.^^
   ~You sitting up the front, balanda. Just keep paddling and I'll get us 
   where we're going.~
   Levering his paddle against the side of the canoe he spins
   the bow out to sea and you begin to head across Darwin Harbour.^^
   To your left the normally choppy waters are cut flat by the smothering 
   violence of burning diesel. Staying up wind of the flaming ships, Miki 
   expertly picks the currents that have you out in open waters faster than 
   you imagined possible. 
.
if helmet hasnt WORN
   print:
      The sun shines mercilessly on your face
   .
else
   print:
      Your helmet shades your face from the merciless sun
   .
endif
print:
   as you fall into a hypnotic rhythm of paddling. With time you begin to 
   relax the swing of your hips, no longer fighting against the gentle rolling
   of the hull in fear of imminent capsize.
   ^^~You getting better balanda,~ Miki says from behind you. ~I be 
   teaching you to dance yet.~^^
   By early afternoon you have rounded the northwest corner of Melville and 
   arrived at the mouth of Snake Bay. The narrow entrance to the bay squeezes
   the falling tide into a fast-flowing current and you paddle hard to
   cross to the inside.^
.
more
stop foreground_channel
clear
write ^^
if shirt has WORN
   print:
      You pull your shirt, now soaked with sweat, away from your skin to cool
      yourself
   .
else
   print:
      Sweat pours down your back, trapped against your skin by the hot,
      humid air.
   .
endif
print:
   You look up as you arch your stiff, sore back.
   Tall sandstone cliffs topped by thick vegetation enclose the bay to your 
   left and right, a small beach lies straight ahead. Seemingly unfatigued, 
   Miki guides the canoe towards a timber wharf in the centre of the beach
   while you rub your aching arms with blistered hands.^^
   Once the canoe is securely tied up you climb up onto the wharf. Thick 
   hardwood beams, greyed by the sun and salt water, stretch south towards
   the inner shore of Snake Bay.^
.
set script_stage = on_melville
move player to wharf
move miki to wharf
move canoe to wharf
set time = true
}

object painter : bow line painter rope
   short		a "painter"
   parent		canoe
   static

{untie
if here = wharf
   if miki is *present
      print:
         ~We going to be wanting that canoe to go home, don't let it go
         without us.~^
      .
      return
   else
      print:
         You untie the painter from around the pile and the canoe begins to 
         slowly drift away from the wharf.^
      .
   endif
   move canoe to limbo
   set wharf(in) = nowhere
   set wharf(down) = nowhere
   return
endif
if miki is *present
   print
      ~I want to go home also, balanda, but we we've got job to be doing
      first,~ Miki says half-heartedly.^
   .
else
   print:
      Drifting around the bay without Miki isn't advisable.^
   .
endif
set time = false
}

{examine
print:
   The painter is made from a length of thin manilla rope.^
.
}

location wharf : timber wharf
   short		a "timber wharf"
   has			OUTDOORS
   south		snake_bay
   in			in_canoe
   down			in_canoe

{look
if here has VISITED
   write "You are back on the wharf.^"
   return
endif
print:
   You are standing at the end of long wharf made from thick hardwood beams, 
.
ifall script_stage >= rain_started : script_stage < day_two
   write " dark and wet in the evening storm. "
else
   write "greyed by the sun and salt water. "
endif
if canoe is *here
   ifall script_stage >= rain_started : script_stage < day_two
      print:
         The canoe floats nearby, jerking against the painter that sercures
         it to a pile as the wind begins to whip the water of the bay into
         white caps.
      .
   else
      print:
         The canoe floats nearby, tugging gently on the painter that secures 
         it to a pile.
      .
   endif
endif
print:
   To the south the wharf meets the inner shore of Snake Bay.^
.
ensure snake_bay has KNOWN
}

{movement
if destination = nowhere
   if here(in) = nowhere
      print:
         South along the wharf to Snake Bay is the only way from here.^
      .
   else
      print:
         You can either get into the canoe or go south along the wharf.^
      .
   endif
   return
endif
return false
}

{swim_only
proxy "enter water"
}

{eachturn
move sea_water to here
}

object pile : timber wharf pile piles
   short		a "wharf pile"
   static

{examine
print:
   The piles are made from thick Turpentine poles driven deep into the 
   muddy floor of the bay.
.
if canoe is *here
   print:
      The canoe floats nearby, its painter tied around the end pile.
   .
endif
write ^
}

location snake_bay : snake bay inner shore
   short		the "shore of Snake Bay"
   has			OUTDOORS
   north		wharf
   east			snake_bay_east

{look
if here has VISITED
   print:
      You are standing on the shore of Snake Bay again, directly opposite
      the wharf.^
   .
   return
endif
ifall script_stage >= rain_started : script_stage < day_two
   print:
      This steep beach arcs around to the east and west, though your can not
      see far through the dark rain. A timber wharf stretches out 
      north into the darkness while to the south thick trees crowd
      the shoreline blocking access further inland.^
   .
else
   print:
      This steep beach arcs around to the east and west. A timber 
      wharf stretches out north into the bay while to the south thick trees 
      crowd the shoreline blocking access further inland. Not far to the east
      you can see a boat washed up on the beach.^
   .
endif
ensure snake_bay_east has KNOWN
}

{movement
if compass = west
   print: 
      There is only empty beach to west.^
   .
   return
endif
if compass = east
   print:
      You begin to trudge along the beach, your legs fatigued by the soft
      sand.^^
   .
   return false
endif
if compass = south
   print: 
      The lower halves of the trees to the south are tangled with a diverse
      mesh of tropical plants making passage impossible.^
   .
   return
endif
if destination = nowhere
   print:
      From here you can either go north out onto the wharf or east along the
      beach.^
   .
   return
endif
return false
}

{dig
proxy "dig in sand"
}

{swim_only
proxy "enter water"
}

{eachturn
move sea_water to here
move sand to here
}

object boat_distant : distant boat timber motor launch
   short		a "timber motor launch"
   has			OUT_OF_REACH
   static
   
{examine
if snake_bay_east hasnt KNOWN
   print:
      It's hard to be sure from this distance, but the boat appears to have 
      been wrecked recently.^
   .
else
   print:
      It's hard to determine anything new about the boat from this distance.^
   .
endif
}

location snake_bay_east : snake bay inner shore east
   short		the "eastern shore of Snake Bay"
   has			OUTDOORS
   west			snake_bay
   in			afterdeck
   north		afterdeck
   south		beach_trail
   up			beach_trail

{look
if here has VISITED
   write "You are standing at the eastern end of Snake Bay.^"
   return
endif
ifall script_stage >= rain_started : script_stage < day_two
   print:
      A timber launch is washed up on the beach here, resting sadly on its 
      chine, keel to the crashing waves. A narrow trail winds south through
      the trees then up along the jagged silouette of a rocky hill.^
   .
else
   print:
      A timber launch is washed up on the beach here, resting sadly on its 
      chine, keel to the lapping waves. A narrow trail winds south through
      the trees up to higher ground.^
   .
endif
ensure beach_trail has KNOWN
ensure afterdeck has KNOWN
}

{movement
if destination = nowhere
   print:
      From here you can either go west, back along the beach, into the boat 
      or south up the narrow trail.^
   . 
   return
endif
if destination = afterdeck
   print:
      You put hands on the sponson and lift yourself up onto
      the afterdeck of the launch.^^
   .
endif
return false
}

{swim_only
proxy "enter water"
}

{eachturn
move sea_water to here
move sand to here
}

{dig
proxy "dig in sand"
}

object boat : boat timber motor launch board
   short		a "timber motor launch"
   
{enter : climb_up
proxy "in"
}

{examine
print:
   The stem of the timber launch is cracked and several planks sprung as a 
   result. From the lack of growth above the waterline you can see the 
   boat has not been sunk here long. With the boat washed high and dry on the
   beach you can easily climb on board.^
.
}

{pull : turn : move
print:
   The timber launch is too heavy for even ten men to move.^
.
}

{send_message_override
write "You tap out a short message on the morse key: "
write "~MOTOR LAUNCH FOUND WRECKED IN SNAKE BAY. OUT.~^"
execute "+message_sent"
}

object stem : stem bow
   short		the "launch's stem"
   static

{examine
print:
   The stem of the launch is a thick piece of hardwood than runs from the
   top of the bow down to the forward end of the keel. It is staved in below
   the water line with several adjacent planks sprung as a result.^ 
.
}

object sponson : sponson
   short		the "launch's sponson"
   static

{examine
print:
   The launch's sponsor is edged with metal and runs around the whole boat
   just above the waterline.^
.
}

grammar f			>east
grammar forward		>east
grammar go forward	>east

grammar a			>west
grammar aftward		>west
grammar go aftward	>west
grammar aft			>west
grammar go aft		>west

location afterdeck : afterdeck deck decking
   short		the "afterdeck"
   has			OUTDOORS
   east			wheelhouse
   in			wheelhouse
   south		snake_bay_east
   out			snake_bay_east
   down			snake_bay_east

{look
if here has VISITED
   write "You have returned to the afterdeck.^"
   return
endif
print:
   The afterdeck of the timber motor launch is all but filled with 
.
if engine_cover has CLOSED
   write "a tall engine cover. "
else
   write "the large engine protruding below the open cover. "
endif
print:
   Space between it and the gunwhales allows passage forward
   into the wheelhouse.^
.
ensure wheelhouse has KNOWN
}

{movement
if destination = wheelhouse
   print:
      You hang onto the gunwhale as you move forward, steadying yourself on
   .
   ifall script_stage >= rain_started : script_stage < day_two
      write "the slippery wet deck.^^"
   else
      write "the heeled deck.^^"
   endif
endif
if destination = nowhere
   print:
      From here you can either go east to the wheelhouse or south back out to
      the bay.^
   .
   return
endif
return false
}

object engine_cover : boat engine motor bilge battery batteries cover
   short		an "engine cover"
   has			CLOSABLE CLOSED

{open_override
if miki isnt *present
   print:
      You strain to lift the heavy cover revealing the engine below.^
   .
else
   print:
      As you strain to open the heavy cover Miki rushes to your side and
      helps you lift it. Beneath the cover you can see the launch's engine.^
   .
endif
ensure engine_cover hasnt CLOSED
move boat_engine to here
move salt_water to here
}

{close_override
print:
   You pull the engine cover past its locking point and allow it to drop
   with a loud bang.^
.
ensure engine_cover has CLOSED
move boat_engine to limbo
move salt_water to limbo
}

object boat_engine : boat engine motor bilge battery batteries
   short		a "boat engine"
   static

{examine
print:
   The bilge below is filled with salt water, half covering the motor. 
   Although only recently sunk, many of the components were badly damaged
   by electrolosis when the water level rose above the terminals of the 
   batteries.^
.
}

{turn_on : repair
print:
   The engine is beyond repair with the tools and parts you have available.^
.
}

object salt_water : salt water
   short		some "salt water"
   has			LIQUID NOT_IMPORTANT
   static

location forepeak : forepeak
   short		the "forepeak"
   west			wheelhouse
   up			nowhere

{look
if here has VISITED
   write "You are back on the forepeak.^"
   return
endif
print:
   Curved beams supporting the deckhead cause you to crouch low in this
   cramped compartment. Above your head 
.
if hatch has CLOSED
   write "is a closed hatch.^"
else
   write "an open hatch leads up for the foredeck.^"
endif
}

{movement
if destination = nowhere
   if compass = up
      proxy "open hatch"
      set destination = foredeck
      return false
   endif
   print:
      You can only go west into the wheelhouse or up onto the foredeck.^
   .
   return
endif
return false
}

{eachturn
move hatch to here
}

location wheelhouse : wheelhouse
   short		the "wheelhouse"
   east			forepeak
   in			forepeak
   west			afterdeck
   out			afterdeck

{look
if here has VISITED
   write "You have returned to the wheelhouse.^"
   return
endif
print:
   The wheelhouse is relatively spacious compared to the cramped afterdeck. The 
   controls for driving the boat are on the starboard side and consist of the
   helm, gear lever and throttle lever. Beside the helm an 
   opening in the bulkhead leads into the forepeak. The back of the wheelhouse
   is open to the afterdeck while
.
ifall script_stage >= rain_started : script_stage < day_two
   write "rain streaks down the grass of the windscreen ahead.^"
else
   write "the foredeck can be seen through the windscreen ahead.^"
endif
ensure forepeak has KNOWN
}

{movement
if destination = nowhere
   print:
      From here you can either go west back out onto the afterdeck to further
      east into the forepeak.^
   .
   return
endif
return false
}

grammar turn *present port			>turn_anticlockwise
grammar turn *present to port		>turn_anticlockwise
grammar turn *present to left		>turn_anticlockwise
grammar turn *present left			>turn_anticlockwise

grammar turn *present starboard		>turn_clockwise
grammar turn *present to starboard	>turn_clockwise
grammar turn *present right			>turn_clockwise
grammar turn *present to right		>turn_clockwise

integer BLOOD_DISCOVERED	false

object windscreen : windscreen wind screen glass
   short		a "windscreen"
   has			NOT_IMPORTANT
   static

object bulkhead : bulkhead opening
   short		a "bulkhead"
   static

{examine
print:
   The bulkhead divides the wheelhouse from the forepeak. An opening in its
   centre allows you to move freely between the two.^
.
}

{enter
proxy "east"
}

object helm : helm wheel stainless steel wheel
   short		a "helm"

{clean : clean_with_shirt : clean_with_corner
if blood(parent) = limbo
   print:
      The helm is already as clean as you can get it.^
   .
   set time = false
else
   print:
      You clean the patch of blood off the top of the helm.^    
   .
   move blood_on_helm to limbo
endif
}

{examine
print:
   The helm is a large stainless-steel wheel. 
.
if blood_on_helm(parent) != limbo
   print:
      Along the top edge of the helm is a patch of dried blood.
   .
endif
write "^"
}

{turn : turn_anticlockwise : turn_clockwise
if BLOOD_DISCOVERED = false
   print:
      You grab the wheel and try to turn it but with the rudder buried deep in
      the sand you are unable to. As you release your grip you become aware of
      what looks like dried blood on along the top edge of the helm.^
   .
else
   print:
      Grabbing a clean part of the wheel you try to turn it, but with the 
      rudder buried deep in the sand you are unable to.^
   .
endif
}

object blood_on_helm : patch of dried blood on helm
   short		a "patch of dried blood on the helm"

{examine
print:
   The dried blood is confined to a small patch along the top of the helm. 
.
if hair(parent) = limbo
   print:
      Looking closely you notice there is a single strand of hair stuck to 
      the blood, which you take.
   .
   move hair to player
endif
write "^"
}

{clean : clean_with_shirt : clean_with_corner
proxy "clean helm"
}

object hair : single black strand of hair
   short		a "strand of black hair"
   long			function
   parent		limbo
   mass			0

{examine
print:
   It appears to be a single strand of black human hair.^
.
}

{drop
print:
   You would never find it again if you dropped it.^
.
}

object throttle_lever : throttle lever
   short		a "throttle lever"
   plural		levers

{examine
print:
   The throttle lever is pushed all the way forward.^
.
}

{pull : turn : move
print:
   The throttle lever stays put, stubbornly resisting your efforts.^
.
}

object gear_lever : gear lever
   short		a "gear lever"
   plural		levers

{examine
print:
   The gear lever is pushed forward.^
.
}

{pull : turn : move
print:
   The gear lever appears to be jammed.^
.
}

location foredeck : foredeck deck decking
   short		the "foredeck"
   has			OUTDOORS
   down			nowhere

{look
if here has VISITED
   write "You duck back into the forepeak.^"
   return
endif
ifall script_stage >= rain_started : script_stage < day_two
   print:
      Slippery wet decking fills this space from bowsprit to wheelhouse. 
      Just forward of the wheelhouse is
   .
else
   print:
      Teak decking fills this space from bowsprit to wheelhouse. Just forward
      of the wheelhouse is
   .
endif
if hatch hasnt CLOSED
   write "an open hatch leading down to the forepeak.^"
else
   write "a closed hatch.^"
endif
}

{movement
if destination = nowhere
   if compass = down
      proxy "open hatch"
      set destination = forepeak
      return false
   endif
   print:
      Back down into the forepeak is the only way from here.^
   .
   return
endif
return false
}

{examine : *examine_afterdeck
print:
   The teak decking has been caulked with oakum then paid with tar to seal
   it against the rough seas of cyclone season.^
.
}

{eachturn
move hatch to here
}

object hatch : square hatch
   short		a "hatch"
   has			CLOSABLE CLOSED

{open_override
write "You swing open the hatch allowing access "
if here = foredeck
   write "down into the forepeak.^
else
   write "up to the foredeck.^
endif
set foredeck(down) = forepeak
set foredeck(in) = forepeak
set forepeak(up) = foredeck
ensure hatch hasnt CLOSED
ensure foredeck has KNOWN
}

{close_override
print:
   You swing the hatch closed again.^
.
set foredeck(down) = nowhere
set foredeck(in) = nowhere
set forepeak(up) = nowhere
ensure hatch has CLOSED
}

{examine
write "The hatch is currently "
if hatch has CLOSED
   write "closed.^"
else
   write "open.^"
endif
}

constant		tied_to		8

object rope : length of rope
   short		a "length of rope"
   long			function
   mass			45

{long
if here = foredeck
   write "There is a length of rope coiled on the deck.^"
   return
endif
if rope has WOUND
   write "The rope is wound around " 
   if frayed(tied_to) != nowhere
      write frayed(tied_to){the} ".^"
      return
   endif
   if whipped(tied_to) != nowhere
      write whipped(tied_to){the} ".^"
      return
   endif
endif
write "There is a length of rope here."
execute "+rope_status"
}

{examine
print:
   The rope is about forty feet long and over half an inch thick.\
.
execute "+rope_status"
}

{+rope_status
ifall frayed(tied_to) != nowhere : whipped(tied_to) != nowhere
   write " The frayed end of the rope is tied to " frayed(tied_to){the} 
   write " while the whipped end is tied to " whipped(tied_to){the} ".^"
   return
endif
if frayed(tied_to) != nowhere 
   write " The frayed end of the rope is tied to " frayed(tied_to){the}
   write ".^"
   return
endif
if whipped(tied_to) != nowhere
   write " The whipped end of the rope is tied to " whipped(tied_to){the}
   write ".^"
   return
endif
write "^"
}

{+tied_to_me
if frayed(tied_to) = arg[0] : whipped(tied_to) = arg[0]
   if rope has WOUND
      write " The rope is wound around " arg[0]{the} "."
      return
   endif
endif
if frayed(tied_to) = arg[0] 
   write " The frayed end of the rope is tied to " arg[0]{the} "."
   return
endif
if whipped(tied_to) = arg[0]
   write " The whipped end of the rope is tied to " arg[0]{the} "."
   return
endif
return false
}

{untie
if frayed(tied_to) = windlass : whipped(tied_to) = windlass
   if clutch has ON
      print:
         You are unable to untie the rope from the windlass while it is 
         turning.^
      .
      set time = false
      return
   endif
endif

ifall frayed(tied_to) != nowhere : whipped(tied_to) != nowhere
   write "You untie the rope from " frayed(tied_to){the} " and " whipped(tied_to){the} ".^"
   set frayed(tied_to) = nowhere
   set whipped(tied_to) = nowhere
   return
endif
if frayed(tied_to) != nowhere 
   write "You untie the rope from " frayed(tied_to){the} ".^"
   set frayed(tied_to) = nowhere
   return
endif
if whipped(tied_to) != nowhere
   write "You untie the rope from " whipped(tied_to){the} ".^"
   set whipped(tied_to) = nowhere
   return
endif
write "The rope is not tied to anything.^"
set time = false;
}

object whipped : whipped end of rope
   short		the "whipped end of the rope"
   parent		rope
   tied_to		nowhere

object frayed : frayed end of rope
   short		the "frayed end of the rope"
   parent		rope
   tied_to		nowhere

{examine : *examine_whipped
if this(tied_to) != nowhere
   write this{The} " is tied to " this(tied_to){the} ".^"
   return
endif
write this{The} " is currently not tied to anything.^"
}

{tie_to_miki : *tie_to_miki_whipped : *tie_to_miki_rope
print:
   Miki pushes your hand away as you try to tie the rope to him.^
.
}

{untie : *untie_whipped
ifall this(tied_to) = windlass : clutch has ON
  print:
      You are unable to untie the rope from the windlass while it is turning.
  .
  set time = false
  return
endif

if this(tied_to) != nowhere
   write "You untie " this{the} " from " this(tied_to){the} ".^"
   set this(tied_to) = nowhere
   return
endif
write this{The} " is not tied to anything.^"
set time = false;
}

{tie_to_chapel_door_handle : tie_to_chapel_door : *tie_to_chapel_door_handle_whipped : *tie_to_chapel_door_whipped
write "You tie " noun1{the} " to the handle of the chapel door.^"
set this(tied_to) = chapel_door_handle
}

{tie_to_windlass : *tie_to_windlass_whipped
if clutch has ON
   if +rope_tied_to<chapel_door_handle = true
      # THE OTHER END IS TIED TO THE CHAPEL DOOR HANDLE
      execute "+door_opens"
   else
      # IF TIED TO NOTHING OR ANYTHING ELSE THEN LET THE ROPE WIND
      # UP UNEVENTFULLY
      print:
         You tie a loose clovehitch around the middle of the slowly-turning
         windlass then pull it tight to grip onto the drum. As the drum 
         continues to turn the rope becomes entirely wrapped around it\
      .
      if rope(parent) = player
         write ", pulling out of your hands.^"
         move rope to here
      else
         write ".^"
      endif
   endif
   ensure rope has WOUND
else
   print:
      You tie the rope in a clovehitch around the middle of the windlass.^
   .
endif
set this(tied_to) = noun2
}

{+door_opens
volume 100 foreground_channel
if interpreter = GLK
   sound sound_DoorBreaking foreground_channel
else
   sound "/sounds/DoorBreaking.ogg" "audio/ogg"
endif
print:
   As the windlass continues to turn the rope becomes taught. You
   step back as the strain increases, pulling on the chapel door. 
   The unnerving sound of strands breaking within the rope is followed
   by a frightening crack as the frame of the chapel door splinters and the
   door flies open. The handle to the door is whipped inches over your
   head then ricochets off the frame of the windmill into the bushes
   beyond.^
.
points 10
ensure chapel has SCORED
move rope to here
if frayed(tied_to) = chapel_door_handle
   set frayed(tied_to) = nowhere
endif
if whipped(tied_to) = chapel_door_handle
   set whipped(tied_to) = nowhere
endif
move chapel_door_handle to limbo
ensure chapel_door hasnt CLOSED
ensure chapel_door hasnt LOCKED
set back_of_house(west) = chapel
}

location beach_trail : narrow beach trail
   short		a "narrow trail"
   has			OUTDOORS
   north		snake_bay_east
   down			snake_bay_east
   south		front_of_house
   up			front_of_house

{look
if here has VISITED
   write "You are on the narrow trail again.^"
   return
endif
print:
   You are on an arduous trail that leads from the beach below up to the main 
   house.
.
ifall script_stage >= rain_started : script_stage < day_two
   print:
      Rain runs down the steeper sections of the path turning compacted 
      dirt to mud.^
   .
else
   print:
      Steeper sections of the path turn into crude steps, some made from
      uncut sandstone, others just compacted dirt held together by
      exposed tree roots.^
   .
ensure front_of_house has KNOWN
}

{movement
if destination = nowhere
   print:
      You can either go up to the house or down to the beach.^
   .
   return
endif
return false
}

object steps : standstone standstones root roots compacted dirt
   short		the "steps"
   has			NOT_IMPORTANT PLURAL
   static

object houseobj : house
   short		a "house"
   static

{look_under
proxy "examine crawlspace"
}

{send_message_override
if @+message_sent != 0
   write "You aren't sure what else you can say about the house.^"
   set time = false
   return
endif
write "You tap out a short message on the morse key: "
write "~ARRIVED AT HOUSE. NO SIGN OF PERSONNEL. INVESTIGATING. OUT.~^"
execute "+message_sent"
}

{enter
if here = back_of_house
   proxy "north"
else
   proxy "south"
endif
}
   
location front_of_house : front of house
   short		the "front of the house"
   has			OUTDOORS
   north		beach_trail
   down			beach_trail
   south		verandah
   up			verandah

{look
if here has VISITED
   write "You are standing back in front of the house.^"
   return
endif
print:
   The ground flattens out here at the site of this old Catholic mission. 
   Built in the late 1920s, this small timber-frame house sits perched off 
   the ground on short clay-brick piers. The eaves of the corrugated iron 
.
ifall script_stage >= rain_started : script_stage < day_two
   print:
      roof are draped with a curtain of water all around 
      the house.
   .
else
   print:
      roof have done little to protect the painted lime-green
      walls from the baking sun and driving rain of the wet season. 
   .
endif
print:
   A short set of steps lead up to the front verandah of the house.^
.
ensure verandah has KNOWN
}

{look_under
print:
   The brick piers are on average about two feet tall creating a dry and dusty
   crawlspace beneath the house.^
.
}

{eachturn
move houseobj to here
move crawlspace to here
}

object crawlspace : clay brick clay-brick pier piers crawlspace under house
   short		a "crawlspace"
   static

{examine
print:
   The house sits on brick piers that are on average about two feet tall 
   creating a dry and dusty crawlspace beneath it.^
.
}

{enter
if here = under_house
   write "You are already under the house.^"
else
   write "You get down on your hands and knees and crawl under the house.^^"
   move player to under_house
   execute "+look_around"
endif
}

object front_steps : front steps
   short		some "front steps"
   has			PLURAL
   static

{examine
print:
   The stringers and treads are made from worn hardwood that is beginning to
   rot at the end grain.^
.
}

{look_under
execute "look_under_front_of_house"
}

location under_house : under house
   short		name "under the house"
   north		front_of_house
   south		back_of_house

{look
if here has VISITED
   write "You crawl back under the house.^"
   return
endif
print:
   You are on your stomatch in the dry, dusty crawlspace under the house.  
   You can get out from under the house to the north or south.^
.
}

{stand
write "There isn't enough room to stand here.^"
}

{jump
write "There isn't enough room to stand here, let alone jump up and down.^"
}

{eachturn
move crawlspace to here
}

object enfield_shell : lee enfield shell 303 casing
   short		a "rifle shell casing"
   long			function
   mass			1

{long
if enfield_shell has TOUCHED
   write "A rifle shell casing rests in the dust near the back door of "
   write "the house.^"
else
   write "There is a rifle shell casing on the ground.^"
endif
}

{examine
print:
   This brass shell casing is one from a standard .303 round used
   by Lee Enfield rifles.^
.
}

location verandah : front verandah
   short		the "front verandah"	
   down			front_of_house
   north		front_of_house
   south		lounge_room
   in			lounge_room

{look
if here has VISITED
   ifall script_stage > rain_started : script_stage < day_two
      write "You step up onto the verandah out of the rain.^"
   else 
      write "You are back on the front verandah.^"
   endif
   return
endif
ifall script_stage > rain_started : script_stage < day_two
   print:
      A sheet of water flows off the roof obscuring your view of anything 
      beyond the steps leading down. Behind you a flyscreen door leads into
      the house.^
   . 
else
   write "The cool shade of the verandah is pleasant relief from the "
   if from_location = front_of_house
      write "scorching sun. "
   else
      write "stifling heat inside. "
   endif
   print:
      Built by German missionaries in the 1920s, the style of this house is 
      an odd blend of European charm and tropical practicality. 
      A flyscreen door leads into the house while a short set of steps 
      lead down to the grass in front of the house.^
   .
endif
ensure lounge_room has KNOWN
}

{movement
if destination = lounge_room
   print:
      You open the screen door and step inside the house.^^
   .
   return false
endif
if destination = nowhere
   print:
      From the verandah you can either go into the house or down onto the
      grass north of the house.^
   .
   return
endif
return false
}

{eachturn
move houseobj to here
move front_door to here
}

object front_door : front flyscreen screen door
   short		a "front door"
   static

{enter
if here = verandah
   proxy "south"
else
   proxy "north"
endif
}

{open
print:
   The screen door has a spring attached to ensure it stays closed, guarding
   against the swarms of tropical insects in the area -- you'll open it whenever
   you need to go in and out.^
.
}

{close
print:
   The flyscreen door is already firmly closed.^
.
}

object spring : front flyscreen screen door spring
   short		a "door spring"
   has			NOT_IMPORTANT
   static

location lounge_room : bare sparsely furnished lounge room area
   short		the "lounge room"
   north		verandah
   out			verandah
   east			radio_room
   west			kitchen
   south		hallway

{look
if here has VISITED
   write "You have returned to the lounge room.^"
   return
endif
print:
   The French-polished buffet and hutch against the south wall stands in 
   contrast to the peeling wallpaper and matt timber floor boards of this 
   relatively bare room. Although a three-seater lounge and coffee table 
   remain, gone are the vases, lamps, paintings and side tables from the
   days before the war.
   To the south you can see through a short hallway to a garden beyond while
   open doorways lead west to the kitchen and east into the radio room. ^
.
ensure kitchen has KNOWN
ensure radio_room has KNOWN
ensure hallway has KNOWN
}

{movement
if destination = verandah
   print:
      You open the screen door and step outside.^^
   .
   return false
endif
if destination = nowhere
   print:
      From here you can either go out onto the verandah, east to the radio
      room, west to the kitchen or south into the hallway.^
   .
   return
endif
if destination = radio_room
   ifall generator has ON : radio has ON
      volume 0 background_channel
      sound sound_RadioStatic background_channel loop
      set fade_in[background_channel] = 20
   endif
   return false
endif
return false
}

{eachturn
move front_door to here
ifall @+say_worried = false : miki is *present
   execute "+say_worried"
endif
}

{sit
proxy "sit on lounge"
}

object missing_furniture : vases vase lamp lamps painting paintings side table side tables
   short		the "missing furniture"
   has			OUT_OF_REACH
   static

{examine
write "Gone long ago.^"
}

object wallpaper : wallpaper
   short		some "wallpaper"
   static

{pull : look_behind
print:
   There is nothing of interest behind the wallpaper.^
.
}

{examine
print:
   The wallpaper is blackened and peeling from years of soaking humidity and
   inquisitive young hands.^
.
}
 
object buffet : french polished buffet
   short		a "French-polished buffet"
   has			SURFACE
   capacity		30

object hutch : french polished hutch
   short		a "French-polished hutch"
   has			CONTAINER CLOSED CLOSABLE
   capacity		15

object junk : mountain of useless junk
   short		a "mountain of useless junk"
   parent		hutch
   mass			heavy
   static

{examine
print:
   All sorts of useless junk has been piled into the hutch. You smile to
   yourself as you imagine the inspection that was about to occur when
   everything got shoved there.^
.
}

{take
if @junk.examine = 0
   print:
      There is nothing worthwhile in all the junk.^
   .
else
   print:
      Why make the place messy again?^
   .
endif
}

{search : look_through : look_behind : look_under
write "You don't find anything worthwhile.^"
}

object floor_boards : matt timber floor boards
   short		some "timber floor boards"
   has			PLURAL
   static

object lounge_chair : three-seater three seater lounge chair
   short		a "lounge chair"
   has			SURFACE
   capacity		50
   static

{examine
print:
   Ornate leaves are embroidered into the yellow fabric of the lounge chair.
.
}

{look_under
print:
   You press your cheek against the floor boards and raise the fabric skirt 
   of the lounge to find only dust.^
.
}

{sit_on
print:
   You settle down into the lounge and sit for a moment as your massage
   your forehead.^
.
ensure player has SITTING
}

object coffee_table : coffee table
   short		a "coffee table"
   has			SURFACE
   capacity		40
   static

location radio_room : radio transceiver transmitter room
   short		the "radio room"
   west			lounge_room
   out			lounge_room

{look
if here has VISITED
   write "You have returned to the radio room.^"
   return
endif
print:
   Previously used as the missionary's private quarters, this room now houses
   the outpost's radio equipment. All of the equipment sits on a long table
   positioned against the southern wall, away from the corrosive air that blows
   through the flyscreen window opposite.^
.
}

{movement
if destination = nowhere
   print:
      The only way out is back into the lounge room.^
   .
   return
endif
ifall generator has ON : radio has ON
   set fade_out[background_channel] = 5
endif
return false
}

object radio_window : flyscreen window in radio room timber beading
   short		the "window in the radio room"
   static

{open : close
print:
   The window is made from fixed flyscreen and can't be opened or closed.^
.
}

{examine
print:
   The window is nothing more than a sheet of flyscreen held in place by
   some timber beading.^
.
}

{break : cut
print:
   There is no need to fill the house with mosquitoes to win this game.^
.
}

{look_through
print:
   The window looks out aross the verandah to Snake Bay.^
.
}

object radio : radio transceiver transmitter
   short		a "radio transceiver"

{examine
print:
   The radio transceiver is housed in a large, grey metal box. On the front,
   between two strong carry handles at the edges, are a variety of dials and
   switches, most of which mean nothing to you. You do, however, recognise
   a large power switch beside a voltmeter. 
.
ifall generator has ON : radio has ON
   write "The glowing voltmeter reads just over twelve volts. "
else
   write "The needle of the voltmeter rests lifelessly against the stop. "
endif
print:
   A lead runs from the front of the radio to a morse key resting on 
   the table.^
.
}

{take
print:
   The radio is far to heavy to start lugging around.^
.
}

{listen_to
ifall generator has ON : radio has ON
   print:
      The radio is emitting a gentle hum.^
   .
   return
endif
return false
}

object handles : radio transceiver transmitter strong carry handles
   short		the "strong carry handles"
   has			PLURAL
   static

{examine
print:
   The carry handles are made from bent steel bar.^
.
}

{pull : break : *break_radio : *break_radio_equipment
print:
   Damaging the radio isn't going to help your cause.^
.
}

object radio_switch : radio transceiver transmitter power switch
   short		a "radio power switch"

{examine
write "The switch is in the "
if radio has ON
   write "on"
else
   write "off"
endif
write " position.^"
}

{flick : turn : press : pull : move
if radio has ON
   execute "turn_off_radio"
else
   execute "turn_on_radio"
endif
}

{turn_on : *turn_on_radio
if radio has ON
   write "The radio's power switch is already in the on position.^"
else
   ensure radio has ON
   if generator has ON
      print:
         The voltmeter beside the power switch begins to glow with a dull yellow 
         light as the needle climbs to just above twelve volts.^
      .
      volume 20 background_channel
      sound sound_RadioStatic background_channel loop
   else
      print:
         You flick the power switch to the on position with no noticeable 
         effect.^
      . 
   endif
endif
}

{turn_off : *turn_off_radio
if radio has ON
   ensure radio hasnt ON
   if generator has ON
      print:
         As you flick the radio's power switch to the off position the volt
         meter goes dark and its needle falls back against the stop.^
      .
      stop background_channel
   else
      print:
         You flick the radio's power switch back into the off position.^
      .
   endif
else
   write "The radio's power switch is already in the off position.^"
endif
}

object morse_key : morse key
   short		a "morse key"

{examine
if @clean_morse_key != 0
   print:
      Much shinier now.^
   .
else
   print:
      The morse key is covered in a layer of grime from months of use by
      sweat-covered hands.^
   .
endif
}

{take
print:
   The morse key is attached to the radio.^
.
set time = false
}

{clean : clean_with_shirt : clean_with_corner
if @ = 1
   write "You wipe away the layer of grime.^"
else
   write "It is already clean enough now.^"
   set time = false
endif
}

{press : use : move : knock_on : *use_radio : *talk_to_radio :*use_radio_equipment
if generator hasnt ON : radio hasnt ON
   write "The radio isn't currently powered up.^"
else
   execute "+automatic_message"

   write "^To send a specific message back to the command post using the "
   write "radio, use the commands: "
   style input
   write "send message about <subject>"
   style normal
   write " or " 
   style input
   write "send question about <subject>.^"
   style normal
endif
}

{+automatic_message
if radio hasn't FIRST
   write "You tap out a short message on the morse key: "
   write "~ARRIVED AT HOUSE. NO SIGN OF PERSONNEL. INVESTIGATING. OVER.~^"
   write "^After a short pause a series of dits and dahs cut "
   write "through the static: ~COPY. PROCEED WITH CAUTION. OUT.~^"
   ensure radio has FIRST
endif
ifall steve(parent) != limbo : steve hasnt REPORTED
   proxy "send message about steve"
   return
endif
write "You tap out a short message on the morse key: "
write "~CONTINUING INVESTIGATION. OUT.~^"
execute "+message_sent"
}

{+after_send_message
ensure radio has FIRST
}

grammar send message about *anywhere >send_message

{+send_message
if here != radio_room
   write "You aren't in the radio room at the moment.^"
   set time = false
   return
endif
if generator hasnt ON : radio hasnt ON
   write "The radio isn't currently powered up.^"
else
if noun1 has REPORTED
   write "You don't have anything new to say about " noun1{the} ".^"
   set time = false
   return
endif
override
write "You can't think of anything important to report about " noun1{the} ".^"
}

grammar send question about *anywhere >send_question

{+send_question
if here != radio_room
   write "You aren't in the radio room at the moment.^"
   set time = false
   return
endif
if generator hasnt ON : radio hasnt ON
   write "The radio isn't currently powered up.^"
   return
else
if noun1 has ASKED
   write "You have already asked about " noun1{the} ".^"
   return
endif
override
write "You ask about " noun1{the} " but they aren't able to tell you anything "
write "of relevance.^"
ensure noun1 has ASKED
}

#object radio_log : radio transmitter transceiver log
#   short		a "radio log"

#object watch_bill : watch bill
#  short		a "watch bill"

object radio_equipment : radio transceiver transmitter equipment
   short	the "radio equipment"
   counter	0	# THIS IS THE COUNT OF HOW MANY MESSAGES HAVE BEEN SENT

{examine
print:
   The radio equipment consists of a large grey transceiver and a morse key.^
.
}

object voltmeter : voltmeter meter needle stop
   short	a "voltmeter"
   static

{knock_on
write "The needle doesn't budge.^"
}

{examine
ifall generator has ON : radio has ON
   write "The glowing voltmeter reads just over twelve volts.^"
else
   write "The needle of the voltmeter rests lifelessly against the stop.^"
endif
}

location kitchen : kitchen
   short			the "kitchen"
   east				lounge_room
   out				lounge_room

{look
if here has VISITED
   write "You have returned to the kitchen.^"
   return
endif
print:
   Although almost bare, this kitchen is surprising large. It was built to feed
   the large numbers of Aboriginal people that stayed here before they were 
   moved to neighbouring Bathurst Island shortly after the war began.^
.
}

{movement
if destination = nowhere
   print:
      The only way out is back into the lounge room.^
   .
   return
endif
return false
}

location hallway : hallway
   short		the "hallway"
   north		lounge_room
   east			east_sleeping
   west			west_sleeping
   south		back_of_house
   out			back_of_house

{look
if here has VISITED
   write "You are back in the hallway.^"
   return
endif
print:
   This short hallway leads from the lounge room to the north out to the garden
   behind the house. To the east and west lie two sets of sleeping quarters.^
.
ensure back_of_house has KNOWN
ensure west_sleeping has KNOWN
ensure east_sleeping has KNOWN
}

{movement
if destination = back_of_house
   if clutch has ON
      volume 0 eachturn_channel
      sound sound_Windlass eachturn_channel loop
      set fade_in[eachturn_channel] = 20
   endif
   print:
      You open the screen door and step outside the house.^^
   .
   return false
endif
return false
}

{eachturn
move back_door to here
}

object back_door : back flyscreen screen door
   short		a "back flyscreen door"
   static

{enter
if here = hallway
   proxy "south"
else
   proxy "north"
endif
}

{open
print:
   The screen door has a spring attached to ensure it stays closed, guarding
   against the swarms of tropical insects in the area (you'll open it whenever
   you go in and out.)^
.
}

{close
print:
   The flyscreen door is already firmly closed.^
.
}

location east_sleeping : small east eastern sleeping quarters
   short		the "eastern sleeping quarters"
   west			hallway

{look
if here has VISITED
   write "You are in the eastern sleeping quarters once again.^"
   return
endif
if west_sleeping has MAPPED
   print:
      This room is smaller than the western sleeping quarters.
   .
endif

ifall script_stage >= rain_started : script_stage < day_two
   print:
      A single bunk and footlocker can be seen by the pale light
      coming through a flyscreen window in the eastern wall.^
   .
else
   print:
      Sunlight shines in through a flyscreen window in the eastern wall
      across a single bunk with a footlocker hard up against its base.^
   .
endif
}

{movement
if destination = nowhere
   print: 
      Back west into the hallway is the only way from here.^
   .
   return
endif
return false
}

{hint
set time = false
if footlocker hasnt LOCKED
   write "You only needed to get the footlocker open.^"
   return
endif
if $integer = 1
   print:
      There are a couple of ways you can get the footlocker open,
      but one will tell you more about it than the other.^
   .
   return
endif
if $integer = 2
   print:
      The person who this locker belongs to still has the key for it.^
   .
   return
endif
if $integer = 3
   print:
   .
   return
endif
write "There is no level " $integer " hint for this location.^"
}

object footlocker : footlocker locker
   plural		footlockers lockers
   short		a "footlocker"
   has			CONTAINER CLOSED CLOSABLE LOCKED LOCKABLE

{examine
print:
   The footlocker is made from timber covered with thin metal that has been
   painted a bright Napier green. Three black-iron bands circle the footlocker
   with a keyhole set into the centre one.
.
if footlocker has CLOSED
   write "The locker is currently closed.^"
else
   write "The locker is currently open.^"
endif
}

{unlock_with_brass_key_override
if steves_keyhole has DAMAGED
   print:
      The keyhole is now damaged beyond being usable.^
   .
else
   print:
      You gently insert the brass key into the keyhole and turn it with 
      a sharp click.^ 
   .
   ensure footlocker hasnt LOCKED
endif
}

{lock_with_brass_key_override
if steves_keyhole has DAMAGED
   print:
      The keyhole is now damaged beyond being usable.^
   .
else
   print:
      You insert the key back in the keyhole and lock it again.^
   .
   ensure footlocker has LOCKED
endif
}

object steves_keyhole : steve's keyhole lock
   plural		keyholes locks
   short		a "keyhole"

{examine
if steves_keyhole has DAMAGED
   print:
      The keyhole is now just a shattered mess of wood and metal.^
   .
else
   print:
      You brush your hand across the keyhole and peer inside. It appears to
      take a reasonably large old-fashioned key.^
   .
endif
}

{lock_with_brass_key
proxy "lock footlocker with key"
}

{unlock_with_brass_key
proxy "lock footlocker with key"
}

{shoot_with_your_rifle_override
if steves_keyhole has DAMAGED
   write "Once was enough.^"
   set time = false
   return
endif
volume 100 foreground_channel
if interpreter = GLK
   sound sound_FiringRifle foreground_channel
else
   sound "/sounds/FiringRifle.ogg" "audio/ogg"
endif
set your_rifle(status) - 1
if miki is *present
   print:
      As you place the tip of the rifle barrel close to the keyhole Miki
      covers his ears with his hands. You fire a single shot then turn to
      Miki and point to the rifle: ~Skeleton key.~^
   .
else
   print:
      You place the tip of the rifle barrel close to the keyhole and pull the
      trigger. Moments later Miki comes running into the room, wild eyed.^^
      ~It's okay Miki,~ you explain pointing to the rifle: ~Skeleton key.~^
   .
   move miki to here
endif
ensure steves_keyhole has DAMAGED
ensure footlocker hasnt LOCKED
}

{look_through
if steves_keyhole has DAMAGED
   write "Being careful not to get a splinter in your eye, you "
else
   write "You "
endif
write "peer through the keyhole "
if footlocker HAS CLOSED
   write "but see only darkness.^"
else
   write "but see nothing special.^"
endif
}

object steves_clothes : steve's steven's grubby clothes
   short		some "grubby clothes"
   has			PLURAL
   parent		footlocker
   mass			5

{insert_in_cut
if cut(status) = 0
   print:
      You roll fold an edge of the grubby clothes and jam them into the cut 
      to seal the tank as much as possible.^
   .
   set cut(status) = this
   set this(parent) = cut
else
   write cut(status){The} " " cut(status){is} " already in the cut.^"
   set time = false
endif
}

{take
if pouch(parent) = limbo
   print:
      As you lift the clothes out of the footlocker you discover a small
      leather pouch sitting under them.^
   .
   move pouch to footlocker
endif
return false
}

{examine
if pouch(parent) = limbo
   print:
      Under the clothes you discover a small leather pouch.^
         .
move pouch to footlocker
else
   print:
      The clothes are just standard issue army uniform.^
   .
endif
}

{look_under
if pouch(parent) = limbo
   print:
      Under the clothes you discover a small leather pouch.^
      move pouch to footlocker
   .
endif
return false
}

object pouch : small leather pouch
   short		a "small leather pouch"
   has			CONTAINER CLOSABLE CLOSED
   mass			5
   capacity		1
   parent		limbo

{after_open
if pouch has SCORED
   return
endif
points 5
ensure pouch has SCORED
}

object pearls : small irregular-shaped irregular shaped pearls pearl
   short		some "pearls"
   has			PLURAL
   mass			1
   parent		pouch

{examine
print:
   A handful of small, irregular-shaped pearls. Their 
   surfaces appear transulcent in this light.^
.
}

object steves_bunk : steve's bunk
   short		the "bunk"
   has			SURFACE
   static

{look_under
write "There is nothing under the bunk.^"
}

object east_sleeping_window : flyscreen window in east sleeping quarters timber beading
   short		the "window in the east sleeping quarters"
   static

{open : close
print:
   The window is made from fixed flyscreen and can't be opened or closed.^
.
}

{examine
print:
   The window is nothing more than a sheet of flyscreen held in place by
   some timber beading.^
.
}

{break : cut
print:
   There is no need to fill the house with mosquitoes to win this game.^
.
}

{look_through
print:
   The window looks into the bush beside the house.^
.
}

location west_sleeping : large west western sleeping quarters
   short		the "western sleeping quarters"
   east			hallway

{look
if here has VISITED
   write "You are in the west sleeping quarters.^"
   return
endif
print:
   Almost the same size as the lounge room, these sleeping quarters were once
   filled with many bunks. Now only two remain, separated by a large bed sheet
   nailed to the ceiling for privacy. There is a footlocker on the ground at
   the foot of both bunks.^
.
}

{movement
if destination = nowhere
   print: 
      Back east into the hallway is the only way from here.^
   .
   return
endif
return false
}

object sheet : sheet privacy screen
   short		a "sheet"

{examine
print:
   The long edge of the grubby old sheet has been nailed to the ceiling
   to act as a crude privacy screen between the two bunks.
.
if corner(parent) != limbo
   write "The corner of the sheet has been torn off.^"
else
   write "^"
endif
}

{pull : take
print:
   There is no need to rip the sheet from the ceiling.^
.
set time = false
}

{break
if corner(parent) != limbo
   print:
      There is no need to damage the sheet any further.^
   .
   set time = false
else
   write "You tear a corner off the sheet.^"
   move corner to player
endif
}

object corner : corner of sheet triangle
   short		a "corner of the sheet"
   mass			2
   parent		limbo

{examine
print:
   A rough triangle of grubby material.^
.
}

{insert_in_cut
if cut(status) = 0
   print:
      You roll the small piece of sheet up and jam it into the cut to seal 
      the tank as much as possible.^
   .
   set cut(status) = this
   set this(parent) = cut
else
   write cut(status){The} " " cut(status){is} " already in the cut.^"
   set time = false
endif
}

object left_bunk : left bunk
   plural		bunks
   short		the "left bunk"
   static

{look_under
write "There is nothing under the left bunk.^"
}

object left_footlocker : left footlocker locker
   plural		footlockers lockers
   short		the "left footlocker"
   has			CONTAINER CLOSABLE CLOSED LOCKABLE
   capacity		20

{lock_with_brass_key : unlock_with_brass_key
print:
   Although the key seems to fit, it doesn't turn.^
.
}

object left_keyhole : left footlocker's locker's footlocked locker lock lock's keyhole
   plural       keyholes locks
   short		a "left footlocker's keyhole"

{lock_with_brass_key
proxy "lock left footlocker with key"
}

{unlock_with_key
proxy "lock left footlocker with key"
}

{shoot_with_your_rifle_override
print:
   It's not locked you know.^
.
set time = false
}

{look_through
write "You peer through the keyhole "
if left_footlocker HAS CLOSED
   write "but see only darkness.^"
else
   write "but see nothing special.^"
endif
}

object folded_clothes : folded clothes
   short		some "folded clothes"
   has			PLURAL
   parent		left_footlocker
   mass			5

{insert_in_cut
if cut(status) = 0
   print:
      You roll take an edge of the folded clothes and jam them into the cut 
      to seal the tank as much as possible.^
   .
   set cut(status) = this
   set this(parent) = cut
else
   write cut(status){The} " " cut(status){is} " already in the cut.^"
   set time = false
endif
}

object right_bunk : right bunk
   plural		bunks
   short		the "right bunk"
   static

{look_under
write "There is nothing under the right bunk.^"
}

object right_footlocker : right footlocker locker
   plural		footlockers lockers
   short		the "right footlocker"
   has			CONTAINER CLOSABLE CLOSED LOCKABLE
   capacity		20

{lock_with_brass_key : unlock_with_brass_key
print:
   Although the key seems to fit, it doesn't turn.^
.
}

object right_keyhole : right footlocker's locker's footlocked locker lock lock's keyhole
   plural       keyholes locks
   short		a "right footlocker's keyhole"

{lock_with_brass_key
proxy "lock right footlocker with key"
}

{unlock_with_key
proxy "lock right footlocker with key"
}

{shoot_with_your_rifle_override
print:
   It's not locked you know.^
.
set time = false
}

{look_through
write "You peer through the keyhole "
if right_footlocker HAS CLOSED
   write "but see only darkness.^"
else
   write "but see nothing special.^"
endif
}

object crumpled_clothes : crumpled clothes
   short		some "crumpled clothes"
   has			PLURAL
   parent		right_footlocker
   mass			5

{insert_in_cut
if cut(status) = 0
   print:
      You roll fold an edge of the crumpled clothes and jam them into the cut 
      to seal the tank as much as possible.^
   .
   set cut(status) = this
   set this(parent) = cut
else
   write cut(status){The} " " cut(status){is} " already in the cut.^"
   set time = false
endif
}

location back_of_house : back of house garden
   short		the "back garden"
   has			OUTDOORS
   north		hallway
   south		paddock
   west			nowhere
   up			windmill

{look
if here has VISITED
   write "You are standing at the back of the house again.^"
   return
endif
print:
   Here behind the house the patchy grass has been cut short and a well-worn
   path leads from the back door to a paddock further south. Scattered either
   side of the path is an arrangement of structures, a post-industrial study
   in galvanised steel: a tall windmill filling a corrugated water tank, a 
   rotary clothes line and a long wash basin attached to the back wall of the 
   house. To the west lies the
.
if chapel_door has CLOSED
   write "closed"
else
   write "open"
endif
write " door of a small free-standing chapel.^"
ensure paddock has KNOWN
ensure chapel has KNOWN
ensure windmill has KNOWN
}

{in
write "Would you like to go into the chapel or back into the hallway?^"
setstring question "go "
set time = false
}

{movement
ifall compass = west : chapel_door has CLOSED
   write "The chapel door blocks your way.^"
   return true
endif
if destination = hallway
   write "You open the screen door and "
   ifall script_stage > rain_started : script_stage < day_two
      write "duck into the house out of the rain.^^"
   else 
      write "step inside the house.^^"
   endif
endif
if destination = windmill 
   if +carrying_too_much = false
      if windmill has VISITED
         print:
            You grab the railing of the ladder and climb up to the observation
            platform.^
         .
      else
         print:
            You grab the railing of the ladder and climb up.^^
         .
      endif
   else
      return true
   endif     
endif
if destination = paddock
   if generator has ON
      volume 0 background_channel
      sound sound_GeneratorRunning background_channel loop
      set fade_in[background_channel] = 75 # SLOWLY FADE UP TO 75%
   endif
endif
ifall destination != nowhere : clutch has ON
   set fade_out[eachturn_channel] = 5
endif
return false
}

{+carrying_too_much
set INDEX = 0
select *held
   ifall noun3(mass) > 50 : noun3(mass) != scenery : noun3 hasnt WORN
      set INDEX + 1
   endif
endselect
if INDEX = 0
   return false
endif
write "You can't climb up the ladder while you are carrying "
select *held
   ifall noun3(mass) > 50 : noun3(mass) != scenery : noun3 hasnt WORN
      write noun3{the}
      set INDEX - 1
      execute "+or_structure"
   endif
endselect
write ".^"
}

{eachturn
move crawlspace to here
move houseobj to here
move chapel_door to here
move back_door to here
if clutch has ON
   if +rope_tied_to<windlass = true
      if +rope_tied_to<chapel_door_handle = true
      endif
      if +rope_tied_to<nowhere = true
         write "^As the windlas continues to turn "
         if rope is *held
            write "the rope is pulled out of your hands and the loose end"
            move rope to here
         else
            write "the loose end of the rope"
         endif
         write " periodically slaps against the ground.^"
      endif
   endif
endif
}

{hint
set time = false
if here(west) != nowhere
   write "Getting the chapel door open is all you needed to do here.^"
   return
endif
if $integer = 1
   print:
      You need to get the chapel door open and get inside. The key is
      nowhere to be found so you are going to have to force the door open.^   
   .   
   return
endif
if $integer = 2
   print:
      The door and door frame are far to strong to break without the help
      of some powerful machinery.^
   .   
   return
endif
if $integer = 3
   print:
      You need to use the winch on the windmill to pull the door open. 
      There is enough wind to keep the windmill turning but you need
      to engage the clutch for the windlass to turn. You'll also need
      something to connect the door to the windlass.^
   .   
   return
endif
if $integer = 4
   write "To pull open the chapel door:^"
   execute "+command<tie rope to chapel door"
   execute "+command<tie rope to windlass"
   execute "+command<turn wheel"
   return
endif
write "There is no level " $integer " hint for this location.^"
}

object basin_tap: plain wash basin sink tap
   has			CLOSABLE CLOSED
   short		a "tap"

{examine
if basin_tap hasnt CLOSED 
   write "Water flows from the open tap.^"
else
   write "The tap is turned to the closed position.^"
}

{turn
if basin_tap hasnt CLOSED 
   execute "close_basin_tap"
else
   execute "open_basin_tap"
}

{open : turn_on
if basin_tap hasnt CLOSED 
   write "The tap is already open.^"
   return
endall
write "Water begins to flow from the tap as you open it.^"
ensure basin_tap hasnt CLOSED 
}

{close : turn_off
if basin_tap has CLOSED
   write "The tap is already closed.^"
   return
endif
write "You turn the tap, shutting off the water.^"
ensure basin_tap has CLOSED
}

object basin : long wash basin sink
   short		a "long wash basin"
   has			CONTAINER
   capacity		20
   static

object clothes_line : rotary clothes line 
   short		a "rotary clothes line"
   static

{turn : turn_anticlockwise : turn_clockwise
print:
   The rusty post of the clothes line lets out a high-pitched squeal of protest
   as you turn it around.^
.
} 

object water_tank : corrugated water tank
   short		a "corrugated water tank"
   static

{examine
print:
   The tank sits up off the ground on a timber stand in order to allow the
   water within it, pumped by the windmill from an underground spring, to be 
   gravity fed to the house.^
.
}

{tap
print:
   Tapping up and down the side of the tank with the knuckle of your 
   forefinger it would appear to be about half full.^
.
}

{shoot_with_your_rifle_override
print:
   Water is a bit too precious for that.^
.
}

object chapel_door : timber chapel door 
   short		a "chapel door"
   has			CLOSABLE CLOSED LOCKED

{break : attack
print:
   The chapel door is far too sturdy for you to break that way.^
.
}

{break_with_ironbar : attack_with_ironbar
print:
   You only manage to put a few shallow dents in the timber.^
.
}

{shoot_with_your_rifle_override
volume 100 foreground_channel
if interpreter = GLK
   sound sound_FiringRifle foreground_channel
else
   sound "/sounds/FiringRifle.ogg" "audio/ogg"
endif
set your_rifle(status) - 1
print:
   The slug embeds unhelpfully into the thick hardwood timber.^
.
}

{close_override
if here = back_of_house
   write "You push the door closed against the damaged frame.^"
else
   write "You pull the door closed against the damaged frame.^"
endif
set chapel(east) = nowhere
set back_of_house(west) = nowhere
ensure chapel_door has CLOSED
}

{open_override
write "You swing the chapel door open.^"
set chapel(east) = back_of_house
set back_of_house(west) = chapel
ensure chapel_door hasnt CLOSED
}

{examine
if chapel_door has CLOSED
   if chapel_door has LOCKED
      print:
         The door to the chapel is closed. There is a keyhole in the door 
         beside a large iron handle.^
      .
   else
      print:
         The door to the chapel is loosely closed against its splintered frame.
         The door's keyhole is flanked by rough holes where the rivets
         that attached the handle have been pulled out.^ 
      .
   endif
else
   print:
      The door to the chapel is open, the timber of the surrounding frame 
      splintered. The door's keyhole is flanked by two new holes where the 
      rivets that attached the handle have been pulled out.^ 
   .
endif
}

{shoot
}

object chapel_door_frame : timber chapel door frame
   short		a "chapel door frame"

{examine
if chapel_door hasnt LOCKED
   print:
      The timber of the door frame has splintered along the side of the lock.^
   .
else
   print:
      The frame around the door is made from a pale timber.^
   .
endif
}

{shoot_with_your_rifle_override
volume 100 foreground_channel
if interpreter = GLK
   sound sound_FiringRifle foreground_channel
else
   sound "/sounds/FiringRifle.ogg" "audio/ogg"
endif
set your_rifle(status) - 1
print:
   The slug embeds unhelpfully into the thick hardwood timber.^
.
}

{break : attack
print:
   The door frame is far too sturdy for you to break that way.^
.
}

{break_with_ironbar : attack_with_ironbar
print:
   You only manage to put a few shallow dents in the timber.^
.
}

object chapel_door_lock : timber chapel door lock keyhole large metal plate
   short		the "chapel door keyhole"

{look_through
if chapel_door has CLOSED
   if script_stage < 35 : script_stage > 60
      print:
         Through the keyhole you can vaguely make out some coloured light.^
	  .
   else
      print:
         You can see only darkness.^
      .
   endif
else
   print:
      With the door open you just see the outside wall of the chapel
      through the keyhole.^
   .
endif
}

{shoot_with_your_rifle_override
volume 100 foreground_channel
if interpreter = GLK
   sound sound_FiringRifle foreground_channel
else
   sound "/sounds/FiringRifle.ogg" "audio/ogg"
endif
set your_rifle(status) - 1
print:
   The slug ricochets off the thick metal plate of the lock alarmingly.^
.
}

{examine
print:
   The keyhole is relatively large and surrounded by a large metal plate.^
.
}

object chapel_door_handle : timber chapel door handle rivet rivets
   short		the "chapel door handle"
   parent		chapel_door

{examine
print:
   The door handle is a thick iron loop attached to the chapel door with an 
   iron rivet top and bottom.\
.
execute "+tied_to_me<chapel_door_handle"
write "^"
}

{turn
proxy "open chapel door"
}

object windmill_obj : windmill
   short		a "windmill"
   static

{climb_up : enter
proxy "up"
}

{examine
print:
   A narrow ladder runs up the back of the windmill's tall tapered frame 
   to a small observation platform near the blades. A driveshaft runs
   down the inside of the frame to an arrangement of machinery at ground
   level.^ 
.
}

object machinery : windmill's machinery shaft driveshaft pipes
   short		the "windmill's machinery"
   static

{examine
print:
  The windmill's driveshaft comes down into the cast-iron housing of a gearbox.
  On the left side of the gearbox is a pump with two pipes: one leading down
  underground, the other into the rainwater tank. On the right side of the 
  gearbox is a windlass for use as a general-purpose power take off from the
  windmill.^
.
}

object gearbox : windmill's gearbox
   short		a "gear box"
   static

{examine
print:
   The gearbox is a simple sturdy unit encased in thick cast iron. The 
   driveshaft of the windmill enters from the top and a pump and windlass
   are mounted on the sides. On the side of the windlass there is a small wheel
   to activate and deactivate the clutch.^
.
}

object clutch : windmill's gearbox clutch round wheel
   short		a "clutch wheel"

{examine
print:
   The wheel is also made from cast iron and is about six inches in 
   diameter. It can be turned to activate and deactivate the windlass's
   clutch.^
.
}

{turn
if clutch has ON
   proxy "turn wheel anticlockwise"
else
   proxy "turn wheel clockwise"
endif
}

{turn_on : turn_clockwise : close
if clutch has ON
   write "The clutch is already engaged and the windlass drum is turning.^"
   set time = false
   return
endif
ensure clutch has ON
volume 20 eachturn_channel
sound sound_Windlass eachturn_channel loop
print:
   You strain to turn the clutch wheel clockwise until the windlass
   drum starts to slowly rotate.
.
if frayed(tied_to) = windlass : whipped(tied_to) = windlass
   # ONE END IS TIED TO THE WINDLASS...
   ensure rope has WOUND
   if +rope_tied_to<chapel_door_handle = true
      execute "+door_opens"
      return
   else 
      print:
         Before long the entire length rope is wound around the drum
         of the windlass\
      .
      if rope is *held
         write ", pulling it out of your hands.^"
         move rope to here
      else
         write ".^"
      endif
   endif
endif
}

{turn_off : turn_anticlockwise : open
if clutch hasnt ON
   write "The clutch is already disengaged.^"
   set time = false
   return
endif
print:
   With some effort you turn the clutch wheel anticlockwise until the 
   windlass drum slows then stops.^
.
ensure clutch hasnt ON
}

object windlass : windmill's windlass brass drum winch
   short		a "windlass"

{examine
print:
   The windlass is a brass drum just over a foot long that protrudes 
   horizontally from the gearbox. Each end of the drum has a raised lip to 
   prevent any line attached from slipping off under load.\
.
set TEMP = "+tied_to_me<windlass"
ifall clutch has ON : TEMP = false
   write " The windlass drum is slowly turning."
endif
write " On the side of the windlass there is a small wheel to activate "
write "and deactivate the clutch.^"
}

object pump : windmill's water pump rust streaks seals
   short		a "water pump"
   static

{examine
print:
  Attached to the left side of the gearbox is an ancient water pump that
  is used to pump ground water into a large corrugated iron tank. Rust
  streaks run down the side of the pump from its failing seals to the
  ground.^
.
}

object chapel_obj : chapel
   short		a "chapel"
   static

{examine
print:
   The weatherboards of this modest timber chapel are peeling and in
   need of paint. There is 
.
if chapel_door has CLOSED
   write "a closed"
else
   write "an open"
endif
write " timber door at the northern end of the near wall.^"
}

{climb_up
print:
   The narrow width of the weatherboards makes it impossible to get a 
   foothold.^
.
}

object weatherboards : weatherboards weather boards planks cladding
   short	the "weatherboards"
   static

{remove : pull
print:
   The boards are securely fastened to the stud walls of the chapel.^
.
}

{break
print:
   The boards are made from solid Mahogony and very strong.^
.
}

location windmill : windmill lookout platform
   short		the "windmill"
   has			OUTDOORS
   down			back_of_house
   out			back_of_house

{movement
if compass = up
   write "You can't climb any higher.^"
   return
endif
if destination = nowhere
   write "The only way from here is back down.^"
   return
endif
if destination = back_of_house
   if clutch has ON
      volume 0 eachturn_channel
      sound sound_Windlass eachturn_channel loop
      set fade_in[eachturn_channel] = 20
   endif
endif
return false
}

{look
if here has VISITED
   # SAY NOTHING, AS THERE IS ALREADY A 'CLIMBING' MESSAGE DIPLAYED.
   return
endif
print:
   At the top of the ladder is a small observation platform on which you are
   now standing.
   From here you can see out over the house to the waters of Snake Bay and
   further inland towards the rising hills. 
   Two giant iron hoops are joined to a shaft by sturdy spokes. The blades of 
   the windmill sit angled between the inner and outer hoops.
   The iron blades of the windmill
.
if script_stage = on_melville
   write "turn slowly in the gentle breeze.^"
else
   write "turn rapidly in the gusting wind.^"
endif
}

object platform : observation platform
   short		an "observation platform"
   static

{examine
print:
   The observation platform is from timber planks attached to a steel frame
   and only a few feet across.^
.
}

location chapel : chapel
   short		the "chapel"
   east			back_of_house
   out			back_of_house

{look
if here has VISITED
   write "You step backed into the chapel.^"
   return
endif
print:
   The ridge beam of the chapel's steep-pitched roof runs north-south, 
   high above a centre aisle that divides two sets of plain timber pews. At the 
   front of the chapel the pulpit has been replaced by a large stack of timber 
   crates. 
.
if script_stage = on_melville
   print:
      Light from a circular stained-glass window set high up in the peak of the 
      northern wall projects an elongated pattern on the floor.
   .
endif
write "^"
}

{movement
if destination = nowhere
   print:
      The only way out is back to east.^
   .
   return true
endif
if destination = back_of_house
   if clutch has ON
      volume 0 eachturn_channel
      sound sound_Windlass eachturn_channel loop
      set fade_in[eachturn_channel] = 20
   endif
endif
return false
}

{eachturn
move chapel_door to here
}

object pattern : elongated light pattern
   short		a "pattern"
   static

object stained_glass_window : circular stained glass window
   short		a "stained glass window"
   has			OUT_OF_REACH
   static

object crates : stack of crates
   short		a "stack of crates"
   static

object jerrycan : steel diesel jerry can jerrycan
   short		a "steel jerrycan"
   long			function
   has			CONTAINER CLOSABLE CLOSED
   mass			15
   capacity		10

{long
if jerrycan hasnt TOUCHED
   print:
      A steel jerrycan stands by the crates.^
   .
else
   There is a jerrycan here.^
endif
}

{examine
print:
   The four gallon jerrycan is a copy of a new German design. 
   The word ~DIESEL~ is painted onto the side of the can.
.
execute "+details<jerrycan"
write "^"
}

object diesel : diesel fuel oil
   short		some "diesel"
   has			LIQUID
   mass			10
   parent		jerrycan

{take
write "You can't reach the diesel inside " diesel(parent){the} ".^"
set time = false
}

{pour_on_fuel_tank_override
print:
   You lift the jerrycan up and start to pour the diesel into the 
   generator's fuel tank.
.
if cut(status) = false
   print:
      You curse as you notice how fast it is running back out of the cut 
      at the bottom of the tank and stop pouring.^
   .
   return
else
   print:
      Although barely filling the bottom of the tank it should be enough
      to run the generator for several days.^
   .
   set diesel(parent) = fuel_tank
endif
}

{examine
if diesel(parent) = fuel_tank
   print:
      Although only enough to fill the bottom of the tank there should be
      enough to run the generator for a couple of day.^
   .
else
   print:
      The jerrycan is almost full of diesel.^
   .
endif
}

{smell
write "A strong and familiar smell.^"
}

location paddock : paddock
   short		the "paddock"
   has			OUTDOORS
   north		back_of_house
   in			outhouse
   west			churchyard

{look
if here has VISITED
   write "You have returned to the paddock.^"
   return
endif
print:
   The path from the house leads to the doorway of a timber outhouse at the
   northern edge of this large unfenced paddock. 
.
ifall script_stage > rain_started : script_stage < day_two
   write "Even with the rain and dim light, the "
else
   write "The "
endif
print:
   unmistakeable stain of dried blood covers a patch of grass by the 
   outhouse. Beside an old grasstree is a diesel generator sitting on a 
   small concrete slab. The generator is covered by a make-shift roof of 
   corrugated iron suspended by unmilled branches. To the west there is 
   a small churchyard.^^
   The strong smell of diesel fills your nostrils here.^
.
ensure churchyard has KNOWN
ensure outhouse has KNOWN
}

{eachturn
ifall miki is *present : generator hasnt FIRST 
   print: 
      ^~I don't like this balanda,~ Miki says staring at the patch of blood. 
      ~What if what happened to the other fellas happens to us?~^^
      ~I've been thinking about that too, Miki, we've just got to be careful
      and look out for each other. I think we should stay and try to get this
      generator working.~^
   .
   ensure generator has FIRST
endif
}

{movement
if destination = nowhere
   print:
      From here you can either go north back to the house, west to the
      churchyard or in to the outhouse.^
   .
   return true
endif
if generator has ON
   set fade_out[background_channel] = 10
endif
if clutch has ON
   volume 0 eachturn_channel
   sound sound_Windlass eachturn_channel loop
   set fade_in[eachturn_channel] = 20
endif
#ifall destination = outhouse : outhouse hasnt VISITED
#   print:
#      You walk into the male section of the outhouse.^^
#   .
#endif
return false
}

{hint
set time = false
if generator has ON
   print:
      The generator is running now, there is nothing else you need to 
      do here.^
   .
   return
endif
if $integer = 1
   if cut(status) = false
      print:
         You need to get the generator running again in order to use the
         radio. The first problem seems to be that the fuel tank has
         been damaged and drained of diesel.^
      .
   else 
      if diesel(parent) = fuel_tank
         if generator has PRIMED
            if bleed_plug has CLOSED
               write "You just need to start the generator now.^"
            else
               print:
                  The generator will loose prime if you try to start it
                  with the bleed plug still open.^
               .
            endif
         else
            print:
               As the generator had run dry, there will be air in the fuel
               lines so you will need to prime it before it can be started.^ 
            .
         endif
      else
         print:
            You will need to find some more diesel to put in the
            fuel tank now that the hole is plugged.^
         .
      endif
   endif
   return
endif
if $integer = 2
   if cut(status) = false
      print:
         You will need to put something in the hole in the tank,
         something soft that will form to the shape of the cut.^
      .
   else 
      if diesel(parent) = fuel_tank
         if generator has PRIMED
            if bleed_plug has CLOSED
               print:
                  You now just need to pull on the chord start the generator.^
               .
            else
               print:
                  Now the generator is primed you need to close the bleed 
                  plug before you can start it.^
               .
            endif
         else
            print:
               The priming lever is used to pump diesel up to the injectors,
               but the air in the lines needs to be able to escape as you
               pump.^ 
            .
         endif
      else
         print:
            Since the war started the chapel has been converted to a
            store room, you will find more diesel once you get in there.^
         .
      endif
   endif
   return
endif
if $integer = 3
   if cut(status) = false
      print:
         You can use several things to plug the cut in the tank such
         as your shirt, or some material from the sheet in the western
         sleeping quarters.^
      .
   else 
      if diesel(parent) = fuel_tank
         if generator has PRIMED
            if bleed_plug has CLOSED
               write "You just need to:^"
               execute "+command<pull chord"
            else
               write "The next step is to:^"
               execute "+command<close bleed plug"
            endif
         else
            print:
               You need to open the bleed plug then pump the priming
               lever until diesel comes out.^
            .
         endif
      else
         print:
            Use the hints for the back garden to find out how to get into
            the chapel.^
         .
      endif
   endif
   return
endif
if $integer = 4
   if cut(status) = false
      write "To block the cut in the tank you need to:^"
      execute "+command<insert shirt in cut"
      write "^or go to the western sleeping quarters and^"
      execute "+command<tear sheet"
      write "^then come back to the generator and^"
      execute "+command<insert triangle in cut"
   else 
      if diesel(parent) = fuel_tank
         if generator has PRIMED
            write "There is no level " $integer " hint for this location.^"
         else
            write "To prime the generator you need to:^"
            execute "+command<open bleed plug"
            execute "+command<pump priming lever"
         endif
      else
         print:
            Use the hints for the back garden to find out how to get into
            the chapel.^
         .
      endif
   endif
   return
endif
write "There is no level " $integer " hint for this location.^"
}


{sniff
write "The smell of diesel is strong here.^"
}

{listen
if generator has ON
   write "You can't hear anything over the sound of the generator.^"
else
   return false
endif
}

object grasstree : grasstree tree
   short		a "grasstree"
   static

{examine
print:
   The grasstree has a short palm-like trunk topped with a plume of long,
   thin spines.^
.
}

{climb_up
print:
   Grasstrees are far too short and insubstantial to climb.^
.

}

object japanese_shell : japanese small shell 255 casing
   short		a "small shell casing"
   mass			1
   parent		limbo

{examine
print:
   This brass shell casing is noticeably smaller than the .303 round used
   by your Lee Enfield.^
.
}

object blood_on_grass : patch of blood blood on grass
   short		a "patch of blood on the grass"
   static

{examine
print:
   You drop down onto one knee and take a closer look at the patch of blood
   on the grass. It is about the size of a dinner plate\
.
ifall script_stage > rain_started : script_stage < day_two
   write ", though less distinict now with the falling rain. "
else
   write " and probably only a day or two old. "
endif
if japanese_shell(parent) = limbo
   print:
      Amongst the blades of grass by the blood you notice a small shell casing 
      and pick it up.^
   .
   move japanese_shell to player
else
   write "^"
endif
}

{smell
write "The grass around the generator smells strongly of diesel.^"
}

object gen_roof : make-shift roof of corrugated iron suspended by unmilled branches over generator
   short		a "roof over the generator"
   static
   
{examine
print:
   The roof is crudely made yet still serves to keep the bulk of the rain off 
   the generator.^
.
}

object slab : concrete slab
   short		a "concrete slab"
   static

{examine
print:
   The concrete slab is only a few feet square, just large enough to
   hold the generator.^
.
}

object generator : diesel electrical generator engine motor genset
   short		a "diesel generator"

{examine
print:
   It is still possible to tell that the generator was once painted a pale 
   metallic blue, but it is now mostly covered in oil and rust. 
   On the top of the generator is a pull cord for starting it.
   A fuel line runs up the side of the generator to the fuel filter, on the 
   side of which is a priming pump lever. The fuel line then continues on to
   the injector pump. There is an air bleed plug on the side of the injector
   pump that is currently
.
if bleed_plug has CLOSED
   write "closed. "
else
   write "open. "
endif
print:
   Beside the generator stands a large square fuel tank.
.
if cut(status) = false
   print:
      Diesel dripping from a cut low down on the side of the tank
      below explains the strong smell in the air.^
   .
else
   write "The cut near the base of the tank is now filled by " 
   write cut(status){the} ".^"
endif
if generator has ON
   write "^The generator is running loudly.^"
else
   write "^The generator is currently off.^"
endif

}

{turn_on
proxy "pull cord"
}

{smell
write "The generator gives off an over-powering smell of grease and diesel.^"
}

{send_message_override
write "You tap out a short message on the morse key: "
write "~GENERATOR FUEL TANK DAMAGED. SUSPECT SABOTAGE. OUT.^"
execute "+message_sent"
}

object pull_cord : pull start starter starting cord blackened dowel handle
   short		a "pull cord"
   static

{examine
print:
   The end of the pull cord is attached to a short length of blackened dowel
   that serves as a makeshift handle. The remainder of the pull cord is 
   retracted into the housing of the generator.^
.
}

{pull
if generator has ON
   write "There is no need, the generator is already running.^"
   set time = false
else
   if generator has PRIMED
       if bleed_plug has CLOSED
          if interpreter = GLK
             volume 100 foreground_channel
             sound sound_GeneratorStarting foreground_channel
          else
             sound "/sounds/GeneratorStarting.ogg" "audio/ogg"
          endif
          print:
             You pull on the starter cord several times until the generator 
             roars to life in a thick plume of blue-grey smoke.^
          .
          ensure generator has ON
          if miki is *present
             print:
                ^Miki starts to cough and waves his hand in front of his face.
                ~I think it going now,~ he says with a laugh.^
             .
          endif
          ensure generator has SCORED
          points 10
       else
          if interpreter = GLK
             volume 100 foreground_channel
             sound sound_GeneratorFalseStart foreground_channel
          else
             sound "/sounds/GeneratorFalseStart.ogg" "audio/ogg"
          endif
          print:
             You pull on the starter cord several times but get only a loud
             sucking noise from the open bleed plug.^
          .
       endif
   else
       if interpreter = GLK
          volume 100 foreground_channel
          sound sound_GeneratorFalseStart foreground_channel
        else
          sound "/sounds/GeneratorFalseStart.ogg" "audio/ogg"
       endif
       print:
          You pull on the starter cord many times until your lower back
          starts to ache. The generator, however, doesn't even sound like
          starting.^
       .
   endif
endif
}

object fuel_line : fuel line
   short		the "fuel line"
   parent		generator
   static

{examine
print:
   The fuel line is made from annealed copper tubing.^
.
}

object fuel_filter : fuel filter
   short		the "fuel filter"
   static

{examine
print:
   The fuel filter is a combined particle filter and water separator.
.
write "Looking through the glass casing of the filter you can see "
if generator has PRIMED
   write "that it is filled with diesel.^"
else
   write "only air.^" 
endif
}

{attack_with_ironbar
if generator has ON
   print:
      Smashing the fuel filter won't help the generator to keep running.^
   .
else
   print:
      Smashing the fuel filter won't help get the generator started.^
   .
endif
return false
}

object primer_lever : priming pump lever 
   short		a "priming pump lever"
   static

{pull : turn : move : pump
ifall bleed_plug has CLOSED : generator hasnt PRIMED
   print:
      The priming lever becomes increasing difficult to pump as you go,
      but no fuel seems to be entering the filter.^
   .
   return
endif
if diesel(parent) = fuel_tank 
   ifall bleed_plug hasnt CLOSED : generator has PRIMED
      print:
         More diesel leaks out of the open bleed plug.^
      .
      return
      endif
   ifall bleed_plug hasnt CLOSED : generator hasnt PRIMED
      print:
         You pump the priming lever many times until the fuel filter fills
         with diesel and it starts to flow out of the open bleed plug.^
      .
      ensure generator has PRIMED
   endif
   ifall bleed_plug has CLOSED : generator has PRIMED
      print:
         The priming lever is almost impossible to move.^
      .
      return
   endif
else
   print:
      You pump the lever a few times with no obvious effect.^
   .
endif
}

object bleed_plug : air bleed plug valve
   short		an "air bleed plug"
   has			CLOSABLE CLOSED

{open
if generator has ON
   write "But you need the generator to keep running.^"
   set time = false
   return true
endif
return false 
}

object fuel_tank : fuel tank
   short		a "fuel tank"
   has			CONTAINER CLOSED CLOSABLE

{examine
print:
   The fuel tank is made from thin steel with folded and rivetted seams.
.
if fuel_tank has CLOSED
   print:
      A screw cap seals a short filler pipe on the top of the tank.
   .
else
   print:
      Resting on the top of the tank by the filler pipe is a screw cap.
   .
endif
if cut(status) = false
   print:
      Near the base of the tank is a cut where a strong knife or bayonette
      has been driven through the metal. The last few drops of diesel drip 
      slowly from the cut onto the ground.^ 
   .
else
   write "The cut near the base of the tank is now filled by " 
   write cut(status){the} ".^"
endif
}

{open_override
print:
   You unscrew the fuel cap and rest it on the top of the tank.^
.
ensure fuel_tank hasnt CLOSED
}

{fill
if jerrycan is *held
   proxy "pour jerrycan in tank"
else
   write "What would you like to fill the fuel tank with?^"
   setstring question "fill " noun1{the} " with "
   set time = false
endif
}

{fill_with_jerrycan : fill_from_jerrycan
proxy "pour jerrycan in tank"
}

object drips : drip dripping diesel fuel drips
   short		the "dripping diesel"
   has			LIQUID
   static

{examine
print:
   The final few drops of diesel are slowly falling onto the ground.^
.
}

{drink
print:
   You army boys are all the same.^
.
set time = false
}

object fuel_cap : fuel tank cap
   short		a "fuel cap"

{take : pull
print:
   The fuel cap is attached to the tank by a short chain and can't be taken.^
.
}

{open
proxy "open fuel tank"
}

{close
proxy "close fuel tank"
}

{turn
if fuel_tank has CLOSED
   proxy "open fuel tank"
else
   proxy "close fuel tank"
endif
}

object cut : hole cut in fuel tank
   short		a "cut in the fuel tank"
   has			CONTAINER
   capacity		100

{examine
if cut(status) = false
   print:
      The cut is approximately an inch and a half long and about an eighth of
      aninch wide. Diesel drips slowly from the cut.^ 
   .
else
   write "The cut near the base of the tank is now filled by " 
   write cut(status){the} ".^"
endif
}

object outhouse_obj : outhouse dunny
   short		the "outhouse"

{enter
proxy "in"
}

location outhouse : outhouse dunny
   short		the "outhouse"
   out			paddock

{look
if here has VISITED
   ifall script_stage > rain_started : script_stage < day_two
      write "You duck back into the outhouse to shelter from the rain.^"
   else 
      write "You are back inside the outhouse.^"
   endif
   return
endif
print:
   This outhouse is essentially a larger version of the traditional dunny,
   designed to accomodate the large number of people that once lived here. 
   A long plank with holes cut into it acts as a bench seat above a
   deep cesspit.^
.
volume 80 eachturn_channel
sound sound_Flies eachturn_channel
}

{movement
if destination = nowhere
   print:
      Back out into the paddock is the only way from here.^
   .
   return true
endif
set fade_out[eachturn_channel] = 20
if destination = paddock
   if generator has ON
      volume 0 background_channel
      sound sound_GeneratorRunning background_channel
      set fade_in[background_channel] = 75 # SLOWLY FADE UP TO 75%
   endif
   return false
endif
return false
}

object plank : long plank
   short		a "plank"
   static

{examine : look_through : *examine_holes : *look_through_holes
print:
   You resist the urge to look too closely.^ 
.
}

{take
print:
   I'm not sure you would want to take this plank even if you could.^
.
set time = false
}

object holes : holes
   short		some "holes"
   static

location churchyard : churchyard cemetery graveyard
   short		the "churchyard"
   has			OUTDOORS
   east			paddock

{look
if here has VISITED
   write "You have returned to the churchyard.^"
   return
endif
print:
   Without so much as a boundary fence, this churchyard is simply
   a collection of six or seven overgrown graves tucked behind the chapel. 
.
if @dig_in_fresh_grave = 0
   ifall script_stage > rain_started : script_stage < day_two
      print:
         A fresh grave with sodden bare soil is at the near edge.^
      .
   else
      print:
         A fresh grave with recently turned soil is at the near edge.^
      .
   endif
else
   ifall script_stage > rain_started : script_stage < day_two
      print:
         Rain runs down the pale skin of a figure lying face up in an 
         uncovered grave at the near edge.^
      .
   else
      print:
         A pale figure lies face up in an uncovered grave at the 
         near edge.^
      .
   endif
endif
}

object graves : collection of graves
   short		a "collection of graves"
   has			PLURAL
   static

{examine
print:
   The older graves are marked with either a modest timber cross or 
   Aboriginal funerary poles. 
.
if @dig_in_fresh_grave = 0
   print:
      The fresh grave has no marking at all.^
   .
else
   print:
      The pale body of an Australian soldier lies partially exposed in a 
      shallow grave.^
   .
endif
}

object crosses : modest timber crosses cross
   short		the "timber crosses"
   has			PLURAL
   static

object tutini : tutini funerary poles
   short		the "funerary poles"
   has			PLURAL
   static

{examine
print:
   The Aboriginal funerary poles are carved from ironwood and painted 
   red, black and yellow, the natural colours of the outback.^
.
}

object fresh_grave : fresh shallow grave recently turned loose soil
   short		a "fresh grave"
   static

{examine
if @dig_in_fresh_grave = 0
   print:
      The fresh grave is covered in loose soil and appears to have been
      dug recently.^
   .
else
   print:
      The pale body of an Australian soldier lies partially exposed in a 
      shallow grave.^
   .
endif
}

{send_message_override
if @dig_in_fresh_grave = 0
   print:
      You tap out a short message on the morse key:
      ~LOCATED FRESHLY DUG GRAVE SITE. OCCUPANT UNKNOWN.~^
      ^After a short pause a series of dits and dahs cut 
      through the static: ~COPY. DETERMINE CONTENTS AND REPORT. OUT~^
   .
   execute "+message_sent"
   return
endif
proxy "send message about steve"
}

{dig_in
if @ = 1
   print:
      You drop down to your knees and start to claw back the loose soil with
      your hands.
   .
   if miki is *present
      print:
         ^^~I don't like this, balanda. Its bad for us to wake the dead.~^^
         ~Do you think I like it?~ you snap at Miki. ~Do you think I want to
         be here doing this? I didn't start this bloody war and I didn't 
         kill whoever is buried under here.~^^ 
         You hang your head, sorry for having vented your anger on Miki.
         Breathing deeply you wipe your hand down your face. ~Christ
         Miki, imagine some young wife on the other side of the country 
         never knowing where her husband is or why he never came home.~^^
         As you sit in silence Miki kneels down beside you and starts to 
         carefully scrape away the soil with the blade of his woomera.^^
         The two of you work together, the rancid smell of death strong in
         your nostrils. Your job done, you both stare numbly at
         the lifeless torso of a uniformed Australian soldier lying on his
         back.^
      .
   else
      print:
         You dig deeper, the rancid smell of death strong in your nostrils. 
         A numbness comes over you uncover the lifeless torso of a uniformed 
         Australian soldier lying on his back.^
      .
   endif
   move body to here
else
   write "You have dug enough.^"
   set time = false
endif
}

object steves_dog_tags : steve steve's mcpherson's dog tags australian soldier dead body pale
   short		your "Steve's dog tags"
   long			"Steve's dog tags are here.^"
   has			WEARABLE PLURAL
   parent		limbo
   mass			1

{examine
print:
   Two stainless-steel identity discs, one circular, one octagonal
   attached to a thin leather cord.
   ~NX44117 C.E. MCPHERSON S B~ is stamped into the metal on both discs.^
.
}

object body : pale dead body australian soldier
   has			ANIMATE DEAD
   short		a "pale body"
   parent		limbo

{examine : *examine_steve
print:
   The grubby, ghost-white body of the soldier is lying face up in the
   shallow grave, a single bullet wound in his left shoulder. Although 
   still wearing his uniform shorts, his dog tags have been removed. 
   Pale white skin turns to dark blue-black bruising on his back where 
   his blood has pooled after death.^
.
}

{search
if brass_key(parent) = limbo
   print:
      ^A small lump in the pocket of the soldier's shorts catches your 
      attention and you gingerly reach inside to find a small brass key.^ 
   .
   move brass_key to player
else
   write "You find nothing new.^"
endif
}

{send_message_override
if body(parent) = limbo
   write "You aren't sure what to say.^"
   return
endif
write "You tap out a short message on the morse key: "
write "~LOCATED UNIDENTIFIED DECEASED CAUCASIAN MALE. AGE APPROX 25. OUT.~^"
write "^After a longer than usual pause a series of dits and dahs cut "
write "through the static: ~COPY. RETURN TO MAINLAND AT FIRST LIGHT. OUT.~^"
execute "+message_sent"
set script_stage = steve_reported
ensure body has SCORED
points 10
}

{take : move : *take_steve : *move_steve
print:
   He has been disturbed enough.^
.
}

{feel : *feel_steve
write "The body is stone cold.^"
}

{smell : *smell_steve
write "In this tropical heat the body is fast starting to decay.^"
}

{look_under : *look_under_steve
print:
   Pale white skin turns to dark blue-black brusing on the back of the body
   where his blood has pooled after death.^
.
}

object wound : single bullet wound
   short	name "bullet wound"
   parent   body

{examine : look_in
if slug(parent) = wound
   print:
      You look more closely at the bullet wound then gingerly separate the
      flesh with the tip of your finger. The slug is not deep, the bone not
      shattered, but the artery fatally severed.^
   .
else
   print:
      The wound is now wider and torn from removing the slug.^  
   .
endif
}

object slug : slug
  short		a "slug"
  parent	wound
  mass		1

{examine
if slug(parent) = wound
   print:
      The glint of a slug can be seen just inside the bullet wound.^
   .
else
   print:
      Slightly deformed from the impact, the slut is about 9mm in
      diameter.^
   .
endif
}

{take_with_pliers
if slug(parent) = wound
else
   proxy "take slug"
endif
}

{take : remove
if slug(parent) = wound
   write "The slug is firmly embedded in the wound against the shoulder bone.^"
endif
return false
}

object bone : shoulder bone
  short		a "bone"

{examine
print:
   From the little you can see it appears the bone is relatively undamaged.^
.
}

object steves_shorts : soldiers soldier's steves steve's uniform shorts
   short	name "soldier's shorts"
   parent	body
 
{remove
write "No.^"
set time = false
}

{examine
if brass_key(parent) = limbo
   print:
      ^A small lump in the pocket of the soldier's shorts catches your 
      attention and you gingerly reach inside to find a small brass key.^ 
   .
   move brass_key to player
else
   write "You find nothing new.^"
endif
}

object steve : steve mcpherson pale dead body australian soldier
   has			ANIMATE DEAD
   short		name "Steve"
   parent		limbo

{send_message_override
if steve(parent) = limbo
   write "You aren't sure what to say.^"
   return
endif
write "You tap out a short message on the morse key: "
write "~DECEASED CAUCASIAN MALE IDENTIFIED AS STEVE MCPHERSON. OUT.~^"
points 5
execute "+message_sent"
ensure steve has SCORED
}

object brass_key : small brass key
   short		a "small brass key"
   mass			5
   parent		limbo

{examine
print:
   The small brass key has no obvious markings on it.^
.
}

{insert_in_right_keyhole
if right_footlocker has LOCKED
   proxy "unlock right footlocker with key"
else
   proxy "lock right footlocker with key"
endif
}

{insert_in_left_keyhole
if left_footlocker has LOCKED
   proxy "unlock left footlocker with key"
else
   proxy "lock left footlocker with key"
endif
}

{insert_in_steves_keyhole
if footlocker has LOCKED
   proxy "unlock footlocker with key"
else
   proxy "lock footlocker with key"
endif
}

{turn
print:
   You hold the key in the air and practice turning it.^
.
}

object dan : dan foster
   short		name "Dan"
   has			ANIMATE
   long			function
   mass			heavy
   parent		limbo

{long
write "Dan is sitting tied to the chair.^"
}

object alex : alex green man soldier
   short		name "Alex"
   has			ANIMATE
   long			function
   mass			heavy
   parent		limbo

{long
write "Alex is standing nearby, nervously clutching his rifle.^"
}

{examine
print:
   Pale, troubled eyes peer though a fringe of blonde hair.^
.
}

{send_message_override
if alex(parent) = limbo
   write "You aren't sure what to say.^"
   set time = false
   return
endif
write "You tap out a short message on the morse key: "
write "~LOCATED ALEX GREEN. INJURED BUT ALIVE. OUT.~^"
execute "+message_sent"
points 5
ensure alex has SCORED
}

{ask_about_miki
if miki(parent) = bush
   print:
      ~Do you know where Miki is?~ you ask Alex.^^
      ~No,~ he replies with a shake of his head. ~He was gone before 
      I woke up.~^
   .
   return
endif
write "~You know him better than I do.~^"
}

location bush : bush

{look
}

# -----------------------------------------------------------------------------
# THE PLAYER
# -----------------------------------------------------------------------------

object kryten: myself self me davis
   short		name "yourself"
   has		ANIMATE
   quantity	100
   parent		outfield

{hint
set time = false
if $integer = 1
   print:
   .
   return
endif
if $integer = 2
   print:
   .
   return
endif
if $integer = 3
   print:
   .
   return
endif
write "There is no level " $integer " hint for this location.^"
}

{examine
print:
.
execute "+inventory"
}

{take
write "...seriously?"
set time = false
}

{attack : shoot_with_your_rifle : kick : shoot
write "With government rebates, therapy isn't as expensive as it seems.^"
}

object hat : wide brimmed hat
   short		the "wide brimmed hat"
   has		WORN WEARABLE
   mass		5
   parent		player

object dog_tags : dog tags
   short		your "dog tags"
   long		"You dog tags are here.^"
   has		WORN WEARABLE PLURAL
   parent		kryten
   mass		1

{examine : read
print:
   Two stainless-steel identity discs, one circular, one octagonal
   attached to a thin leather cord.
   ~NX45345 C.E. DAVIS A J~ is stamped into the metal on both discs.^
.
}

object shorts : davis' davis davis's my uniform khaki shorts
   short		name "your shorts"
   has		WORN WEARABLE
   parent		kryten
   mass			1

{remove
write "Perhaps The Down Dragon would be more to your taste?^"
set time = false
}

{examine
write "They are just plain khaki army-issue shorts.^"
}

# -----------------------------------------------------------------------------
# BEFORE FUNCTIONS
# -----------------------------------------------------------------------------

{+before
# STOP ANY SOUND THAT IS STILL PLAYING FROM THE PREVIOUS COMMAND IF IT IS
# ON THE FOREGROUND CHANNEL
if interpreter = GLK
   stop foreground_channel
endif
return false
}

{+before_tie_to
if noun1 = whipped : noun1 = frayed
   if noun1(tied_to) != nowhere
      write noun1{The} " is already tied to " noun1(tied_to){the} ".^"
      set time = false
     return
   endif
endif
if noun1 = rope
   if frayed(tied_to) = noun2 : whipped(tied_to) = noun2
      write "The rope is already tied to " noun2{the} ".^"
      set time = false
      return
   endif
   ifall frayed(tied_to) != nowhere : whipped(tied_to) != nowhere
      write "Both ends of the rope are already tied to something.^"
      set time = false
      return
   endif
   if frayed(tied_to) = nowhere
      proxy "tie frayed end of rope to " noun2{names}
   else
      proxy "tie whipped end of rope to " noun2{names}
   endif
   return
endif
return false
}

{+before_pour_on
if noun1 = jerrycan
   if diesel(parent) != jerrycan
      write "The jerrycan is empty.^"
      set time = false
   else
      if +not_held<jerrycan = true
         return
      endif
      if jerrycan has CLOSED
         proxy "open jerrycan"
      endif
      proxy "pour diesel in " noun2{names}
      return
   endif
endif
return false
}

{+before_tell_about
if script_stage = during_raid
   write "Now isn't a good time to start a conversation.^"
   return
endif
return false
}

{+before_ask_about
ifall script_stage = during_raid : noun2 != settingtool : noun2 != shell
   write "Now isn't a good time to start a conversation.^"
   return
endif
return false
}

{+before_talk_to
if script_stage = during_raid
   write "Now isn't a good time to start a conversation.^"
   return
endif
return false
}

# -----------------------------------------------------------------------------
# AFTER FUNCTIONS
# -----------------------------------------------------------------------------

{+after_untie
if time = true
   if noun1 = rope : noun1 = frayed : noun1 = whipped
      ensure rope hasnt WOUND
   endif
endif
}

{+after_tie_to
if time = true
   if noun1 = rope : noun1 = frayed : noun1 = whipped
      ensure rope hasnt WOUND
   endif
endif
       
#ifall frayed(tied_to) != nowhere : whipped(tied_to) != nowhere
   # DROP THE ROPE NOW BOTH ENDS ARE TIED TO SOMETHING
#   move rope to here
#endif 
}

# -----------------------------------------------------------------------------
# DEFAULT FUNCTIONS
# -----------------------------------------------------------------------------

{+default_lie_on
if script_stage < rain_started : script_stage > alex_arrives
   write "But you aren't tired yet.^"
   return
endif
if noun1 = lounge_chair
   print:
      You lie down on the lounge chair with a groan and close your eyes.
   .
   execute "+alex_arrives"
   return
endif
if noun1 = left_bunk : noun1 = right_bunk : noun1 = steves_bunk
   print:
      You lie down on the bunk with a groan and close your eyes.
   .
   execute "+alex_arrives"
   return
endif
return false
}

{+default_throw_at
if noun2 = aircraft
   write "You throw " noun1{the} " at the aircraft. Unfortunately it falls "
   write "back to the ground about fourteen thousand feet short of its "
   write "target.^"
   move noun1 to here
   return true
endif
if noun2 = canoe
   write noun1{The} " bounces off the canoe and disappears into the water.^"
   move noun1 to limbo
   return
endif
if noun2 = radio_window : noun2 = east_sleeping_window 
   proxy "break window"
   return
endif
return false
}

{+default_listen
if script_stage = during_raid
   print:
      You hear the sound of the approaching aircraft and exploding bombs.^
   .
   return
endif
if script_stage = tally_ho
   print:
      You hear the sound of aircraft above.^
   .
   return
endif
return false
}

{+default_give_to
if noun2 = jenkins
   if noun1 != shell
      write "~What are you playing at Davis!~ Jenkins yells as he tosses "
	  write noun1{the} " to the ground.^"
	  move noun1 to gun_emplacement
      return
   endif
endif
return false
}

{+default_insert_in
if noun2 = cut
   write noun1{The} " isn't suitable for plugging the cut.^"
   set time = false
   return
endif
return false
}

{+default_ask_about
if noun1 = miki
   set max_rand = 4
   set TEMP = random
   if TEMP = 1  
      write "Miki just shrugs.^"
      return
   endif
   if TEMP = 2
      write "~I don't knowing much about that, balanda,~ Miki says quietly.^"
      return
   endif
   if TEMP = 3
      write "Miki smiles, not sure what to say.^"
      return
   endif
   if TEMP = 4
      write "Miki shakes his head. ~I'm not knowing, balanda.~^"
      return
   endif
endif
return false
}

# -----------------------------------------------------------------------------
# GRAMMAR SYNONYMS
# -----------------------------------------------------------------------------

grammar man *location		>go_to

# -----------------------------------------------------------------------------
# GLOBAL FUNCTIONS
# -----------------------------------------------------------------------------

{+command
write "  ] "
style input
write string_arg "^"
style normal
}

{+message_sent
if interpreter = GLK
   sound sound_MorseCodeShort foreground_channel
else 
   sound "/sounds/MorseCodeShort.ogg" "audio/ogg"
endif
if noun1 != 0
   ensure noun1 has REPORTED
endif
}

{+rope_tied_to
if frayed(tied_to) = arg[0] : whipped(tied_to) = arg[0]
   return true
endif
return false
}

{+movement
if frayed(tied_to) != nowhere : whipped(tied_to) != nowhere
   if rope(parent) = player
      write "You let go of the rope.^^"
      move rope to here
   endif
endif
return false
}

{+sleep
if here = hut
   write "You are far from sleepy right now.^"
   set time = false
   return
endif
if script_stage < rain_started	: script_stage > alex_arrives
   write "You aren't tired at the moment.^"
   set time = false
   return
endif
if here = east_sleeping 
   proxy "lie on bunk"
   return
endif
if here = west_sleeping
   proxy "lie on left bunk"
   return
endif
if here = lounge_room
   proxy "lie on lounge"
   return
endif
write "There is no where comfortable to sleep here.^"
set time = false
return
}

integer turn_paged_at

{+sound_finished
if script_stage => tally_ho
   if arg[0] = sound_ArtilleryWithExplosion
      volume 25 timed_channel
	  sound sound_AircraftBattle timed_channel
   endif
endif
ifall arg[0] = sound_GeneratorStarting : here = paddock
   sound sound_GeneratorRunning loop
endif
if next_sound != false
   sound next_sound timed_channel
   set next_sound = false
endif
}

integer timer_count 0

{+timer
set timer_count + 1

set INDEX = 0
while INDEX < @fade_out
   if fade_out[INDEX] != 0
	  set COUNTER = volume[INDEX]
      set COUNTER - fade_out[INDEX]
      volume COUNTER INDEX
      if COUNTER < 1
         set fade_out[INDEX] = 0
         stop INDEX
      endif
   endif      
   set INDEX + 1
endwhile

set INDEX = 0
while INDEX < @fade_in
   if fade_in[INDEX] != 0
	  set COUNTER = volume[INDEX]
      set COUNTER + 5 # THIS IS DODGY -- HARDCODED FADE RATE
      volume COUNTER INDEX
      if COUNTER >= fade_in[INDEX]
         set fade_in[INDEX] = 0
      endif
   endif      
   set INDEX + 1
endwhile

if timer_count < 6
   return
endif

# Every sixth call (3 seconds) continue to player approriate sounds
set timer_count = 0

# The falling bombs...
if script_stage = during_raid
   if random > 65
      volume random timed_channel
      sound sound_Explosion timed_channel
   endif
   return
endif

# Thunder during the storm
if script_stage = storm_started
   if random > 65
      volume random timed_channel
      sound sound_Thunder timed_channel
   endif
   return
endif

}

{+eachturn
if witheridge(parent) != command_post
   if witheridge(parent) = here
      write ^
   endif
   execute "+push_object<witheridge<north"
endif
ifall script_stage < after_raid : here has OUTDOORS
   move aircraft to here
else
   move aircraft to limbo
endif
if here has OUTDOORS
   move harbour to here
else
   move harbour to limbo
endif
ifall script_stage > during_raid : script_stage < after_raid
   set script_stage + 1
   ifall script_stage = player_paged : @+mission_briefing = 0
      print:
         ^~Gunner Davis report to the command post,~ announces the loud hailer\
      .
      if here = gun_emplacement
         print:
            |to a chorus of jeers from the other gunners. ~Trouble again, eh, 
            Davis?~ Jenkins calls with much delight\
         .
      endif
      write ". You shrug to yourself and wonder what you have done this time.^"
      set turn_paged_at = total_moves
   endif
   if script_stage = after_raid
      move aircraft to limbo
      move smith to gun_emplacement
      set smith(mass) = scenery
      set jenkins(mass) = scenery
   endif
endif
ifall script_stage => on_melville : script_stage < day_two
   if miki(parent) = player(parent)
      set max_rand = 100
      if random > 90
         execute "+wander<miki"
      endif
   else 
	  execute "+push_to<miki<player(parent)"
   endif
endif
ifall script_stage >= steve_reported : script_stage < alex_arrives
   set script_stage + 1
endif
ifall script_stage >= storm_started : script_stage < after_dark
   execute "+storm_started"
endif
ifall script_stage >= getting_tired : script_stage < alex_arrives
   execute "+getting_tired"
endif
if here hasnt OUTDOORS
  set north_wall(parent) = here
  set south_wall(parent) = here
  set east_wall(parent) = here
  set west_wall(parent) = here
else
  set sky_obj(parent) = here
endif
set ground(parent) = here
}

{+storm_started
set INDEX = script_stage - storm_started
if INDEX = 0
   write "^The faint sound of thunder can be heard in the distance.^"
   if interpreter = GLK
      volume 85 global_channel
      sound sound_Thunder global_channel
   else
      sound "/sounds/Thunder.ogg" "audio/ogg"
   endif
endif
if INDEX = 2
   write "^You surroundings darken as the evening sky turns slate-grey.^"
endif
if INDEX = 3
   write "^The sun begins to set as flashes of lightening arc in the "
   write "distance.^"
endif
if INDEX = 5
   volume 0 global_channel
   sound sound_Rain global_channel loop
   set fade_in[global_channel] = 50
   if here has OUTDOORS
      if helmet has WORN
         print:
            ^You pull your helmet down as thick slow drops of tropical 
            rain begin to fall.^
         .
      else
         print:
            ^You cover your head as thick slow drops of tropical 
            rain begin to fall.^
         .
      endif
   else
      print:
         ^Thick drops of tropical rain begin to fall loudly onto the
         tin roof above your head.^
      .
   endif
endif
if INDEX = 6
   if here has OUTDOORS
      if helmet has WORN
         print:
            ^Thick drops give way to a torrential downpour making it
            hard to see through the sheet of water running off the
            brim of your helmet.^
         .
      else
         print:
            ^Thick drops give way to a torrential downpour turning
            the ground beneath your feet to mud.^
         .
      endif
   else
      print:
         ^Thick drops give way to the cacophony of a torrential downpour 
         striking the tin roof above your head.^
      .
   endif
endif
if INDEX > 6
   set max_rand = 5
   set TEMP = random
   if here has OUTDOORS
      if TEMP = 1
         write "^Heavy rain continues to soak your body.^"
      endif
      if TEMP = 2
         write "^Strong gusts of wind drive angled rain against your face.^"
      endif
      if TEMP = 3
         write "^Torrential rain continues to bucket down from above.^"
      endif
   else 
      if TEMP = 1
          write "^Heavy rain continues to pound the roof.^"
      endif
      if TEMP = 2
         write "^Strong gusts of wind drive angled rain through the windows.^"
      endif
      if TEMP = 3
         write "^Outside, torrential rain continues to bucket down from above.^"
      endif
   endif
endif
}

{+getting_tired
set INDEX = script_stage - getting_tired
if INDEX = 0
   print:
      ^You yawn loudly, starting to realise how tired you are after
      a long hard day.^
   .
endif
if INDEX = 4
   print:
      ^You attempt to blink your eyes back into focus as your eye 
      lids become tired and heavy.^
   .
endif
if INDEX = 8
   print:
      ^You stumble slightly, rapidly succumbing fatigue.^
   .
endif
if INDEX = 12
   print:
      ^The need to sleep is now almost irresitable.^
   .
endif
if INDEX = 14
   if here has OUTDOORS : here = outhouse
      print:
         Unable to carry on any longer you head back into the house, wipe
         the rain from your face and lay down on the lounge.^^
      .
      move player to lounge_room
      execute "+alex_arrives"
      return
   endif
   if here = lounge_room
      print:
        Unable to carry on any longer you colapse onto the lounge and
        close your eyes.^^
      .
      execute "+alex_arrives"
      return
   endif
   if here = east_sleeping
      print:
        Unable to carry on any longer you colapse onto the bunk and
        close your eyes.^^
      .
      execute "+alex_arrives"
      return
   endif
   if here = west_sleeping
      print:
        Unable to carry on any longer you colapse onto the closest bunk and
        close your eyes.^^
      .
      execute "+alex_arrives"
      return
   endif
endif
}

{+alex_arrives
print:
   ^^Your thoughts fall out of your control as you sink deeper down, closer to 
   sleep. In your mind's eye you see the dead soldier in his shallow grave, a 
   ghost of flesh and stagnant blood. ~Wake up,~ you sliently urge -- you both 
   lay still in the darkness...^^
.
more
clear
if interpreter = GLK
   sound sound_RifleCocking foreground_channel
else
   sound "/sounds/RifleCocking.ogg" "audio/ogg"
endif
print:
   The sound of a rifle cocking jolts you awake. Your heart beats hard against
   your chest as you scan the darkness. At first you see nothing, then
   a flash of lightening momentarily illuminates the figure of a man holding
   a rifle standing only feet from you.^^
   ~Who are you?~ he asks, his Australian accent laced with confusion and
   uncertainty.^^
   ~I'm on your side,~ you stammer, slowly raising one hand in the air and
   touching your dog tags with the other.^^
.
if here != lounge_room
   print:
      The man turns away from you and walks out into the hallway towards the
      lounge room. Miki, sitting silently against the wall, stares at you with
      wide open eyes. Your expression tells him you are as unsure as he is as
      you stand and cautiously head into the lounge room.^^
   .
   move player to lounge_room
else
   print:
      Miki, sitting silently against the wall, stares at you with
      wide open eyes. Your expression tells him you are as unsure as he is.^^
  .
endif
if hutch has CLOSED
   print:
      The man opens the door to the hutch and reaches in amongst the clutter
   .
else
   print:
      The man walks over to the hutch and reaches in amongst the clutter
   .
endif
print:
   to produce a single glass and a half-empty bottle of gin. He sits down on
   the edge of coffee table and pours his glass almost to the rim. His fingers 
   around the top of the glass he takes a sip from between his thumb and
   forefinger. He crosses his legs as he shakily produces a packet of 
   cigarettes from his pocket. He lights one with a match then offers
   you the packet. You shake your head silently.^^
   ~He's dead,~ the man says finally as he brushes ash from his knee with the
   back of his hand. ~The Japanese killed him. I saw it.~^^
   You begin to survey the man before you: his sandy blonde hair is soaked with
   rain, he is clearly confused and distressed. Dried blood on his leg remains 
   despite the downpour.^^
   ~You're hurt,~ you say finally.^^
   ~Bugger shot me too,~ he replies as he draws a loud sip form his glass. 
   ~Steve was up close though, he didn't miss Steve.~^^
   ~The dead man in the church yard?~ you ask.^^
   ~Yeah, I burried him yesterday. Poor bastard, point blank I reckon,
   he never had a chance. The Jap, he fired at Dan and me so I 
   fired back and he ran. He got my leg so I was slow, but when I got to 
   Steve was he dead, gone already.~^^
   ~Where is Dan now?~^^
   ~He kept on after the Jap; I went back inside to dress my wound. Later I 
   heard the boat start and the sound of smashing timber. I limped down to
   the beach just in time to see Dan chasing the Jap into the bush at the east
   end of the beach and our boat sinking not far from the shore. With my leg I 
   can't keep up so I come back to the house for the rest of the night.~^^
   ~Last night, Alex? I presume that is who you are?~^^
   ~Yeah. I went out looking during the day but I can't see no sign of 
   either of them.~^^
   ~In the morning,~ you say placing your hand on Alex's shoulder, ~we'll all
   look.~^^
   Miki looks from you to Alex and back again then smiles encouragingly.^^
.
more
set fade_out[global_channel] = 10
move alex to here
move miki to bush
move body to limbo
move steve to churchyard
set script_stage = day_two
clear
print:
   After an uneasy night's sleep you awake to see Alex gazing out the front door 
   towards the bay, still clutching his rifle. Miki is nowhere to be seen.^
.
}

{+no_light
write "It is too dark to see.^"
set time = false
}

string status_text

{+update_status_window
execute "+reverse_window"
style reverse
if script_stage = intro
   execute "+print_centred<The Bloody Guns<0"
   return
endif
cursor 1 0
write here{The}
setstring status_text "Score: " score " Moves: " total_moves
execute "+print_right<status_text<0"
style normal
}

object mission : mission assignment
   short		the "mission"
   parent		limbo

object melville_obj : melville island observation post outpost snake bay
   short		name "Melville Island"
   parent		limbo

object sky_obj : sky skies
   short		the "sky"
   has			OUT_OF_REACH NO_TAB
   
{examine
proxy "look up"
}

{+game_over
style note
write "^^The story is over.^^"
style normal
execute "+full_score"
loop
   if noun3(parent) = player
     set noun3(parent) = limbo
   endif
endloop
set player(parent) = prologue
write "^"
execute "+look_around"
}

object north_wall: north north wall
   short		the "north wall"
   has			NO_TAB
   plural		walls

object south_wall: south southern wall
   short		the "south wall"
   has			NO_TAB
   plural		walls

object east_wall: east eastern wall
   short		the "east wall"
   has			NO_TAB
   plural		walls

object west_wall: west western wall
   short		the "west wall"
   has			NO_TAB
   plural		walls

object ground: ground floor
   short		the "ground"
   has			SURFACE NO_TAB

{+bootstrap
if interpreter = CGI
   setstring command_prompt ""
endif
}

# CONSTANTS FOR THE WEB INTERFACE LIBRARY
constant title_image "/images/bloodyguns.png"
constant footer_image "none"
constant header_colour "#8e987e"
constant linkbar_colour "#454030"
constant maintext_colour "#fdf1e5"

#debug "debug.library"
#include "webinterface.library"
#include "webinterface.css"
#include "npc.library"
#include "menu.library"
#include "utils.library"
#include "verbs.library"
