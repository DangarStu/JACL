#!../bin/jacl

synonym january					1
synonym jan						1
synonym february				2
synonym feb						2
synonym march 					3
synonym mar	 					3
synonym april					4
synonym apr						4
synonym may						5
synonym may						5
synonym june					6
synonym jun						6
synonym july					7
synonym jul						7
synonym august					8
synonym aug						8
synonym september				9
synonym sep						9
synonym october					10
synonym oct						10
synonym november				11
synonym nov						11
synonym december				12
synonym dec						12

integer this_year
integer this_month
integer this_date
integer this_day
integer now
integer epoch					# THIS THE CURRENT 'SELECTED' DATE
integer gmt
integer year
integer month
integer date
integer INDEX
integer COUNTER
integer epochtemp
integer temp
integer max_days
integer rc

string display_buffer
string search_string

integer	contacts				0
integer current_contact			0

string_array contact_name		40		"EMPTY"
string_array contact_address	40
string_array contant_number 	40
string_array contact_email		40

integer meetings				0
integer current_meeting			0

string_array meeting_name		40 		"EMPTY"
string_array meeting_place		40
integer_array meeting_time		40

integer tasks					0
integer current_task			0

string_array task_content		40		"EMPTY"
integer_array task_priority		40
integer_array task_due			40

integer notes					0
integer current_note			0

string_array note_content		40 		"EMPTY"
integer_array note_date			40

integer display_calendar		false

{+intro
clear
execute "+restore_diary"
style subheader
write "^JACL Diary v0.1^"
write "Type 'help' for commands.^"
style normal
if interpreter = NDS
   set now = unixtime
else
   set gmt = unixtime
   set now = +adjusted_time<gmt
endif
execute "+process_epoch<now"
# STORE ALL THE REQUIRED INFO ABOUT TODAY
set this_year = TIME_year
set this_month = TIME_month
set this_date = TIME_date
set this_day = TIME_day
set display_calendar = true
}

grammar blankjacl >help
grammar help >help

{+help
style subheader
write "COMMANDS:^"
style normal
write "add    [ note | task | meeting | contact ]^"
write "delete [ note | task | meeting | contact ] <#>^"
write "show   [ note | task | meeting | contact ] <#>^"
write "list   [ notes | tasks | meeting | contacts ]^"
write "search [ notes | tasks | meeting | contacts ] <string>^"
write "cal    <month> (<year>)^"
write "time^"
}

grammar add note $string	>add_note_content
grammar a n $string			>add_note_content

{+add_note_content
set current_note = 0
while current_note < 40
  ifstring note_content[current_note] = "EMPTY"
     break
  endif
  set current_note + 1
endwhile
if current_note = 40
   write "There are no empty spaces left to store notes in.^"
   return
endif
setstring note_content[current_note] = $string
set note_date[current_note] = now
write "Note " current_note " stored.^"
set notes + 1
execute "+save_diary"
}

grammar add note	>add_note
grammar a n			>add_note

{+add_note
set current_note = 0
while current_note < 40
  ifstring note_content[current_note] = "EMPTY"
     break
  endif
  set current_note + 1
endwhile
if current_note = 40
   write "There are no empty spaces left to store notes in.^"
   return
endif
write "Enter your note^: "
getstring note_content[current_note]
set note_date[current_note] = now
write "Note " current_note " stored.^"
set notes + 1
execute "+save_diary"
}

grammar current note	>current_note
grammar c n				>current_note

{+current_note
write "The current note is " current_note ".^"
}

grammar show note		>show_note
grammar s n				>show_note

{+show_note
write "[NOTE #" current_note "] " note_date[current_note]{full_date} "^"
write note_content[current_note]  "^"
}

grammar show note $integer	>show_note1
grammar s n $integer		>show_note1

{+show_note1
write "[NOTE #" $integer "] " note_date[$integer]{full_date} "^"
write note_content[$integer]  "^"
}

grammar list notes	>list_notes
grammar l n 		>list_notes

{+list_notes
set INDEX = 0
while INDEX < 40
  ifstring note_content[INDEX] != "EMPTY"
     write "[" INDEX "] " note_content[INDEX] "^"
  endif
  set INDEX + 1
endwhile
write "^Total notes: " notes "^"
}

grammar delete note	>delete_note
grammar d n			>delete_note

{+delete_note
ifstring note_content[current_note] = "EMPTY"
   write "Note #" current_note " is already blank.^"
   return
endif
write "[NOTE #" current_note "] " note_date[current_note]{full_date} "^"
write note_content[current_note]  "^"
write "Are you sure?"
getyesorno temp
if temp = 1
   setstring note_content[current_note] "EMPTY"
   set notes - 1
   execute "+save_diary"
else
   write "Note kept.^"
endif
}

grammar delete note	$integer	>delete_note1
grammar d n $integer			>delete_note1

{+delete_note1
ifstring note_content[$integer] = "EMPTY"
   write "Note #" $integer " is already blank.^"
   return
endif
write "[NOTE #" $integer "] " note_date[$integer]{full_date} "^"
write note_content[$integer]  "^"
write "Are you sure?"
getyesorno temp
if temp = 1
   setstring note_content[$integer] "EMPTY"
   set notes - 1
   execute "+save_diary"
else
   write "Note kept.^"
endif
}

grammar search notes $string	>search_notes_string
grammar s n $string				>search_notes_string

{+search_notes_string
set INDEX = 0
set temp = 0
write "Matching notes: "
while INDEX < 40
   ifstring note_content[INDEX] contains $integer
      write INDEX " "
   endif
   set INDEX + 1
   set temp + 1
endwhile
if temp = 0
   write "no matches found.^"
else
   write "^"
endif
}

grammar search notes	>search_notes
grammar s n 			>search_notes

{+search_notes
write "Enter your search string^: "
getstring search_string
set INDEX = 0
set temp = 0
write "Matching notes: "
while INDEX < 40
   ifstring note_content[INDEX] contains search_string
      write INDEX " "
   endif
   set INDEX + 1
   set temp + 1
endwhile
if temp = 0
   write "no matches found.^"
else
   write "^"
endif
}

grammar add task	>add_task
grammar a t			>add_task

{+add_task
set current_task = 0
while current_task < 40
  ifstring task_content[current_task] = "EMPTY"
     break
  endif
  set current_task + 1
endwhile
if current_task = 40
   write "There are no empty spaces left to store tasks in.^"
   return
endif
write "Enter your task^: "
getstring task_content[current_task]
write "Set your task's priority^"
getnumber task_priority[current_task] 1 5
write "Task " current_task " stored.^"
set tasks + 1
execute "+save_diary"
}

grammar list tasks >list_tasks

{+list_tasks
set INDEX = 0
while INDEX < 40
  ifstring task_content[INDEX] != "EMPTY"
     write "[" INDEX "] " task_content[INDEX] "^"
     write "PRIORITY: " task_priority[INDEX] "^"
  endif
  set INDEX + 1
endwhile
write "^Total tasks: " tasks "^"
}

grammar add contact	>add_contact
grammar a c			>add_contact

{+add_contact
set current_contact = 0
while current_contact < 40
  ifstring contact_content[current_contact] = "EMPTY"
     break
  endif
  set current_contact + 1
endwhile
if current_contact = 40
   write "There are no empty spaces left to store contacts in.^"
   return
endif
write "Enter the contact's name^: "
getstring contact_name[seach_index]
write "Enter the contact's address:^: "
getstring contact_address[seach_index]
write "Enter the contact's phone number:^: "
getstring contact_phone[seach_index]
write "Enter the contact's email address:^: "
getstring contact_email[seach_index]
write "Contact " current_contact " stored.^"
set contacts + 1
execute "+save_diary"
}

{+save_diary
savegame rc "jacldiary.sav"
if rc = false
   write "Error saving diary data.^"
endif
}

{+restore_diary
restoregame rc "jacldiary.sav"
}

location diary : diary

object user : me myself
  short		name "yourself"
  player

integer first_day
integer first_date

{+cal 
execute "+process_epoch<arg[0]"
if TIME_leapyear = true
   set max_days = TIME_CONST_daynumleap[TIME_month]
else
   set max_days = TIME_CONST_daynum[TIME_month]
endif
style subheader
write arg[0]{month} " " arg[0]{year} "^"
write "Su Mo Tu We Th Fr Sa^"
style normal
style pre
if TIME_date != 0 # FIND OUT THE FIRST DAY OF THE MONTH
   set first_day = TIME_day 
   set first_date = TIME_date
   while first_date > 1
      set first_date - 1
      set first_day - 1
      if first_day < 0
         set first_day = 6
      endif 
   endwhile
else
   set first_day = TIME_day
endif
set temp = 3 * first_day
padstring display_buffer " " temp
write display_buffer
set INDEX = 1
while INDEX =< max_days
   ifall INDEX = this_date : TIME_month = this_month : TIME_year = this_year
      flush
      style subheader
      write INDEX{padded}
      flush
      style normal
      style pre
   else
      write INDEX{padded}
   endif
   set INDEX + 1
   set first_day + 1
   if first_day = 7
      set first_day = 0
      if INDEX =< max_days
         write "^"
      endif
   endif
endwhile
write "^"
}

grammar cal >cal1

{+cal1
execute "+cal<epoch"
}

grammar cal $integer >cal2

{+cal2
if $integer[0] < 1 : $integer[0] > 12
   write "FIRST ARGUMENT: Expected month between 1 and 12.^"
   return
endif
set month = $integer[0] - 1
set epochtemp = +get_seconds_for_date<0<month<this_year
execute "+cal<epochtemp"
}

grammar cal $integer $integer >cal3

{+cal3
if $integer[0] < 1 : $integer[0] > 12
   write "FIRST ARGUMENT: Expected month between 1 and 12.^"
   return
endif
if $integer[1] < 1970 : $integer[0] > 2038
   write "SECONDS ARGUMENT: Expected year between 1970 and 2038.^"
   return
endif
set month = $integer[0] - 1
set year = $integer[1]
set epochtemp = +get_seconds_for_date<0<month<year
execute "+cal<epochtemp"
}

grammar time >time

{+time
if interpreter = NDS
   set epoch = unixtime
else
   set gmt = unixtime
   set epoch = +adjusted_time<gmt
endif
write "The current time is " epoch{time} ".^" 
}

grammar date >date

{+date
set epoch = unixtime
execute "+process_epoch<epoch" 
write "Date set to " epoch{full_date} ".^"
}

grammar epoch >epoch

{+epoch
write "Date set to " epoch{full_date} ".^"
}

grammar date $integer >date1

{+date1
if $integer[0] < 1 : $integer[0] > 31
   write "FIRST ARGUMENT: Expected day between 1 and 31.^"
   return
endif
set date = $integer - 1
set epoch = +get_seconds_for_date<date<this_month<this_year
write "Date set to " epoch{full_date} ".^"
}

grammar date $integer $integer >date2

{+date2
if $integer[0] < 1 : $integer[0] > 31
   write "FIRST ARGUMENT: Expected day between 1 and 31.^"
   return
endif
if $integer[1] < 1 : $integer[1] > 12
   write "SECOND ARGUMENT: Expected month between 1 and 12.^"
   return
endif
set date = $integer[0] - 1
set month = $integer[1] - 1
set epoch = +get_seconds_for_date<date<month<this_year
write "Date set to " epoch{full_date} ".^"
}

grammar date $integer $integer $integer >date3

{+date3
if $integer[0] < 1 : $integer[0] > 31
   write "FIRST ARGUMENT: Expected day between 1 and 31.^"
   return
endif
if $integer[1] < 1 : $integer[1] > 12
   write "SECOND ARGUMENT: Expected month between 1 and 12.^"
   return
endif
if $integer[1] < 1970 : $integer[0] > 2038
   write "THIRD ARGUMENT: Expected year between 1970 and 2038.^"
   return
endif
set date = $integer[0] - 1
set month = $integer[1] - 1
set year = $integer[2]
set epoch = +get_seconds_for_date<date<month<year
write "Date set to " epoch{full_date} "^"
}

{+macro_padded
if arg[0] < 10
   setstring return_value " "
   addstring return_value arg[0]
   addstring return_value " "
else
   setstring return_value arg[0]
   addstring return_value " "
endif 
}

{+update_top_screen
if display_calendar = true
   style note
   cursor 1 0
   write now{full_date} "^^"
   style normal
   execute "+cal<now"
   write "^"
   set temp = this_month + 1
   set epochtemp = +get_seconds_for_date<0<temp<this_year
   execute "+cal<epochtemp"
   set display_calendar = false
endif
}

integer status_window 18

{+update_status_window
cursor 1 0
write now{full_date} "^^"
execute "+cal<now"
write "^"
set temp = this_month + 1
set epochtemp = +get_seconds_for_date<0<temp<this_year
execute "+cal<epochtemp"
}

#include "time.library"
