#!../bin/jacl

integer multi
integer argument


integer my_array 24 123,	3 4,	68 76
integer my_array 78 45,		6 14,	12 66
integer my_array 42 9,		99 1,	36 12

integer my_array_dimensions 3 3 2
integer my_array_offsets    0 0 0

integer_array my_stack 5
#integer my_stack 0 0 0 0 0 
integer my_stack_index

{+intro
set INDEX = @my_stack
write "Stack size: " INDEX "^"
write "Array size: " @my_array "^"
execute "+push_stack<my_stack<11"
execute "+push_stack<my_stack<22"
execute "+push_stack<my_stack<33"
execute "+push_stack<my_stack<44"
execute "+push_stack<my_stack<55"
execute "+push_stack<my_stack<66"
execute "+push_stack<my_stack<77"
write "last on: " +pop_stack<my_stack "^"
terminate

execute "+init_array<my_array"

set multi = "+get_array<my_array<1<1<1"
write "value returned is " multi "^"

execute "+set_array<my_array<42<1<1<1"

set multi = "+get_array<my_array<1<1<1"
write "value returned is " multi "^"

terminate

write "^+give_all<tom<dick<harry<ANIMATE<FEMALE<DEAD"
write "^-----------------------------------------------------^"

execute "+give_all<tom<dick<harry<ANIMATE<FEMALE<DEAD"

write "^+give_one<fred<ANIMATE<FEMALE<DEAD" 
write "^-----------------------------------------------------^"


write "**********^"
set multi = dimensions
write multi ^

; Can also just call +give_one directly if I want. The main idea
; with layered code is that it isn't aware of any code in any
; higher layer. In other words, +give_one doesn't know if it was
; called from +give_all or directly like this - it just does its job.
execute "+give_one<fred<ANIMATE<FEMALE<DEAD" 

write "^+give_range<garage<cave<VISITED<DAMAGED"
write "^-----------------------------------------------------^"
execute "+give_range<garage<cave<VISITED<DAMAGED"
}

location garage
object tom
  short name "Tom"
object dick
  short name "Dick"

location bus_stop

object harry
  short name "Harry"

string forward_to
integer junction

{+give_range
# This function accepts two objects and some attributes 
# then calls +give_all for all the locations in between
# Note, it would also be possible to call +give_one for each location
# but then it wouldn't be a good example of three layers would it :)

setstring forward_to "+give_all"	; The function was are going to forward to

write "RANGE IS " arg[0] " to " arg[1] ".^"

if arg[0] < arg[1]
   set iterator = arg[0]		; Set the index to the first object in the range
   
   ; Add all the locations in the range to the function call.
   ; Keep looping until we reach the final object of the range
   while iterator < arg[1] : iterator = arg[1]	
      if iterator has LOCATION
         addstring forward_to "<" iterator{label}	; This is a location, so add it.
      endif
      set iterator + 1
   endwhile

   ; Now add all the attributes 
   set iterator = 2 
   while iterator != @arg
      addstring forward_to "<" string_arg[iterator] 	; We could do a test here to make sure this is
													; is an attribute, but we'll trust it.
      set iterator + 1
   endwhile

   # Now finally call the function
   write "CALLING FROM _give_range: " forward_to "^^"

   execute forward_to

else
   print:
      +give_range requires the first two arguments to be a starting location
      followed by a finishing location that refine a range
   .
endif
}

{+give_all
# This function will always see arg[0] as tom, arg[1] as dick etc...
# Presume I parsed these attributes the way you did, but I'll cheat 
# here with hardcoded numbers.

# Parse the arguments to determine the junctions
# (All the arguments need to be passed to +parse_arguments)
set iterator = 0
setstring function_to_call "+parse_arguments"

# ADD ALL THE ARGUMENTS PASSED TO THIS FUNCTION
while iterator < @arg
  addstring function_to_call "<" string_arg[iterator]
  set iterator + 1
endwhile

set junction = function_to_call ; This is a call to +parse_arguments that returns the index
								; of the first attribute

set multi = 0
while multi < junction 		; Loop through each of the objects until the first attribute

   # Start a new function for each of the objects that get looped over.
   setstring forward_to "+give_one" "<" string_arg[multi] 

   set argument = junction 	; The index of the first attribute

   repeat 
      addstring forward_to "<" string_arg[argument] ; Add all the attributes to each function call
      set argument + 1
   until argument = @arg	; Loop from the first attribute to the end of the arguments

   write "CALLING FROM +give_all: " forward_to "^"		; Display the function for debugging.
   execute forward_to 	; Okay, now call something like +give_one<tom<ANIMATE<FEMALE<DEAD
                      	;                          then +give_one<dick<ANIMATE<FEMALE<DEAD

   set multi + 1		; Move on to the next object

endwhile
}

integer inner_loop

{+give_one
# arg[0] is the object, all other arguments are the attributes to give that object.
write "Giving the attributes: "
set inner_loop = 1 ; Start after the object and print all the words.
while inner_loop != @arg
   write string_arg[inner_loop] " " 
   ensure arg[0] has string_arg[inner_loop]
   set inner_loop + 1
endwhile
write "to " arg[0]{the} ".^"
}

{+parse_arguments
# Return the index of the first argument that doesn't resolve to an integer
set inner_loop = 0
while inner_loop < @arg
   if arg[inner_loop] = -1	; This argument must be a string
      return inner_loop		; Return the index
   endif
   set inner_loop + 1
endwhile
return -1		; There were no arguments that didn't resolve to an integer
}

string function_to_call

integer iterator

{+pass_it_on
set iterator = 0
setstring function_to_call "+show_args"

# ADD ALL THE ARGUMENTS PASSED TO THIS FUNCTION
while iterator < @arg
  addstring function_to_call "<" string_arg[iterator]
  set iterator + 1
endwhile

execute function_to_call
}

{+show_args
set iterator = 0
while iterator < @arg
  write iterator ": " string_arg[iterator] ", " arg[iterator] "^"
  set iterator + 1
endwhile
}

{+return_cave
return cave
}

{+set_attribute
ensure player has string_arg[0]
}

{+test_attribute : +test_att
write "IN: " function_name "^"
if player has string_arg[0]
   write "Yes!^"
else
   write "No.^"
endif
}

location disco

location cave
object fred
player
object girl
  has	ANIMATE FEMALE

#include "verbs.library"
#include "utils.library"
