<html>
<head>
	<title>The JACL Author's Guide</title>
	<meta name="description" content="Documentation for the JACL Adventure Creation Language.">
	<meta name="keywords" content="JACL,tutorial,programming,programmers,guide,manual,documention,instructions">
	<link rel=stylesheet type="text/css" href="styles.css">
</head>
<body>

<h1><a class="title" name="resolution0">Object Resolution</a></h1>

<p>A large part of playing interactive fiction involves referring to the objects and locations that make up the game's world. The information in this chapter will assist you in coding your game in such a way that the JACL parser will select the object the player intended as often as possible. All references to objects made by the player are parsed for the following possible structure:

<pre>
objects [from other objects] [except objects [from other objects]]
</pre>

<p>The JACL parser will build two lists of objects for any reference made by the player. The first will contain all the objects for inclusion while the second will contain all the objects referred to after the word <b>except</b> for exclusion. Once the two lists have been built, the second list will be subtracted from the first list. Both lists can make multiple use of the word <b>from</b> to refer to objects, however, the word <b>except</b> can not appear more than once.

<h2><a class="section" name="resolution1">Object Naming</a></h2>

<p>When the player refers to an object during the course of the game they may use as many or as few of the object's names as are required to uniquely identify it. For example, consider the following three objects:

<pre>
object ball_1: ball
object ball_2: small red ball
object ball_3: big red ball
</pre>

<P>Presuming all these objects were in the current location, if the player referred to <B>ball</B>, then <B>ball_1</B> would be selected. This is because the JACL interpreter divides the number of names an object has by the number of names supplied to come up with a best match. Although all three objects have the name <b>ball</b>, <B>ball_1 </B>matches 100% while <B>ball_2 </B>and <B>ball_3 </B>only match 33%. If the player referred to <B>red ball</B>, then <B>ball_1</B> would automatically be excluded, as it does not have the name red. On the other hand, both <B>ball_2 </B>and <B>ball_3 </B>have the names red ball, and both would match 66%. In this case, a message would be displayed stating that the reference was ambiguous. If the player referred to <B>big</B>, then <B>ball_3 </B>would automatically be selected as neither of the other two objects have the name <b>big</b> at all.

<P>It is important to be aware of the number of names that you give each object, and how they relate to each other. It is generally best to have two similar objects have the same number of names, although in some cases you may wish to nominate one to be the default by giving it less names.

<P>For example, in <B>The Unholy Grail</B> there are two objects: <B>beige agar </B>and <B>brown agar</B>. To avoid problems when looking up agar in the encyclopedia, a third object named simply agar was added. This object stays permanently in <B>limbo</B> and therefore does not affect any physical manipulation of the two real agar objects. It does, however, get selected when using commands such as <B>ask_about</B> that accept objects that are <B>*anywhere</B>.

<p>It also possible to define plural names for an object. When the player uses a plural name all the objects that have that plural name will be selected. For example, the above objects could all be given the plural name <b>balls</b> using the following code:

<pre>
object ball_1: ball
   plural		balls
object ball_2: small red ball
   plural		balls
object ball_3: big red ball
   plural		balls
</pre>

<p>If during the game the player was to type the command <b>take balls</b>, all of the above objects would be selected and three separate take commands would be issued. It is the use of the plural name that tells the parser that a reference to multiple objects was intended and that the reference is not ambiguous. It is also possible to further qualify a reference to a plural name by using one or more regular name. For example, the command <b>take red balls</b> would result in only the small red ball and the large red ball being taken.

<h2><a class="section" name="resolution1">Disambiguation</a></h2>

<p>It is also possible for each object to have the associated function <b>disambiguate</b> to assist in the process of disambiguation. The parser will attempt to call this function on every object that is a possible result for an ambiguous reference that needs to be resolved to a single object. 

<p>When called, this function will be passed a single argument being the context in which the ambiguous reference was made. The possible values for this argument are:

<table width=100%>
<tr><th width=20%>Value</th><th width=80%>Description</th></tr>
<tr><td>0</td><td>The list of objects for <b>noun1</b>.</td></tr>
<tr><td>1</td><td>The list of objects for <b>noun2</b>.</td></tr>
<tr><td>2</td><td>Exceptions to the list of objects for <b>noun1</b>.</td></tr>
<tr><td>3</td><td>Exceptions to the list of objects for <b>noun2</b>.</td></tr>
<tr><td>4</td><td>The list of objects <b>noun1</b> should be from.</td></tr>
<tr><td>5</td><td>The list of objects <b>noun2</b> should be from.</td></tr>
<tr><td>6</td><td>The list of objects <b>noun1</b>'s exceptions should be from.</td></tr>
<tr><td>7</td><td>The list of objects <b>noun2</b>'s exceptions should be from.</td></tr>
</table>

<p>To demonstrate, consider a game that had two objects, a red ball and a red book. The following <b>disambiguate</b> function could be added to the book in order to allow the commands <b>read red</b> and <b>look in red</b> to prefer the book to the ball instead of displaying the usual &quot;ambiguous reference&quot; message:

<pre>
object red_book : red book

{disambiguate
if arg = 0
   ifstring command = "read"
      return true
   endif
   ifstringall command[0] = "look" : command[1] = "in"
      return true
   endif
endif
return false
}
</pre>

<p>This function makes use of the <b>command</b> array to look at the words used so far in the player's command. Unfortunately as the command has not been fully processed the single resultant action is not yet known. This function communicates its decision to the parser via its return code. If this function returns <b>false</b> (or doesn't exist), the object will be included in the list of possible objects and processing will continue as normal. If this function returns <b>true</b> this object will be instantly selected as the object the player was referring to. If this function returns <b>-1</b> this object will be excluded from contention and processing will continue as normal. If all objects exclude themselves from contention the first will be selected.

<p>It is important to keep in mind that this function is only called when an ambiguous reference is made. The command <b>read ball</b> will still attempt to read the ball, it is only a command like <b>read red</b> that results in an ambiguous reference that will cause these functions to be called. It is also advisable to use this facility sparingly as it departs from the regular disambiguation rules and may lead to confusion for the player. Used appropriately, however, it can help to solve a frustrating disambiguation problem that has been identified during play testing.

<!-- END OF BODY -->
<p><a href="index.html">Back to Contents</b>
</body>
</html>
