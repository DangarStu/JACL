<html>
<head>
	<title>The JACL Author's Guide</title>
	<meta name="description" content="Documentation for the JACL Adventure Creation Language.">
	<meta name="keywords" content="JACL,tutorial,programming,programmers,guide,manual,documention,instructions">
	<link rel=stylesheet type="text/css" href="styles.css">
</head>
<body>

<h1><a class="title" name="attributesttributes0">Attributes</a></h1>

<P>Attributes are a set of qualities that an item either <B>has</B> or <B>hasnt</B>. An item can have none of the possible attributes, all of the possible attributes, or any combination in between. Initial attributes are given to an object in its definition using the keyword <B>has</B> (see the chapter <a href="definitions.html">Definitions in Detail</a>), while they are given and taken away during the course of the game using the <B>ensure</B> command. Many of the attributes do not have any pre-determined purpose and may be used by the author at will. The best way to determine the full effect of any given attribute is to search for it in the <B>verbs.library</B> file.


<h2><a class="section" name="attributes1">The ENSURE Command</a></h2>

<P>The <b>ensure</b> command is used to change which attributes an item has and uses the following syntax:

<pre>
<B>ensure</B> <I>Item</I> <B>has</B>/<B>hasnt</B> <I>Attribute</I>
</pre>

<P>There is nothing really tricky about the <B>ensure</B> command. You are either giving an item an attribute with a command like:

<pre>
ensure dungeon has DARK
</pre>

<P>or taking an attribute away from an item with a command like:

<pre>
ensure lantern hasnt LUMINOUS
</pre>

<h2><a class="section" name="attributes2">Object Attributes</a></h2>

<P>Below is a list of the attributes that can be given to an object, and some brief notes on each. 

<table width=100%><tr>
<th width=20%>Attribute</th>
<th>Description</th>
</tr><tr>
<td><B>CLOSED</b></td>
<td>If an object has the attribute <B>CLOSED</B>, its contents will not be accessible to the player.</TD>
</TR>
<TR><td><B>LOCKED</B></TD>
<td>If an object has the attribute <B>LOCKED</B>, it cannot be opened or closed by the player.</TD>
</TR>
<TR><td><B>DEAD</B></TD>
<td>An object that has the attribute <B>DEAD</B> must also have the attribute <B>ANIMATE</B>. A <B>DEAD</B> object may not be killed, talked to, shown things or given things.</TD>
</TR>
<TR><td><B>IGNITABLE</B></TD>
<td>An object that has the attribute <B>IGNITABLE</B> may be used to light an object that has the object <B>FLAMMABLE</B>.</TD>
</TR>
<TR><td><B>WORN</B></TD>
<td>An object that has the attribute <B>WORN</B> will not burden the player with its <b>mass</b>. In order to wear an object it must also have the attribute <B>WEARABLE</B>. While an object has the <B>WORN</B> attribute, the player will not be able to drop it or give it away.</TD>
</TR>
<TR><td><B>CONCEALING</B></TD>
<td>An object that has the attribute <B>CONCEALING</B> must also have the attribute <B>ANIMATE</B>. This attribute indicates that when the object is examined, the objects that it is carrying should not be listed.</TD>
</TR>
<TR><td><B>LUMINOUS</B></TD>
<td>When it is present, an object that has the attribute <B>LUMINOUS</B> will allow the player to enter a location that has the attribute <B>DARK</B>.</TD>
</TR>
<TR><td><B>WEARABLE</B></TD>
<td>The player may wear an object that has the attribute <B>WEARABLE</B>.</TD>
</TR>
<TR><td><B>CLOSABLE</B></TD>
<td>An object that has the attribute <B>CLOSABLE</B> may be opened and closed by the player.</TD>
</TR>
<TR><td><B>LOCKABLE</B></TD>
<td>An object that has the attribute <B>LOCKABLE</B> may be locked and unlocked by the player.</TD>
</TR>
<TR><td><B>ANIMATE</B></TD>
<td>An object that has the attribute <B>ANIMATE</B> may be killed, talked to, shown things or given things.</TD>
</TR>
<TR><td><B>LIQUID</B></TD>
<td>An object that has the attribute <B>LIQUID</B> must be carried within an object that has the attribute <B>CONTAINER</B> and may be drunk or poured by the player.</TD>
</TR>
<TR><td><B>CONTAINER</B></TD>
<td>An object that has the attribute <B>CONTAINER</B> may have other objects put inside it. If it also has <B>CLOSABLE</B> it must not have <B>CLOSED</B> for the player to put things in it. A container may hold as many <B>mass</B> units as its <B>capacity</B> element is set to. </TD>
</TR>
<TR><td><B>SURFACE</B></TD>
<td>An object that has the attribute <B>SURFACE</B> may have things placed on top of it. A surface may hold as many <B>mass</B> units as its <B>capacity</B> element is set to. </TD>
</TR>
<TR><td><B>PLURAL</B></TD>
<td>If an object is defined with a plural name, it should be given the attribute <B>PLURAL</B> so the library will avoid printing sentences such as "The boulders is too heavy to go throwing around."</TD>
</TR>
<TR><td><B>FLAMMABLE</B></TD>
<td>An object that has the attribute <B>FLAMMABLE</B> may be lit using an object that has the attribute <B>IGNITABLE</B>.</TD>
</TR>
<TR><td><B>BURNING</B></TD>
<td>When an object that has the attribute <B>FLAMMABLE</B> is lit, it will be given the attributes <B>BURNING</B> and <B>LUMINOUS</B>.</TD>
</TR>
<TR><td><B>ON</B></TD>
<td>Free for use by the author.</TD>
</TR>
<TR><td><B>DAMAGED</B></TD>
<td>Free for use by the author.</TD>
</TR>
<TR><td><B>FEMALE</B></TD>
<td>This attribute should be given to any object that has the attribute <B>ANIMATE</B> and represents a female character. This will enable the library to refer to the character correctly.</TD>
</TR>
<TR><td><B>POSSESSIVE</B></TD>
<td>If an object has the attributes <B>ANIMATE</B> and <B>POSSESSIVE</B> the player will not be able to take objects from them or ask them for objects unless specifically coded for.</TD>
</TR>
<TR><td><B>OUT_OF_REACH</B></TD>
<td>An object that has the attribute <B>OUT_OF_REACH</B> cannot be touched, even when it is in the same location as the player.</TD>
</TR>
<TR><td><B>TOUCHED</B></TD>
<td>An object that has the attribute <B>TOUCHED</B> has been moved from its starting position by the player. If the object's <B>long</B> property is set to <b>function</b>, this attribute can be tested to give an appropriate description.</TD>
</TR>
<TR><td><B>SCORED</B></TD>
<td>Free for use by the author.</TD>
</TR>
<TR><td><B>SITTING</B></TD>
<td>If the player is currently sitting, this attribute should be given, as the function <B>+movement</B> will check if it is set before moving the player.</TD>
</TR><tr>
<td><b>NO_TAB</b></td>
<td>This attribute indicates that the object's names should not be included during tab completion. Tab completion is only used by the console interpreter.</td>
</tr>
<TR><td><B>NOT_IMPORTANT</B></TD>
<td>This attribute is given to an object that is of no consequence game. It is usually used to implement nouns that are referred to in a location description but are not part of the game world the player needs to interact with. Verbs in the library will respond with <b>You don't need to worry about that.</b> when the player attempts to interact with an object that has this attribute.</TD>
</TR>
</TABLE>

<h2><a class="section" name="attributes3">Location Attributes</a></h2>

<P>Below is a list of the attributes that can be given to a location, and some brief notes on each. 

<table width=100%>
<tr><th width=20%>Attribute</th>
<th>Description</th>
</tr><tr>
<TD><b>VISITED<br>MAPPED</b></td>
<td>When the player enters a location, it is automatically given the attributes <B>VISITED</B> and <b>MAPPED</b> after the <b>look</b>function is run. These attributes may be tested for to provide a shorter description on subsequent visits. When the JACL interpreter is set to verbose mode (the <B>DISPLAY_MODE</B> variable is set to 1), locations will have the attribute <B>VISITED</B> taken away from them before the <b>look</b> function is executed.</TD>
</tr><tr>
<td><B>DARK</B></TD>
<td>If a location has the attribute <B>DARK</B>, the player must be carrying an object that has the attribute <B>LUMINOUS</B> in order to enter it.</TD>
</tr><tr>
<td><b>DARKNESS</b></td>
<td>If the player's current location has the attribute <b>DARK</b> and no object with the attribute <b>LUMINOUS</b> is present, the location will be given the attribute <b>DARKNESS</b> and the player will be prevented from performing any actions that require the ability to see. You should never manually give or take the attribute <b>DARKNESS</b> to or from a location, only the attribute <b>DARK</b>.</td>
</tr><tr>
<td><B>ON_WATER</b></td>
<td>If a location has the attribute <B>ON_WATER</B>, any object dropped will sink out of sight and end up in <B>limbo</B>.</TD>
</tr><tr>
<td><B>UNDER_WATER</b></td>
<td>If a location has the attribute <B>UNDER_WATER</B>, nothing may be lit, exposed liquids will dissipate and no talking is possible.</TD>
</tr><tr>
<td><b>WITHOUT_AIR</b></td>
<td>If a location has the attribute <B>WITHOUT_AIR</B>, the <B>OXYGEN_LEFT</B> variable will be decremented each turn until it reaches zero and suffocation occurs.</TD>
</tr><tr>
<td><b>OUTDOORS</b></td>
<td>If a location has the attribute <B>OUTDOORS</B>, any desired effects of weather should be applied.</td>
</tr><tr>
<td><b>MID_AIR</b></td>
<td>If a location has the attribute <B>MID_AIR</B>, any object dropped will fall out of sight and end up in <B>limbo</B>. Actions such as jumping will not be allowed either.</td>
</tr><tr>
<td><b>MID_WATER</b></td>
<td>If a location has the attribute <B>MID_WATER</B> any object dropped will sink out of sight and end up in <b>limbo</b>.</TD>
</tr><tr>
<td><b>TIGHT_ROPE</b></td>
<td>If a location has the attribute <B>TIGHT_ROPE</B>, any object dropped will fall out of sight and end up in <B>limbo</B>. </TD>
</tr><tr>
<td><b>POLLUTED</b></td>
<td>Free for use by the author.</TD>
</tr><tr>
<td><B>SOLVED</B></TD>
<td>Free for use by the author.</TD>
</tr><tr>
<td><B>LOCATION</B></TD>
<td>All locations have the attribute <B>LOCATION</B>. If this is taken away the location will become an object.</TD>
</tr><tr>
<td><B>SCORED</B></TD>
<td>Free for use by the author.</TD>
</tr><tr>
<td><b>NO_TAB</b></td>
<td>This attribute indicates that the location's names should not be included during tab completion. Tab completion is only used by the console interpreter.</td>
</tr>
<TR><td><B>NOT_IMPORTANT</B></TD>
<td>This attribute is given to a location that is of no consequence game. It is usually used to implement nouns that are referred to in a location description but are not part of the game world the player needs to interact with. Verbs in the library will respond with <b>You don't need to worry about that.</b> when the player attempts to interact with an object that has this attribute.</TD>
</TR>
</table>

<h2><a class="section" name="attributes4">User Attributes</a></h2>

<P>A common use of attributes is to check if an action has already been performed. This may be useful if it is not logically possible to perform the action twice, or each subsequent attempt would result in a different outcome. Another possibility is that you would like to give a lengthy response the first time, then a short response on all subsequent times. To help facilitate this, and many other types of game-specific behaviour, JACL allows you to define up to 32 user attributes. User attributes are defined using the <b>attribute</b> directive followed by one or more attribute names. Below is a rather minimal example of using user attributes:

<pre>
attribute DOOR_OPENED

{open_override
ensure door hasnt CLOSED
if door hasnt DOOR_OPENED
   write "You hold your breath as the door slowly "
   write "creaks open.^"
   ensure door has DOOR_OPENED
   return
endif
write "You open the door again.^"
}
</pre>

<p>The above code creates a user attributes called <b>DOOR_OPENED</b> and gives the object <b>door</b> that attribute when it is first opened. It also tests whether the door already has this attribute before deciding which message to display.

<!-- END OF BODY -->
<p><a href="index.html">Back to Contents</b>
</body>
</html>
