<html>
<head>
	<title>The JACL Author's Guide</title>
	<meta name="description" content="Documentation for the JACL Adventure Creation Language.">
	<meta name="keywords" content="JACL,tutorial,programming,programmers,guide,manual,documention,instructions">
	<link rel=stylesheet type="text/css" href="styles.css">
</head>
<body>

<h1><a class="title" name="functions0">Functions</a></h1>

<P>Functions in JACL are similar in principle to functions and procedures in many other programming languages. They act as sub-routines, discrete units of code that can be executed manually from other functions or internally by the interpreter. 

There are two fundamental types of functions: global and associated. A global function is independent of any object and is designated as such by being given a name beginning with a plus sign. Any function whose name does not begin with a plus sign is automatically associated with the nearest object or location above it in the game file.

<table class="infowarn"><tr>
<td><img src="warning.png" alt="Warning"></td>
<td>It is illegal to define a non-global function before the first object or location as it will not have an object or location to be associated with.</td>
</tr></table>

<p>A function begins with a opening curly brace (<b>{</b>) that is followed directly by the name of the function. It is possible for a function to have multiple names by providing additional names on the same line as the opening curly brace, each separated by whitespace. Below is an example of a function associated with an object:

<pre>
object boulder

{take : push : turn
write "The boulder is way too heavy to move.^"
set time = false
}
</pre> 

<p>This function has three names. As none of the names begin with a plus sign, they are all names associated with the object <b>boulder</b>. 

<p>The full internal name of an associated function is constructed by taking the name as it appears in the program, then appending an underscore and the label of the object or location that it is associated with. For example, the above function has the full internal names of: <b>take_boulder</b>, <b>push_boulder</b> and <b>turn_boulder</b>.

<p>If the name of a function begins with a plus sign, it is considered to be a global function and the label of the nearest object is not appended to the supplied name. For example, the function <b>+eachturn</b> has the full internal name of <b>+eachturn</b>.

<h2><a class="section" name="functions1">The EXECUTE and CALL Commands</a></h2>

<p>All <b>execute</b> and <b>call</b> commands are of the following format:

<pre>
<b>execute</b>/<b>call</b> [<i>object</i><b>.</b>]<i>FunctionName</i>[<b>&lt;</b><i>arg1</i><b>&lt;</b><i>arg2</i>...]
</pre>

<P>The <B>execute</B> command allows the manual execution of any function by specifying its full internal name. The <b>call</b> command is almost identical except it will not display an error if the function does not exist. This behaviour is required when calling a function that contains some optional, extra code that may or may not exist. When executing functions manually using the <b>execute</b> or <b>call</b> commands, the full internal name must be specified. With global functions, this is simply the name of the function as it appears in the program. For example, the following function:

<pre>
{+hello
write "Hello world!"
}
</pre>

<p>would be called with the command:

<pre>
execute +hello
</pre>

<p>The full internal name of an associated function is constructed by taking the name as it appears in the program, then appending an underscore and the label of the object or location that it is associated with.  For example, the following function:

<pre>
object wheel : steering wheel

{examine
write "The steering wheel is covered in black leather.^"
}
</pre>

<p>would be called with the command:

<pre>
execute examine_wheel
</pre>

<p>Once a function is executing, the string constant <b>function_name</b> is set to contain the full internal name that was used to call the function. This can be useful if the function has multiple names and you need to modify its behaviour based on which function was used to call it. For example:

<pre>
{+intro
execute "+example"
}

{+test : +example : +multi
write function_name ^
}
</pre>

<p>This code will simply output the string <b>+example</b>

<p>An <b>execute</b> command also allows the name of a function be to prefixed with an item label or pointer, followed by a period. This tells the interpreter to execute the specified function that is associated with the specified item. For example, the above command could also be expressed as:

<pre>
execute wheel.examine
</pre>

<p>The advantage of this syntax is that an item pointer or variable can be used in place of the object label <b>wheel</b>. The following code snippet is equivalent to the command above:

<pre>
set noun4 = wheel
execute noun4.examine
</pre>

<p>When using the syntax of an object pointer or label followed by a period, it is legal to supply a variable, integer constant or object element as the function name. This is useful when you wish to either iterate through a series of functions associated with an object or dynamically map an action to a function at run-time. The name of the function called will be the current integer value of the supplied variable. For example, the code below demonstrates two ways to call the function <b>1</b> that is associated with the dial:

<pre>
constant	setting 2

object dial : dial
 short	   a "dial"
 setting   5

{1
write "You set the dial to one^"
}

set dial(setting) = 1

execute dial.dial(setting)

# OR, MORE DIRECTLY...
execute 1_dial
</pre>

<p>It is possible to associate a function with more than one object by prefixing the function name with an asterisk (<b>*</b>). When you prefix a function with an asterisk the full internal name of the function will be stored exactly as the name supplied. This allows you to construct a name that mirrors the name that would be created for a normal associated function. For example:

<pre>
object redball : red ball

object blueball : blue ball

object yellowball : yellow ball

{kick : *kick_redball : *kick_blueball
write noun1{The} " sails high in the air.^"
}
</pre>

<p>The above function has three names, the first automatically associating it with the yellow ball in the normally fashion with the second two manually associating it with the objects <b>redball</b> and <b>blueball</b>. The order the names are defined in is not important.

<table class="infowarn"><tr>
<td><img src="warning.png" alt="Warning"></td>
<td>When using the above technique to manually associate a function with an object, the label of the object must not contain an underscore. This is because the supplied function name is parsed from the right, with everything after the first underscore encountered being considered the object label. If a function was to be given the name <b>*kick_blue_ball</b>, the interpreter would attempt to associate the function <b>kick_blue</b> with the object <b>ball</b>.</td>
</tr></table>

<p>It is also possible to supply the name of the function to be executed in a string variable or constant. This technique allows strings to be used as function pointers and is used by the <b>menu.library</b> as a way of passing a call-back function to function in the library. See the chapter on the <a href="menu.html#menu1">menu.library</a> for an example.

<p>A function will stop executing and return to the function that it was called from when it encounters a <b>return</b> command or arrives at the closing brace. If a function reaches its closing brace, an implicit <b>return true</b> is executed. 

<h3><a class="section" name="functions2">Passing Arguments to a Function</a></h3>

<P>It is possible to pass string and integer arguments to a function when executing it. This is done by following the function name by a less-than symbol (<b>&lt;</b>) followed by the value to pass. Each additional argument is separated by another less-than symbol. When the specified function is executed, the arrays <b>arg</b> and <b>string_arg</b> are populated with the values passed. The array <b>string_arg</b> stores a copy of the string value of every argument passed. If a string variable or constant is supplied as an argument, the value of the string constant is stored, not the name of the constant itself. The array <b>arg</b> stores integer value for every argument that can be resolved to an integer. If an argument can't be resolved to an integer, -1 is stored at that point in the array. The arrays <b>arg</b> and <b>string_arg</b> are always of equal length, being the total number of arguments supplied. Below is an example of a function call that passes seven arguments and a function that displays them:

<pre>
string   test   "This is a string constant."

variable DEPTH  0
variable INDEX  0

{+some_function 
...
set DEPTH = 99
execute "+subfunction&lt;This is a literal string.&lt;42&lt;Fred&lt;test&lt;12&lt;DEPTH&lt;13"
...
}

{+subfunction
set INDEX = 0
while INDEX != @arg
  write "arg[" INDEX "]: " arg[INDEX] "  string_arg[" INDEX "]: " string_arg[INDEX] ^
  set INDEX + 1
endwhile
}
</pre>

<p>The above code produces the following output:

<pre>
arg[0]: -1   string_arg[0]: This is a literal string.
arg[1]: 42   string_arg[1]: 42
arg[2]: -1   string_arg[2]: Fred
arg[3]: -1   string_arg[3]: This is a string constant.
arg[4]: 12   string_arg[4]: 12
arg[5]: 99   string_arg[5]: fuel_left
arg[6]: 13   string_arg[6]: 13
</pre>

<table class="infowarn"><tr>
<td><img src="info.png" alt="Information"></td>
<td>
<p>The first argument passed to a function is also stored in the object pointer <B>noun3</B> for historical reasons.
</td></tr></table>

<h2><a class="section" name="functions3">The function-call count</a></h2>

<p>Every time a function is executed, an internal count of the number of times it has been called is increased by one. The value of this count is obtained by prefixing the full internal name of the function with an at symbol (<b>@</b>). If an at symbol is used on its own, the number of times the current function has executed is returned.

<p>For example, below is the same example used in the section <a href="attribute.html#attributes4">User Attributes<a>, modified to use the function-call count:

<pre>
{open_override
ensure door hasnt CLOSED
if @ = 1
   write "You hold your breath as the door slowly "
   write "creaks open.^"
   return
endif
write "You open the door again.^"
}
</pre>

<h2><a class="section" name="functions4">The RETURN Command</a></h2>

<p>The <b>return</b> command is used to pass a value back to the function that called it, or the interpreter if called internally. A <b>return</b> command with no parameters will return the value <b>1</b>, which is the same as a function simply reaching its closing bracket. If a value is specified as a parameter to a <b>return</b> command, that value will be returned instead. For example:

<pre>
{+some_function
set RESULT = +adder&lt;16&lt;21&lt;42&lt;75
write "The result is: " RESULT
}

{+adder
set INDEX = 0
set COUNTER = 0
while INDEX != @arg
  set COUNTER + arg[INDEX]
  set INDEX + 1
endwhile
return COUNTER
}
</pre>

<p>The above function <b>+adder</b> will sum all the values passed as arguments and then return the result to the calling function.

<h2><a class="section" name="functions5">Responding to the Player's Moves</a></h2>

<P>In this section you will learn more about the function calls made by the interpreter when the player types a move while playing a game. As the first step in processing the player's move, the interpreter attempts to find a <B>grammar</B> statement that matches the command typed. For more information see the section on <a href="definitions.html#definitions12">Grammar Statements</a>. 

If a match is found, the function after the greater-than symbol at the end of the <B>grammar</B> statement is used as the core name for a series of function calls. This mapping of the player's moves to functions through the use of <b>grammar</b> statements is one of the fundamental principles of writing a JACL game. 


<p>Before calling any functions, the interpreter will set two object pointers, <B>noun1</B> and <B>noun2</B>. These are set to the objects referred to in the move typed by the player in the order they occur. For example, for a move like "insert card in slot", <b>noun1</b> would be set to the card, and <b>noun2</b> would be set to the slot. We will start, however, by examining a move that refers to a single object, such as "take wooden pole".

<p>The <b>grammar</b> statement that matches the move "take wooden pole" looks like this:

<pre>
grammar take *here &gt;take
</pre>

<p>This <b>grammar</b> statement says that if a move consisting of the word <b>take</b> followed by an object that is in the current location is typed, execute the function <b>take</b>. In reality there are a number of possible functions that can be called, each having <b>take</b> as a part of their name. For the purpose of the following examples, we will assume that the object "wooden pole" has the label <b>pole</b>.

<p>After the player types the move "take wooden pole", the first function the interpreter will attempt to execute is the global function <b>+before</b>. If this function exists, and does not return <b>false</B>, no further processing is performed with regard to this move.  

<p>The next function the interpreter will attempt to execute is the global function <b>+before_take</b>. If this function exists, and does not return <b>false</B>, no further processing is performed with regard to this move. Below is an example of what this function might look like:

<pre>
{+before_take
if guard is *here
   write &quot;You decided to leave &quot; noun1{the} &quot; alone &quot;
   write &quot;while the guard is around.&quot;
   return 
endif
return false ;continue as normal
}
</pre>

<P>As you can see, the <B>+before_take</B> function is independent of the object being taken. This makes it ideal for situations that affect all objects. If this function returns <b>false</b>, or does not exist at all, the interpreter will next attempt to execute the function <b>take_pole</b>. This function will appear in the game file as a function called <b>take</b> that is associated with the object <b>pole</b>. 

<p>If this function exists, it will be executed in place of the default global action for the <b>take</b> verb. If this function does not exist, or returns <b>false</b>, the global function <b>+take</b> will be executed. This function contains the default outcome for the <b>take</b> verb. Below is the <b>+take</b> function from the library:

<pre>
{+take         
if +important&lt;noun1 = true
   return true
endif
if +darkness = true
   return true
endif
if +reach&lt;noun1 = true
   return true
endif
if player has SITTING
  write "You will have to stand up first.^"
  set TIME = false
  return
endif
if noun1(mass) &gt;= heavy : noun1 has LOCATION
  execute +move_scenery
  return
endif  
if noun1(mass) &gt; player(capacity)
  write "You are carrying too much to take " noun1{the} .^
  set TIME = false
  return
endif
if noun1 has LIQUID
  write noun1{The} " run" noun1{s} " through your fingers.^"
  return
endif
override
write "You take " noun1{the} .^
move noun1 to player
ensure noun1 has TOUCHED
}
</pre>
 
<p>This function performs a few simple tests to confirm the move is possible then moves the object being taken to the player. When this function reaches the <b>override</b> command (the fourth line from the end), the interpreter will attempt to execute the function <b>take_override_pole</b>. This will appear in the game file as a function called <b>take_override</b> that is associated with the object <b>pole</b>. If this function exists, it will replace all the code that comes after the <b>override</b> command in the function <b>+take</b>. This allows an object-specific outcome to be coded for, while still taking advantage of all the tests that precede the <b>override</b> command performed. For this reason, an <b>override</b> function is only of use when there is a chance that the player's move may not be possible. This is the case with the <b>take</b> command in situations such as when the player is already carrying too much, the object they are attempting to take is out of reach, or it is a liquid.

<p>If the function <b>take_override_pole</b> does not exist, the interpreter will attempt to execute the function <b>+default_take</b>. This function allows the author to code a default override function that applies to all objects.

<table class="infowarn"><tr>
<td><IMG SRC="info.png" alt="Information"></TD>
<td>The same effect can be achieved by modifying the code after the <b>override</b> command of the <b>+take</b> function in the library. Putting this code in <b>+default_take</b>, however, allows the library to be upgraded to a newer version at any time without losing your game-specific modifications. This is obviously the preferred method.</TD>
</tr></table>

<p>If the <b>override</b> command in the function <b>+take</b> is reached, and neither a <b>take_override_pole</b> or <b>+default_take</b> function exists, execution will continue from the line after the <b>override</b> command.

<p>The final stage in processing the player's move calls a series of <b>after</b> functions, regardless of the outcome of any preceding it. It is not important whether any <b>after</b> function executes a <b>return</b> or <b>return false</b> command, as all three <b>after</b> function will execute in order regardless of outcome of the one before. The first function to be called in this final stage is the local function <b>after_take</b> that is associcated with the object <b>pole</b>. This function provides the opportunity to perform any processing required after the move <b>take pole</b> is issued by the player, regardless of any previous outcome.

<p>The next function called is <b>+after_take</b>. This function provides the opportunity to display any additional text relevant only to the <b>take</b> verb, but independent of any objects referred to. Below is an example of this:

<pre>
{+after_take
if noun1 = cookie
   if cookie(parent) = player
      if fred is *here
          write "Fred looks a bit upset that you have"
          write "taken the last cookie.^"
          return
      endif
   endif
endif
}
</pre>

<p>Finally the global function <b>+after</b> is called. This function provides the opportunity to perform any additional processing before the player's move is complete, regardless of the verb used or any objects referred to. 

<p>The above example details the function calls made for a command referring to a single object. The following three lists detail all the functions called for an in-game command containing no objects, one object and two objects respectively.

<p><B>grammar</B> <I>verb</I> <B>&gt;</B><I>CoreFunction</I>

<OL>

<li>The interpreter attempts to execute the function <b>+before_</b><i>CoreFunction</i>. If this function exists and does not return <b>false</b>, execution will skip directly to <b>+after_</b><i>CoreFunction</i>.</li>

<LI>If it does not exist, or returns <b>false</b>, an attempt will be made to execute <I>CoreFunction</I><B>_</B><I>CurrentLocation</I>. This is a function called <I>CoreFunction</I> that is associated with the current location.</LI>

<LI>If this does not exist, an attempt will be made to execute the global function <B>+</B><I>CoreFunction</I>.</LI>

<LI>If this function contains an <B>override</B> command, an attempt will be made to execute <I>CoreFunction</i><b>_override_</b><I>CurrentLocation</I>. This is a function called <I>CoreFunction</i><b>_override</b> that is associated with the current location.</LI>

<li>If it does not exist, or returns <b>false</b>, an attempt will be made to execute the function <b>+default_</b><i>CoreFunction</i>. 

<LI>If this does not exist, or returns <b>false</b>, execution will continue from the line after the <B>override</B> command.</LI>

<li>The interpreter attempts to execute the function <b>+after_</b><i>CoreFunction</i>.</li> 

</OL>

<P><b>grammar</b> <I>verb</I> <b>*</b><i>Object1</i> <b>&gt;</B><I>CoreFunction</I>

<OL>

<li>The interpreter attempts to execute the function <b>+before_</b><i>CoreFunction</i>. If this function exists and does not return <b>false</b>, execution will skip directly to <b>+after_</b><i>CoreFunction</i>.</li>

<LI>If it does not exist, or returns <b>false</b>, an attempt will be made to execute <I>CoreFunction</I>_<I>Object1</i>. This is a function called <I>CoreFunction</I> that is associated with <i>Object1</i>.</LI>

<LI>If this does not exist, an attempt will be made to execute the global function <B>+</B><I>CoreFunction</I>.</LI>

<LI>If this function contains an <b>override</b> command, an attempt will be made to execute <I>CoreFunction</i><b>_override_</b><I>Object1</I>. This is a function called <I>CoreFunction</i><b>_override</b> that is associated with the specified object.</LI>

<li>If it does not exist, or returns <b>false</b>, an attempt will be made to execute the function <b>+default_</b><i>CoreFunction</i>. 

<LI>If this does not exist, or returns <b>false</b>, execution will continue from the line after the <B>override</B> command.</LI>

<li>The interpreter attempts to execute the function <b>+after_</b><i>CoreFunction</i>.</li> 

</OL>

<P><b>grammar</B> <I>verb</I> <b>*</B><I>Object1</I> <I>preposition</I> <B>*</B><I>Object2</I> <b>&gt;</b><i>CoreFunction</i>

<OL>

<li>The interpreter attempts to execute the function <b>+before_</b><i>CoreFunction</i>. If this function exists and does not return <b>false</b>, execution will skip directly to <b>+after_</b><i>CoreFunction</i>.</li>

<LI>If it does not exist, or returns <b>false</b>, an attempt will be made to execute <I>CoreFunction_Object2_Object1</I>. This is a function called <I>CoreFunction_Object2</I> that is associated with <I>Object1</i>.</LI>

<LI>If this does not exist, or returns <b>false</b>, an attempt will be made to execute the global function <B>+</B><I>CoreFunction</I>.</LI>

<LI>If this function contains an <B>override</B> command, an attempt will be made to execute <I>CoreFunction_ Object2</i><b>_override_</b><I>Object1</I>. This is a function called <I>CoreFunction_Object2</i><b>_override</b> that is associated with <I>Object1</I>.</LI>

<li>If it does not exist, an attempt will be made to execute the function <b>+default_</b><i>CoreFunction</i>. 

<LI>If this does not exist, or returns <b>false</b>, execution will continue from the line after the <B>override</B> command.</LI>

<li>The interpreter attempts to execute the function <b>+after_</b><i>CoreFunction</i>.</li>

</OL>

<h2><a class="section" name="functions6">Special Functions</a></h2>

<p>The following are some special purpose functions that are called internally by the JACL interpreter:</p>

<table width=100%><tr>
<th width=22%>Function</th>
<th>Description</th>
</tr><tr>
<td valign="top"><B>+bootstrap</B></TD>
<td>This function is only executed once when a game first loads. Any initialisation code that must be run before the <b>+header</b> function is executed must go here.</td>
</tr><tr>
<td valign="top"><B>+intro</B></TD>
<td>This function is executed when a game is first run or restarted. It is used to display introductory text and set the starting values for any variables required.</td>
</tr><tr>
<td valign="top"><B>+header</B></td>
<td>This function is the very first to be executed before the player's command is processed when playing with a CGI intepreter.</td>
</tr><tr>
<td valign="top"><B>+footer</B></td>
<td>This function is the very last to be executed after the player's command has been processed when playing with a CGI intepreter.</td>
</tr><tr>
<td valign="top"><B>+top</B></td>
<td>This function is the very first to be executed before the player's command is processed when paying with a GLK interpreter.</td>
</tr><tr>
<td valign="top"><B>+bottom</B></td>
<td>This function is the very last to be executed after the player's command has been processed when playing with a GLK interpreter.</td>
</TR><TR>
<td valign="top"><B>eachturn_</B><I>here</I></TD>
<td>If the current location has an <B>eachturn</B> function associated with it, it will be executed directly before, and under the same conditions as, <B>+eachturn</B>.</TD>
</tr><tr>
<td valign="top"><B>+eachturn</B></TD>
<td>This function is executed each time a successful command is entered by the player. The interpreter decides on whether or not a command was successful by examining the state of the variable <B>TIME</B>. If it is set to <B>true</B>, the <B>+eachturn</B> function will be executed (and the <B>TOTAL_MOVES</B> variable will be incremented by one), just before <b>+footer</b> is executed.</td>
</tr><tr>
<td valign="top"><B>+system_eachturn</B></TD>
<td>This is the final function to be executed after each successful command is entered by the player. This function is used to execute library code that is not game-specific and must be run after each of the player's commands.</td>
</tr><tr>
<td valign="top"><b>+dark_description</b></td>
<td>This function is called by the interpreter if a <b>look</b> command is executed in a location that has the attribute <B>DARKNESS</B>.</TD>
</tr><tr>
<td valign="top"><b>+object_descriptions</b></td>
<td>This function is called by the interpreter as the last step in processing a <b>look</b> command. It must display text that indicates the presence of all objects in the current location that don't have a <b>mass</b> of <b>scenery</b>.</TD>
</tr><tr>
<td valign="top"><b>+no_light</b></td>
<td>This function is called by verbs in the library if they are attempted by the player in a location that has the attribute <B>DARKNESS</B>.</TD>
</tr><tr>
<td><B>+movement</B></TD>
<td>This function is executed each time the player attempts to move to another location. If this function returns false (it does not exist or exited with the command <B>return</B> <B>false</B>), then the player's attempted movement is successful. If it does exist and does not exit with the command <B>return false</B> (reaches the end of the function or executes a <B>return</B> (<B>return true</B>) command), then the player is not moved. In this case, some text explaining why the movement did not occur should be displayed.</TD>
</tr><tr>
<td valign="top"><B>movement_</b><i>here</i></td>
<td>If the current location has a local <B>movement</B> function associated with it, it will be executed directly before, and under the same conditions as, <B>+movement</b>.</td>
</tr><tr>
<td valign="top"><B>+before_look</B></TD>
<td>This is the first function executed whenever a <B>look</B> command is executed. If it returns true no further processing of the <b>look</b> command occurs.</TD>
</tr><tr>
<td valign="top"><B>+title</B></TD>
<td>This function is executed after <b>+before_look</b>, but before the locations associated <b>look</b> function. This function is the place to put any generic code that prints the title of each location, or extra meta information such as whether the player is currently sitting down.</TD>
</tr><tr>
<td valign="top"><B>look_</B><I>here</I></TD>
<td>This function is executed whenever the player types a <B>look</B> command, moves into a new location or restores as saved game.</TD>
</tr><tr>
<td valign="top"><B>+object_descriptions</B></TD>
<td>This function is executed after the above <b>look</b> function to output the descriptions of all the objects present in the current location.</TD>
</tr><tr>
<td valign="top"><B>+after_look</B></TD>
<td>This is the last function executed whenever a <B>look</B> command is executed.</TD>
</tr><tr>
<td valign="top"><B>constructor_</B><I>item</I></TD>
<td>This function is executed for each item defined straight after the game file is loaded and before <b>+intro</b> is executed.</TD>
</tr><tr>
<td valign="top"><B>+save_game<br>+restore_game<br>+restart_game<br>+undo_move<br>+quit_game</b></TD>
<td>These functions may be defined to override the internal implementation of the respective system-level commands. When the player attempts to use one of these commands, the interpreter will first look for the presence of the corresponding global function. If this function exists it will be executed. If it does not exist, the default implementation inside the interpreter will be used.</td>

</tr></table>

<h2><a class="section" name="functions7">Utility Functions</a></h2>

<p>The following are utility functions that are provided by <b>utils.library</b>:

<table width=100%><tr>
<th width=20%>Function</th>
<th>Description</th>
</tr><tr>
<td valign="top"><b>+no_light</b></td>
<td>This function is called by verbs in the <b>verbs.library</b> if the player attempts to use them in a location that has the attribute <B>DARKNESS</B>.</TD>
</tr><tr>
<td valign="top"><B>+details</B> <i>Object</i></TD>
<td>This function displays information about the object that is passed to it as a parameter. This information includes whether the object is open or closed and any other objects that are contained within or being carried by this object.</td>
</tr><tr>
<td valign="top"><B>+contents</B> <i>Object</i></TD>
<td>This function displays a list of any other objects that are contained within or being carried by the object passed to it as a parameter. This function is called by <b>+details</b>.</td>
</tr><tr>
<td valign="top"><B>+spaced_contents</B> <i>Object</i></TD>
<td>This function is similar to <b>+contents</b> except that it starts a new paragraph if there are any objects to list. It is more suited for use after location descriptions.</td>
</tr>
</table>

<!-- END OF BODY -->
<p><a href="index.html">Back to Contents</b>
</body>
</html>
