This is the story of JACL, a language for creating interactive fiction, and the journey that creating that language has taken me on. I started writing JACL sometime around 1994. At the time I didn't know of the existence of any other languages for creating IF, and I must admit that if I had stumbled across Inform at the time I probably wouldn't have started. My need would have been met and at the time I wouldn't have been able to predict how much I would ultimately get out of seeing a project like this through to completion.

It certainly isn't a road paved with rose petals writing a new IF language, that's for sure. The technical challenges are great, a huge amount of time is required and at the end of the day, when you finally release that new game, the sentiment of, "I don't see any reason to have used a new system and made me download a new interpreter either" is relatively common. I don't blame anyone for feeling this way, the reality is that there isn't anything in it for the average player to have to install a new system or learn its idiosyncrasies. I think I have been thanked for writing JACL about as many times as I have felt the need to apologise for having done so, and that in many ways encapsulates the highs and lows of the journey.

I started writing JACL as a way of teaching myself C, armed only with my trust Amiga 1000, a copy of "The C Programming Language" and a bottle of Coke. Having managed to get "Hello World" to finally compile I decided an IF language was the obvious next project. The arrogance of youth, hey? 

Heh. I have just realised that as I sit hear typing this I am wearing a Top Gear t-shirt with "How hard can it be?" written below a picture of a Reliant Robin playing at being a Space Shuttle. I guess that is how I felt at the time and I can certainly say there have been plenty of times along the way when the explosive bolts have failed to work (http://ifdb.tads.org/viewgame?id=b5i8wgvoe786apza).

I never went to university or studied programming formally so it was a steep learning curve to say the least. I had never even heard of Lex or Yacc and knew nothing about writing a compiler so I started writing a simple interpreter from first principles. For years this Frankensteinian beast grew then shrank, got broken then fixed again, hacked and bandaged until I had a (barely) working system. I wrote The Curse of Eldor (possibly the worst piece of IF every written :)) as a way of testing the interpreter as I went. I entered it into the 1996 IF Comp and this line from a review sums up the situation nicely: "Unplayably buggy under both DOS and Linux: save/restore doesn't work under Windows". The game came 21st out of 27 (a fact that really makes me wonder...) 

Having JACL as an interpreted language it actually something I quite like, despite at the time it being my only choice. Implementation is kept simple, performance is more than adequate and the development cycle is quick and easy: http://www.youtube.com/watch?v=jx6mV1CPCzc  Sure, a nice IDE is pretty good too, but I have always enjoyed programming from the command line with vi.

By 1997 JACL was starting to work reasonably well and I wrote The Unholy Grail for the Annual Comp, where came 15th of 34. Not too bad I thought. A review of the game by Paul O'Brian included this line: "With the improvements he's already made to his JACL engine it seems entirely plausible that it could one day match the quality of the current state of the art." 

Never under estimate the power of a few words of encouragement. They can sustain a project like this for years sometimes and I can't thank those types of people enough. All too often the Internet seems to be a place where people can put the boot in from the safety of their bedroom on the far side of the planet. I personally believe that you shouldn't have a go at someone unless they are within arm's length of your nose, but I digress... Anyway, when people take the time to offer a few kind words they are really giving a lot, even if it doesn't cost them much.

It is about this point in the project that I would say things had gone too far to turn back. I was starting to get a few emails from interested users and even some unsolicited cash donations. I should say that by "too late to turn back," I don't mean that I felt committed to others, although there was an element of that, what I mean is that once a project reaches a certain point it feels like it has come to life, a child that you must keep alive at any cost. 

I'm not very good with dates, but sometime around 2000 the very simple and obvious thought occurred to me that all a web server does is accept a text request and return a text response. "Hmmm..." I thought as I poured myself my fourth scotch too many. "How hard would it be to make JACL work on the web?" The answer, as it turned out, was not very hard at all. I used a library called FastCGI to wrap the command processing code, gave each user a random session ID and used the normal game-saving code to save the current state of the game after each move. Voila! JACL was on the web. Sweet. Sure, there was a serious mix of presentation and code (which has now been mostly fixed), but it was certainly a big chunk of new functionality for relatively little effort.

I personally prefer the server-side approach to presenting interactive fiction on the web. Although Javascript can be used to enhanced the player's experience, it is not essential, and with careful programming (done once only in a library), games can be made to degrade gracefully to the point where they are perfectly playable with a simple console browser like Lynx. At the other end of the specrum the author also has access to the full power of the modern web browser including graphics, sound and GUI widgets. GUI widgets can be surprisingly useful even in an IF game. Options such as 'verbose' and 'brief' can become radio buttons and inventories selectable list boxes. The web interface library that comes with JACL can even be switched between a point-and-click mode and a regular command prompt for example, which can be a good training tool for new players. To support this type of functionality JACL has a language feature that allows the author to map a URL parameter to a JACL variable, along with some validation constraints. This keeps the GUI and the game's internal model synchronised with no extra game code. (For an example of this see http://jacl.game-host.org:8080/fastcgi-bin/dragon.jacl) The obvious down sides to the server-side approach are latency and the need for a continuous network connection. The game just mentioned is running on a very old laptop behind a slow domestic link, external hosting would greatly improve this situation.

Interest in this new web-enabled version was much greater due to the fact that a variety of graphical turn-based games could be made (http://jacl.game-host.org:8080/fastcgi-bin/blackjacl.jacl for example is in fact a piece of regular IF with a GUI front end.) This interest lead to a very generous donation to the project by Andreas Matthias in the form of a web server module that could be bolted onto the interpreter to turn it into a self-contained application server. Simply run your game from the command line and point your browser to http://localhost:8080. This was perfect for development as authors didn't have to install and configure Apache and FastCGI. As JACL is an interpreted language this web server module would also check the time stamp of the game file before each request and reload the game automatically if it had changed. This made development for the web as quick and painless as it was for the console.

Having someone contribute something valuable like this is really raised the bar and inspired me to put more effort into the project myself. At this point I totally re-wrote the parser to work much more in the way it should have in the first place. I'm not saying it is perfect yet, but it is certainly now at the point where you can play a game without being overly aware of it, although I will concede that disambiguation is still an issue, particularly with the web client (http://jacl.game-host.org:8080/fastcgi-bin/lab.jacl) Incidentally, this 'game' is an example of what a JACL game that has in no way been written for the web looks like online.

Eventually I stumbled across what I consider (yes, from my selfish perspective!) the finest addition to the world of Interactive Fiction ever: Glk. I know it has its detractors, but for me it was a chance to not only to port JACL effortlessly to many platforms, but also to go under the radar -- to appear (superficially at least) to look more the like interpreters that people were already familiar with. The pinnacle of this for me is Gargoyle, and I can't thank Ben Cressey enough for being so helpful in getting JACL integrated in that project. It is great for people to be able to play JACL games without the need to find and install any extra software. 

Although complex graphics were always possible using the web interpreter, Glk brought graphics to the desktop interpreter for the first time. In addition to this I discovered the joy of adding sound to a game. I am a big believer in how much sound can add to a piece of interactive fiction and the Glk JACL interpreter now supports time-triggered sounds, fades, cross fades and chained sounds across eight audio channels. 

An interesting observation I'd like to share at this point is that the fact that only a small number of people have written games using JACL has been paradoxically rewarding. If you write a piece of software and only a handful of people use it you have more time to give to those people. Those people (I believe) appreciate the quantity of time you are able to give them and out of those interactions some strong friendships have been formed. In fact at times those interactions keep me quite busy and I now realise that if I had a lot  more users my contact with those people would be much more terse and distant, leaving the community to assist itself, much in the way it does with Inform and TADS etc. That would be fine for the community itself, but from a personal point of view I enjoy things the way they are. 

Of course users, even one, means a manual, and that is something I have enjoyed too. It is the only part of the whole project that I have been able to hold in my hands and say "I made this." Or maybe I've just watched too much X-Files. Of course like many areas I should really say, "we made this," as many people have contributed to the content. Robert Osztolykan and Parham Doustdar did a lot of wonderful editing and come up with some interesting suggestions along the way. One simple example is the suggestion that there should be a way to querying how often a function had been called. In JACL all actions map to a function so this feature serves as a great way to handle multiple repeats of the same action or checking whether action A has been done before allowing action B, all without manually storing any extra state information. It was a simple addition that turned out to be incredibly useful, and one that I would not have thought of on my own.

So where are things at now? Recently I have had code donated by Thomas Schwarz to the web side of the project that handles user registration and password reset which I hope to include in the 2.8 release (in fact a multiplayer fork is looking likely), some Ajax code and CSS to give a scrolling history of previous commands and a French translation of the verbs library by Eric Forgeot (German was done many years ago by Niels Haedecke). Another interesting observation (well, I think it is anyway), is that the vast majority of JACL users don't come from an English speaking background. I'm guessing this has something to do with being more open to things outside the mainstream, but I really don't know, maybe it is just a statistical anomaly (and don't give me any stick about being a small sample size. :) ) 

As it appears to be topical at the moment I should mention that JACL runs with a very open development process, which is of course much easier to do with a small community. Almost all active users run a version straight from the Subversion repository and feedback often leads to working code within days. After a period of time many users also get write access to the repository to either contribute to JACL directly or simply to have a convenient repository to store their game code in. It is also much easier to help eachother with our games when the source is in a shared repository like that. I try to have a feature freeze for at least a week or so before a public release is made, more so with an interpreter that is destined to end up in a Gargoyle release.

The final missing piece of the puzzle for me personally now is a good game, and this is what I am busy trying to turn my 2008 IntroComp entry, The Bloody Guns, into. Whether I succeed on that front I don't know. I'm starting to realise that writing a truly great piece of interactive fiction is extremely difficult. The perfect blend of story, writing, puzzles and fun can incredibly elusive, but I'm giving it my best shot. I'm probably about two thirds of the way through now and particularly happy with the way that multitrack sound is enhancing the experience without being necessary to play or enjoy the game. Oh, and if you want to help beta test please send me an email! In fact a "producer" is more what I feel like I need but that is probably a bigger commitment again.

Well, to sum up, over the last fifteen years I have learned a hell of a lot, made a lot of good friends, gained a real sense of achievement and annoyed the hell out of my wife. Okay, so maybe the last one isn't so cool, but if you have an interest in something, pursue it, and don't worry that someone else has already done it before you. 
